import { useEffect, useRef, useState } from 'react';
import * as C from '../DragAndDropClickForm/styles';
import {
  Easing,
  useAnimatedStyle,
  useSharedValue,
  withTiming,
  withSpring,
} from 'react-native-reanimated';

export function DropItem({ id, label, zones }) {
  const [isClicked, setIsClicked] = useState(false);
  const itemRef = useRef();

  const originalPositions = {
    x: useSharedValue(0),
    y: useSharedValue(0),
  };

  const positionX = useSharedValue(originalPositions.x.value);
  const positionY = useSharedValue(originalPositions.y.value);

  const ItemAnimatedStyle = useAnimatedStyle(() => {
    return {
      position: 'absolute',
      top: positionY.value,
      left: positionX.value,
    };
  });

  function HandleItemClick(id) {
    console.log(zones);
    for (let zone of zones) {
      if (isClicked) {
        // positionX.value = withTiming(originalPositions.x.value, { duration: 300 });
        positionY.value = withTiming(20, { duration: 300 });
        setIsClicked(false);
        return;
      }

      if (!zone.itemId) {
        // positionX.value = withTiming(10, { duration: 300 });
        positionY.value = withTiming(10, { duration: 300 });
        setIsClicked(true);
      }
    }
  }

  return (
    <C.DropItem
      key={id}
      ref={itemRef}
      activeOpacity={0.7}
      onLayout={event => {
        event.target.measure((x, y, width, height, pageX, pageY) => {
          console.log({ pageX, pageY });
          originalPositions.x.value = pageX;
          originalPositions.y.value = pageY;
        });
      }}
      onStartShouldSetResponder={() => HandleItemClick(id)}
      style={ItemAnimatedStyle}
    >
      <C.Label>{label}</C.Label>
    </C.DropItem>
  );
}
