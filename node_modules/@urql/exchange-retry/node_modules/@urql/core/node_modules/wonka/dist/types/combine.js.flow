// @flow

// see https://gist.github.com/thecotne/6e5969f4aaf8f253985ed36b30ac9fe0
type $FlowGen$If<X: boolean, Then, Else = empty> = $Call<
  ((true, Then, Else) => Then) & ((false, Then, Else) => Else),
  X,
  Then,
  Else
>;

type $FlowGen$Assignable<A, B> = $Call<
  ((...r: [B]) => true) & ((...r: [A]) => false),
  A
>;

import type { Source, TypeOfSource } from "./types";
declare type TypeOfSourceArray<T: [] & any[]> = $FlowGen$If<
  $FlowGen$Assignable<T, [Head] & Tail>,
  [TypeOfSource<Head>] & TypeOfSourceArray<Tail>,
  []
>;
declare export function zip<Sources: [] & Source<any>[]>(
  sources: [] & Sources
): Source<TypeOfSourceArray<Sources>>;
declare export function zip<
  Sources: {
    [prop: string]: Source<any>,
  }
>(
  sources: Sources
): Source<
  $ObjMapi<
    Sources,
    <Property>(Property) => TypeOfSource<$ElementType<Sources, Property>>
  >
>;
declare export function combine<Sources: Source<any>[]>(
  ...sources: Sources
): Source<TypeOfSourceArray<Sources>>;
