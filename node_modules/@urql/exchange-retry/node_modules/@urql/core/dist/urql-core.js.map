{"version":3,"file":"urql-core.js","sources":["../src/utils/typenames.ts","../src/utils/maskTypename.ts","../src/utils/streamUtils.ts","../src/utils/operation.ts","../src/utils/index.ts","../src/gql.ts","../src/exchanges/cache.ts","../src/exchanges/ssr.ts","../src/exchanges/subscription.ts","../src/exchanges/debug.ts","../src/exchanges/dedup.ts","../src/exchanges/fetch.ts","../src/exchanges/fallback.ts","../src/exchanges/compose.ts","../src/exchanges/map.ts","../src/exchanges/index.ts","../src/client.ts"],"sourcesContent":["import {\n  DocumentNode,\n  FieldNode,\n  InlineFragmentNode,\n  Kind,\n  visit,\n} from 'graphql';\n\nimport { KeyedDocumentNode, keyDocument } from './request';\n\ninterface EntityLike {\n  [key: string]: EntityLike | EntityLike[] | any;\n  __typename: string | null | void;\n}\n\nconst collectTypes = (obj: EntityLike | EntityLike[], types: Set<string>) => {\n  if (Array.isArray(obj)) {\n    for (const item of obj) collectTypes(item, types);\n  } else if (typeof obj === 'object' && obj !== null) {\n    for (const key in obj) {\n      if (key === '__typename' && typeof obj[key] === 'string') {\n        types.add(obj[key] as string);\n      } else {\n        collectTypes(obj[key], types);\n      }\n    }\n  }\n\n  return types;\n};\n\nexport const collectTypesFromResponse = (response: object): string[] => [\n  ...collectTypes(response as EntityLike, new Set()),\n];\n\nconst formatNode = (node: FieldNode | InlineFragmentNode) => {\n  if (!node.selectionSet) return node;\n  for (const selection of node.selectionSet.selections)\n    if (\n      selection.kind === Kind.FIELD &&\n      selection.name.value === '__typename' &&\n      !selection.alias\n    )\n      return node;\n\n  return {\n    ...node,\n    selectionSet: {\n      ...node.selectionSet,\n      selections: [\n        ...node.selectionSet.selections,\n        {\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: '__typename',\n          },\n        },\n      ],\n    },\n  };\n};\n\nconst formattedDocs = new Map<number, KeyedDocumentNode>();\n\nexport const formatDocument = <T extends DocumentNode>(node: T): T => {\n  const query = keyDocument(node);\n\n  let result = formattedDocs.get(query.__key);\n  if (!result) {\n    result = visit(query, {\n      Field: formatNode,\n      InlineFragment: formatNode,\n    }) as KeyedDocumentNode;\n\n    // Ensure that the hash of the resulting document won't suddenly change\n    // we are marking __key as non-enumerable so when external exchanges use visit\n    // to manipulate a document we won't restore the previous query due to the __key\n    // property.\n    Object.defineProperty(result, '__key', {\n      value: query.__key,\n      enumerable: false,\n    });\n\n    formattedDocs.set(query.__key, result);\n  }\n\n  return (result as unknown) as T;\n};\n","export const maskTypename = (data: any, isRoot?: boolean): any => {\n  if (!data || typeof data !== 'object') {\n    return data;\n  } else if (Array.isArray(data)) {\n    return data.map(d => maskTypename(d));\n  } else if (\n    data &&\n    typeof data === 'object' &&\n    (isRoot || '__typename' in data)\n  ) {\n    const acc = {};\n    for (const key in data) {\n      if (key === '__typename') {\n        Object.defineProperty(acc, '__typename', {\n          enumerable: false,\n          value: data.__typename,\n        });\n      } else {\n        acc[key] = maskTypename(data[key]);\n      }\n    }\n    return acc;\n  } else {\n    return data;\n  }\n};\n","import { Source, subscribe, pipe } from 'wonka';\nimport { OperationResult, PromisifiedSource } from '../types';\n\nexport function withPromise<T extends OperationResult>(\n  source$: Source<T>\n): PromisifiedSource<T> {\n  (source$ as PromisifiedSource<T>).toPromise = () => {\n    return new Promise(resolve => {\n      const subscription = pipe(\n        source$,\n        subscribe(result => {\n          if (!result.stale && !result.hasNext) {\n            Promise.resolve().then(() => {\n              subscription.unsubscribe();\n              resolve(result);\n            });\n          }\n        })\n      );\n    });\n  };\n\n  return source$ as PromisifiedSource<T>;\n}\n","import {\n  AnyVariables,\n  GraphQLRequest,\n  Operation,\n  OperationContext,\n  OperationType,\n} from '../types';\n\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  kind: OperationType,\n  request: GraphQLRequest<Data, Variables>,\n  context: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation<\n  Data = any,\n  Variables extends AnyVariables = AnyVariables\n>(\n  kind: OperationType,\n  request: Operation<Data, Variables>,\n  context?: OperationContext\n): Operation<Data, Variables>;\n\nfunction makeOperation(kind, request, context) {\n  if (!context) context = request.context;\n\n  return {\n    key: request.key,\n    query: request.query,\n    variables: request.variables,\n    kind,\n    context,\n  };\n}\n\nexport { makeOperation };\n\n/** Spreads the provided metadata to the source operation's meta property in context.  */\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationContext['meta']\n) => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n};\n","export * from './error';\nexport * from './request';\nexport * from './result';\nexport * from './typenames';\nexport * from './stringifyVariables';\nexport * from './maskTypename';\nexport * from './streamUtils';\nexport * from './operation';\n\nexport const noop = () => {\n  /* noop */\n};\n","/* eslint-disable prefer-rest-params */\nimport { DocumentNode, DefinitionNode, Kind } from 'graphql';\nimport { AnyVariables, TypedDocumentNode } from './types';\nimport { keyDocument, stringifyDocument } from './utils';\n\nconst applyDefinitions = (\n  fragmentNames: Map<string, string>,\n  target: DefinitionNode[],\n  source: Array<DefinitionNode> | ReadonlyArray<DefinitionNode>\n) => {\n  for (const definition of source) {\n    if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n      const name = definition.name.value;\n      const value = stringifyDocument(definition);\n      // Fragments will be deduplicated according to this Map\n      if (!fragmentNames.has(name)) {\n        fragmentNames.set(name, value);\n        target.push(definition);\n      } else if (\n        process.env.NODE_ENV !== 'production' &&\n        fragmentNames.get(name) !== value\n      ) {\n        // Fragments with the same names is expected to have the same contents\n        console.warn(\n          '[WARNING: Duplicate Fragment] A fragment with name `' +\n            name +\n            '` already exists in this document.\\n' +\n            'While fragment names may not be unique across your source, each name must be unique per document.'\n        );\n      }\n    } else {\n      target.push(definition);\n    }\n  }\n};\n\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  strings: TemplateStringsArray,\n  ...interpolations: Array<TypedDocumentNode | DocumentNode | string>\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql<Data = any, Variables extends AnyVariables = AnyVariables>(\n  string: string\n): TypedDocumentNode<Data, Variables>;\n\nfunction gql(/* arguments */) {\n  const fragmentNames = new Map<string, string>();\n  const definitions: DefinitionNode[] = [];\n  const interpolations: DefinitionNode[] = [];\n\n  // Apply the entire tagged template body's definitions\n  let body: string = Array.isArray(arguments[0])\n    ? arguments[0][0]\n    : arguments[0] || '';\n  for (let i = 1; i < arguments.length; i++) {\n    const value = arguments[i];\n    if (value && value.definitions) {\n      interpolations.push(...value.definitions);\n    } else {\n      body += value;\n    }\n\n    body += arguments[0][i];\n  }\n\n  // Apply the tag's body definitions\n  applyDefinitions(fragmentNames, definitions, keyDocument(body).definitions);\n  // Copy over each interpolated document's definitions\n  applyDefinitions(fragmentNames, definitions, interpolations);\n\n  return keyDocument({\n    kind: Kind.DOCUMENT,\n    definitions,\n  });\n}\n\nexport { gql };\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, map, merge, pipe, share, tap } from 'wonka';\n\nimport { Client } from '../client';\nimport { Exchange, Operation, OperationResult } from '../types';\n\nimport {\n  makeOperation,\n  addMetadata,\n  collectTypesFromResponse,\n  formatDocument,\n} from '../utils';\n\ntype ResultCache = Map<number, OperationResult>;\ntype OperationCache = Map<string, Set<number>>;\n\nconst shouldSkip = ({ kind }: Operation) =>\n  kind !== 'mutation' && kind !== 'query';\n\nexport const cacheExchange: Exchange = ({ forward, client, dispatchDebug }) => {\n  const resultCache: ResultCache = new Map();\n  const operationCache: OperationCache = new Map();\n\n  // Adds unique typenames to query (for invalidating cache entries)\n  const mapTypeNames = (operation: Operation): Operation => {\n    const formattedOperation = makeOperation(operation.kind, operation);\n    formattedOperation.query = formatDocument(operation.query);\n    return formattedOperation;\n  };\n\n  const isOperationCached = (operation: Operation) => {\n    const {\n      key,\n      kind,\n      context: { requestPolicy },\n    } = operation;\n    return (\n      kind === 'query' &&\n      requestPolicy !== 'network-only' &&\n      (requestPolicy === 'cache-only' || resultCache.has(key))\n    );\n  };\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n\n    const cachedOps$ = pipe(\n      sharedOps$,\n      filter(op => !shouldSkip(op) && isOperationCached(op)),\n      map(operation => {\n        const cachedResult = resultCache.get(operation.key);\n\n        dispatchDebug({\n          operation,\n          ...(cachedResult\n            ? {\n                type: 'cacheHit',\n                message: 'The result was successfully retried from the cache',\n              }\n            : {\n                type: 'cacheMiss',\n                message: 'The result could not be retrieved from the cache',\n              }),\n        });\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(operation, {\n            cacheOutcome: cachedResult ? 'hit' : 'miss',\n          }),\n        };\n\n        if (operation.context.requestPolicy === 'cache-and-network') {\n          result.stale = true;\n          reexecuteOperation(client, operation);\n        }\n\n        return result;\n      })\n    );\n\n    const forwardedOps$ = pipe(\n      merge([\n        pipe(\n          sharedOps$,\n          filter(op => !shouldSkip(op) && !isOperationCached(op)),\n          map(mapTypeNames)\n        ),\n        pipe(\n          sharedOps$,\n          filter(op => shouldSkip(op))\n        ),\n      ]),\n      map(op => addMetadata(op, { cacheOutcome: 'miss' })),\n      filter(\n        op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only'\n      ),\n      forward,\n      tap(response => {\n        let { operation } = response;\n        if (!operation) return;\n\n        const typenames = collectTypesFromResponse(response.data).concat(\n          operation.context.additionalTypenames || []\n        );\n\n        // Invalidates the cache given a mutation's response\n        if (response.operation.kind === 'mutation') {\n          const pendingOperations = new Set<number>();\n\n          dispatchDebug({\n            type: 'cacheInvalidation',\n            message: `The following typenames have been invalidated: ${typenames}`,\n            operation,\n            data: { typenames, response },\n          });\n\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            for (const key of operations.values()) pendingOperations.add(key);\n            operations.clear();\n          }\n\n          for (const key of pendingOperations.values()) {\n            if (resultCache.has(key)) {\n              operation = (resultCache.get(key) as OperationResult).operation;\n              resultCache.delete(key);\n              reexecuteOperation(client, operation);\n            }\n          }\n        } else if (operation.kind === 'query' && response.data) {\n          resultCache.set(operation.key, response);\n          for (let i = 0; i < typenames.length; i++) {\n            const typeName = typenames[i];\n            let operations = operationCache.get(typeName);\n            if (!operations)\n              operationCache.set(typeName, (operations = new Set()));\n            operations.add(operation.key);\n          }\n        }\n      })\n    );\n\n    return merge([cachedOps$, forwardedOps$]);\n  };\n};\n\n// Reexecutes a given operation with the default requestPolicy\nexport const reexecuteOperation = (client: Client, operation: Operation) => {\n  return client.reexecuteOperation(\n    makeOperation(operation.kind, operation, {\n      ...operation.context,\n      requestPolicy: 'network-only',\n    })\n  );\n};\n","import { GraphQLError } from 'graphql';\nimport { pipe, share, filter, merge, map, tap } from 'wonka';\nimport { Exchange, OperationResult, Operation } from '../types';\nimport { addMetadata, CombinedError } from '../utils';\nimport { reexecuteOperation } from './cache';\n\nexport interface SerializedResult {\n  hasNext?: boolean;\n  data?: string | undefined; // JSON string of data\n  extensions?: string | undefined; // JSON string of data\n  error?: {\n    graphQLErrors: Array<Partial<GraphQLError> | string>;\n    networkError?: string;\n  };\n}\n\nexport interface SSRData {\n  [key: string]: SerializedResult;\n}\n\nexport interface SSRExchangeParams {\n  isClient?: boolean;\n  initialState?: SSRData;\n  staleWhileRevalidate?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface SSRExchange extends Exchange {\n  /** Rehydrates cached data */\n  restoreData(data: SSRData): void;\n  /** Extracts cached data */\n  extractData(): SSRData;\n}\n\n/** Serialize an OperationResult to plain JSON */\nconst serializeResult = (\n  { hasNext, data, extensions, error }: OperationResult,\n  includeExtensions: boolean\n): SerializedResult => {\n  const result: SerializedResult = {};\n  if (data !== undefined) result.data = JSON.stringify(data);\n  if (includeExtensions && extensions !== undefined) {\n    result.extensions = JSON.stringify(extensions);\n  }\n  if (hasNext) result.hasNext = true;\n\n  if (error) {\n    result.error = {\n      graphQLErrors: error.graphQLErrors.map(error => {\n        if (!error.path && !error.extensions) return error.message;\n\n        return {\n          message: error.message,\n          path: error.path,\n          extensions: error.extensions,\n        };\n      }),\n    };\n\n    if (error.networkError) {\n      result.error.networkError = '' + error.networkError;\n    }\n  }\n\n  return result;\n};\n\n/** Deserialize plain JSON to an OperationResult */\nconst deserializeResult = (\n  operation: Operation,\n  result: SerializedResult,\n  includeExtensions: boolean\n): OperationResult => ({\n  operation,\n  data: result.data ? JSON.parse(result.data) : undefined,\n  extensions:\n    includeExtensions && result.extensions\n      ? JSON.parse(result.extensions)\n      : undefined,\n  error: result.error\n    ? new CombinedError({\n        networkError: result.error.networkError\n          ? new Error(result.error.networkError)\n          : undefined,\n        graphQLErrors: result.error.graphQLErrors,\n      })\n    : undefined,\n  hasNext: result.hasNext,\n});\n\nconst revalidated = new Set<number>();\n\n/** The ssrExchange can be created to capture data during SSR and also to rehydrate it on the client */\nexport const ssrExchange = (params: SSRExchangeParams = {}): SSRExchange => {\n  const staleWhileRevalidate = !!params.staleWhileRevalidate;\n  const includeExtensions = !!params.includeExtensions;\n  const data: Record<string, SerializedResult | null> = {};\n\n  // On the client-side, we delete results from the cache as they're resolved\n  // this is delayed so that concurrent queries don't delete each other's data\n  const invalidateQueue: number[] = [];\n  const invalidate = (result: OperationResult) => {\n    invalidateQueue.push(result.operation.key);\n    if (invalidateQueue.length === 1) {\n      Promise.resolve().then(() => {\n        let key: number | void;\n        while ((key = invalidateQueue.shift())) {\n          data[key] = null;\n        }\n      });\n    }\n  };\n\n  // The SSR Exchange is a temporary cache that can populate results into data for suspense\n  // On the client it can be used to retrieve these temporary results from a rehydrated cache\n  const ssr: SSRExchange = ({ client, forward }) => ops$ => {\n    // params.isClient tells us whether we're on the client-side\n    // By default we assume that we're on the client if suspense-mode is disabled\n    const isClient =\n      params && typeof params.isClient === 'boolean'\n        ? !!params.isClient\n        : !client.suspense;\n\n    const sharedOps$ = share(ops$);\n\n    let forwardedOps$ = pipe(\n      sharedOps$,\n      filter(\n        operation =>\n          !data[operation.key] ||\n          !!data[operation.key]!.hasNext ||\n          operation.context.requestPolicy === 'network-only'\n      ),\n      forward\n    );\n\n    // NOTE: Since below we might delete the cached entry after accessing\n    // it once, cachedOps$ needs to be merged after forwardedOps$\n    let cachedOps$ = pipe(\n      sharedOps$,\n      filter(\n        operation =>\n          !!data[operation.key] &&\n          operation.context.requestPolicy !== 'network-only'\n      ),\n      map(op => {\n        const serialized = data[op.key]!;\n        const cachedResult = deserializeResult(\n          op,\n          serialized,\n          includeExtensions\n        );\n\n        if (staleWhileRevalidate && !revalidated.has(op.key)) {\n          cachedResult.stale = true;\n          revalidated.add(op.key);\n          reexecuteOperation(client, op);\n        }\n\n        const result: OperationResult = {\n          ...cachedResult,\n          operation: addMetadata(op, {\n            cacheOutcome: 'hit',\n          }),\n        };\n        return result;\n      })\n    );\n\n    if (!isClient) {\n      // On the server we cache results in the cache as they're resolved\n      forwardedOps$ = pipe(\n        forwardedOps$,\n        tap((result: OperationResult) => {\n          const { operation } = result;\n          if (operation.kind !== 'mutation') {\n            const serialized = serializeResult(result, includeExtensions);\n            data[operation.key] = serialized;\n          }\n        })\n      );\n    } else {\n      // On the client we delete results from the cache as they're resolved\n      cachedOps$ = pipe(cachedOps$, tap(invalidate));\n    }\n\n    return merge([forwardedOps$, cachedOps$]);\n  };\n\n  ssr.restoreData = (restore: SSRData) => {\n    for (const key in restore) {\n      // We only restore data that hasn't been previously invalidated\n      if (data[key] !== null) {\n        data[key] = restore[key];\n      }\n    }\n  };\n\n  ssr.extractData = () => {\n    const result: SSRData = {};\n    for (const key in data) if (data[key] != null) result[key] = data[key]!;\n    return result;\n  };\n\n  if (params && params.initialState) {\n    ssr.restoreData(params.initialState);\n  }\n\n  return ssr;\n};\n","import {\n  filter,\n  make,\n  merge,\n  mergeMap,\n  pipe,\n  share,\n  Subscription,\n  Source,\n  takeUntil,\n} from 'wonka';\n\nimport {\n  stringifyDocument,\n  makeResult,\n  makeErrorResult,\n  makeOperation,\n} from '../utils';\n\nimport {\n  Exchange,\n  ExecutionResult,\n  Operation,\n  OperationContext,\n  OperationResult,\n} from '../types';\n\nexport interface ObserverLike<T> {\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\n/** An abstract observable interface conforming to: https://github.com/tc39/proposal-observable */\nexport interface ObservableLike<T> {\n  subscribe(\n    observer: ObserverLike<T>\n  ): {\n    unsubscribe: () => void;\n  };\n}\n\nexport interface SubscriptionOperation {\n  query: string;\n  variables: Record<string, unknown> | undefined;\n  key: string;\n  context: OperationContext;\n}\n\nexport type SubscriptionForwarder = (\n  operation: SubscriptionOperation\n) => ObservableLike<ExecutionResult>;\n\n/** This is called to create a subscription and needs to be hooked up to a transport client. */\nexport interface SubscriptionExchangeOpts {\n  // This has been modelled to work with subscription-transport-ws\n  // See: https://github.com/apollographql/subscriptions-transport-ws#requestoptions--observableexecutionresult-returns-observable-to-execute-the-operation\n  forwardSubscription: SubscriptionForwarder;\n\n  /** This flag may be turned on to allow your subscriptions-transport to handle all operation types */\n  enableAllOperations?: boolean;\n  isSubscriptionOperation?: (operation: Operation) => boolean;\n}\n\nexport const subscriptionExchange = ({\n  forwardSubscription,\n  enableAllOperations,\n  isSubscriptionOperation,\n}: SubscriptionExchangeOpts): Exchange => ({ client, forward }) => {\n  const createSubscriptionSource = (\n    operation: Operation\n  ): Source<OperationResult> => {\n    // This excludes the query's name as a field although subscription-transport-ws does accept it since it's optional\n    const observableish = forwardSubscription({\n      key: operation.key.toString(36),\n      query: stringifyDocument(operation.query),\n      variables: operation.variables!,\n      context: { ...operation.context },\n    });\n\n    return make<OperationResult>(({ next, complete }) => {\n      let isComplete = false;\n      let sub: Subscription | void;\n\n      Promise.resolve().then(() => {\n        if (isComplete) return;\n\n        sub = observableish.subscribe({\n          next: result => next(makeResult(operation, result)),\n          error: err => next(makeErrorResult(operation, err)),\n          complete: () => {\n            if (!isComplete) {\n              isComplete = true;\n              if (operation.kind === 'subscription') {\n                client.reexecuteOperation(\n                  makeOperation('teardown', operation, operation.context)\n                );\n              }\n\n              complete();\n            }\n          },\n        });\n      });\n\n      return () => {\n        isComplete = true;\n        if (sub) sub.unsubscribe();\n      };\n    });\n  };\n  const isSubscriptionOperationFn =\n    isSubscriptionOperation ||\n    (operation => {\n      const { kind } = operation;\n      return (\n        kind === 'subscription' ||\n        (!!enableAllOperations && (kind === 'query' || kind === 'mutation'))\n      );\n    });\n\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const subscriptionResults$ = pipe(\n      sharedOps$,\n      filter(isSubscriptionOperationFn),\n      mergeMap(operation => {\n        const { key } = operation;\n        const teardown$ = pipe(\n          sharedOps$,\n          filter(op => op.kind === 'teardown' && op.key === key)\n        );\n\n        return pipe(createSubscriptionSource(operation), takeUntil(teardown$));\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(op => !isSubscriptionOperationFn(op)),\n      forward\n    );\n\n    return merge([subscriptionResults$, forward$]);\n  };\n};\n","import { pipe, tap } from 'wonka';\nimport { Exchange } from '../types';\n\nexport const debugExchange: Exchange = ({ forward }) => {\n  if (process.env.NODE_ENV === 'production') {\n    return ops$ => forward(ops$);\n  } else {\n    return ops$ =>\n      pipe(\n        ops$,\n        // eslint-disable-next-line no-console\n        tap(op => console.log('[Exchange debug]: Incoming operation: ', op)),\n        forward,\n        tap(result =>\n          // eslint-disable-next-line no-console\n          console.log('[Exchange debug]: Completed operation: ', result)\n        )\n      );\n  }\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Exchange, Operation, OperationResult } from '../types';\n\n/** A default exchange for debouncing GraphQL requests. */\nexport const dedupExchange: Exchange = ({ forward, dispatchDebug }) => {\n  const inFlightKeys = new Set<number>();\n\n  const filterIncomingOperation = (operation: Operation) => {\n    const { key, kind } = operation;\n    if (kind === 'teardown' || kind === 'mutation') {\n      inFlightKeys.delete(key);\n      return true;\n    }\n\n    const isInFlight = inFlightKeys.has(key);\n    inFlightKeys.add(key);\n\n    if (isInFlight) {\n      dispatchDebug({\n        type: 'dedup',\n        message: 'An operation has been deduped.',\n        operation,\n      });\n    }\n\n    return !isInFlight;\n  };\n\n  const afterOperationResult = ({ operation, hasNext }: OperationResult) => {\n    if (!hasNext) {\n      inFlightKeys.delete(operation.key);\n    }\n  };\n\n  return ops$ => {\n    const forward$ = pipe(ops$, filter(filterIncomingOperation));\n    return pipe(forward(forward$), tap(afterOperationResult));\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { filter, merge, mergeMap, pipe, share, takeUntil, onPush } from 'wonka';\n\nimport { Exchange } from '../types';\nimport {\n  makeFetchBody,\n  makeFetchURL,\n  makeFetchOptions,\n  makeFetchSource,\n} from '../internal';\n\n/** A default exchange for fetching GraphQL requests. */\nexport const fetchExchange: Exchange = ({ forward, dispatchDebug }) => {\n  return ops$ => {\n    const sharedOps$ = share(ops$);\n    const fetchResults$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind === 'query' || operation.kind === 'mutation';\n      }),\n      mergeMap(operation => {\n        const { key } = operation;\n        const body = makeFetchBody(operation);\n        const url = makeFetchURL(operation, body);\n        const fetchOptions = makeFetchOptions(operation, body);\n\n        dispatchDebug({\n          type: 'fetchRequest',\n          message: 'A fetch request is being executed.',\n          operation,\n          data: {\n            url,\n            fetchOptions,\n          },\n        });\n\n        const source = pipe(\n          makeFetchSource(operation, url, fetchOptions),\n          takeUntil(\n            pipe(\n              sharedOps$,\n              filter(op => op.kind === 'teardown' && op.key === key)\n            )\n          )\n        );\n\n        if (process.env.NODE_ENV !== 'production') {\n          return pipe(\n            source,\n            onPush(result => {\n              const error = !result.data ? result.error : undefined;\n\n              dispatchDebug({\n                type: error ? 'fetchError' : 'fetchSuccess',\n                message: `A ${\n                  error ? 'failed' : 'successful'\n                } fetch response has been returned.`,\n                operation,\n                data: {\n                  url,\n                  fetchOptions,\n                  value: error || result,\n                },\n              });\n            })\n          );\n        }\n\n        return source;\n      })\n    );\n\n    const forward$ = pipe(\n      sharedOps$,\n      filter(operation => {\n        return operation.kind !== 'query' && operation.kind !== 'mutation';\n      }),\n      forward\n    );\n\n    return merge([fetchResults$, forward$]);\n  };\n};\n","import { filter, pipe, tap } from 'wonka';\nimport { Operation, ExchangeIO, ExchangeInput } from '../types';\nimport { noop } from '../utils';\n\n/** This is always the last exchange in the chain; No operation should ever reach it */\nexport const fallbackExchange: ({\n  dispatchDebug,\n}: Pick<ExchangeInput, 'dispatchDebug'>) => ExchangeIO = ({\n  dispatchDebug,\n}) => ops$ =>\n  pipe(\n    ops$,\n    tap<Operation>(operation => {\n      if (\n        operation.kind !== 'teardown' &&\n        process.env.NODE_ENV !== 'production'\n      ) {\n        const message = `No exchange has handled operations of kind \"${operation.kind}\". Check whether you've added an exchange responsible for these operations.`;\n\n        dispatchDebug({\n          type: 'fallbackCatch',\n          message,\n          operation,\n        });\n        console.warn(message);\n      }\n    }),\n    /* All operations that skipped through the entire exchange chain should be filtered from the output */\n    filter<any>(() => false)\n  );\n\nexport const fallbackExchangeIO: ExchangeIO = fallbackExchange({\n  dispatchDebug: noop,\n});\n","import { Exchange, ExchangeInput } from '../types';\n\n/** This composes an array of Exchanges into a single ExchangeIO function */\nexport const composeExchanges = (exchanges: Exchange[]) => ({\n  client,\n  forward,\n  dispatchDebug,\n}: ExchangeInput) =>\n  exchanges.reduceRight(\n    (forward, exchange) =>\n      exchange({\n        client,\n        forward,\n        dispatchDebug(event) {\n          dispatchDebug({\n            timestamp: Date.now(),\n            source: exchange.name,\n            ...event,\n          });\n        },\n      }),\n    forward\n  );\n","import { mergeMap, fromValue, fromPromise, pipe } from 'wonka';\nimport { Operation, OperationResult, Exchange } from '../types';\nimport { CombinedError } from '../utils';\n\nexport interface MapExchangeOpts {\n  onOperation?(operation: Operation): Promise<Operation> | Operation | void;\n  onResult?(\n    result: OperationResult\n  ): Promise<OperationResult> | OperationResult | void;\n  onError?(error: CombinedError, operation: Operation): void;\n}\n\nexport const mapExchange = ({\n  onOperation,\n  onResult,\n  onError,\n}: MapExchangeOpts): Exchange => {\n  return ({ forward }) => ops$ => {\n    return pipe(\n      pipe(\n        ops$,\n        mergeMap(operation => {\n          const newOperation =\n            (onOperation && onOperation(operation)) || operation;\n          return 'then' in newOperation\n            ? fromPromise(newOperation)\n            : fromValue(newOperation);\n        })\n      ),\n      forward,\n      mergeMap(result => {\n        if (onError && result.error) onError(result.error, result.operation);\n        const newResult = (onResult && onResult(result)) || result;\n        return 'then' in newResult\n          ? fromPromise(newResult)\n          : fromValue(newResult);\n      })\n    );\n  };\n};\n","export { ssrExchange } from './ssr';\nexport { cacheExchange } from './cache';\nexport { subscriptionExchange } from './subscription';\nexport { debugExchange } from './debug';\nexport { dedupExchange } from './dedup';\nexport { fetchExchange } from './fetch';\nexport { fallbackExchangeIO } from './fallback';\nexport { composeExchanges } from './compose';\n\nexport type {\n  SubscriptionOperation,\n  SubscriptionForwarder,\n  SubscriptionExchangeOpts,\n} from './subscription';\n\nexport { mapExchange, mapExchange as errorExchange } from './map';\nexport type { MapExchangeOpts } from './map';\n\nimport { cacheExchange } from './cache';\nimport { dedupExchange } from './dedup';\nimport { fetchExchange } from './fetch';\n\nexport const defaultExchanges = [dedupExchange, cacheExchange, fetchExchange];\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n\nimport {\n  filter,\n  make,\n  makeSubject,\n  onEnd,\n  onPush,\n  onStart,\n  pipe,\n  share,\n  Source,\n  take,\n  takeUntil,\n  publish,\n  subscribe,\n  switchMap,\n  fromValue,\n  merge,\n  map,\n  Subscription,\n} from 'wonka';\n\nimport { DocumentNode } from 'graphql';\n\nimport { composeExchanges, defaultExchanges } from './exchanges';\nimport { fallbackExchange } from './exchanges/fallback';\n\nimport {\n  TypedDocumentNode,\n  AnyVariables,\n  Exchange,\n  ExchangeInput,\n  GraphQLRequest,\n  Operation,\n  OperationInstance,\n  OperationContext,\n  OperationResult,\n  OperationType,\n  RequestPolicy,\n  PromisifiedSource,\n  DebugEvent,\n} from './types';\n\nimport {\n  createRequest,\n  withPromise,\n  maskTypename,\n  noop,\n  makeOperation,\n  getOperationType,\n} from './utils';\n\n/** Options for configuring the URQL [client]{@link Client}. */\nexport interface ClientOptions {\n  /** Target endpoint URL such as `https://my-target:8080/graphql`. */\n  url: string;\n  /** Any additional options to pass to fetch. */\n  fetchOptions?: RequestInit | (() => RequestInit);\n  /** An alternative fetch implementation. */\n  fetch?: typeof fetch;\n  /** An ordered array of Exchanges. */\n  exchanges?: Exchange[];\n  /** Activates support for Suspense. */\n  suspense?: boolean;\n  /** The default request policy for requests. */\n  requestPolicy?: RequestPolicy;\n  /** Use HTTP GET for queries. */\n  preferGetMethod?: boolean | 'force' | 'within-url-limit';\n  /** Mask __typename from results. */\n  maskTypename?: boolean;\n}\n\nexport interface Client {\n  new (options: ClientOptions): Client;\n\n  operations$: Source<Operation>;\n  suspense: boolean;\n\n  /** Start an operation from an exchange */\n  reexecuteOperation: (operation: Operation) => void;\n  /** Event target for monitoring, e.g. for @urql/devtools */\n  subscribeToDebugTarget?: (onEvent: (e: DebugEvent) => void) => Subscription;\n\n  createRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    kind: OperationType,\n    request: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Operation<Data, Variables>;\n\n  /** Executes an Operation by sending it through the exchange pipeline It returns an observable that emits all related exchange results and keeps track of this observable's subscribers. A teardown signal will be emitted when no subscribers are listening anymore. */\n  executeRequestOperation<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    operation: Operation<Data, Variables>\n  ): Source<OperationResult<Data, Variables>>;\n\n  query<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  readQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): OperationResult<Data, Variables> | null;\n\n  executeQuery<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  subscription<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): Source<OperationResult<Data, Variables>>;\n\n  executeSubscription<\n    Data = any,\n    Variables extends AnyVariables = AnyVariables\n  >(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n\n  mutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables,\n    context?: Partial<OperationContext>\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n\n  executeMutation<Data = any, Variables extends AnyVariables = AnyVariables>(\n    query: GraphQLRequest<Data, Variables>,\n    opts?: Partial<OperationContext> | undefined\n  ): Source<OperationResult<Data, Variables>>;\n}\n\nexport const Client: new (opts: ClientOptions) => Client = function Client(\n  this: Client | {},\n  opts: ClientOptions\n) {\n  if (process.env.NODE_ENV !== 'production' && !opts.url) {\n    throw new Error('You are creating an urql-client without a url.');\n  }\n\n  let ids = 0;\n\n  const replays = new Map<number, OperationResult>();\n  const active: Map<number, Source<OperationResult>> = new Map();\n  const queue: Operation[] = [];\n\n  const baseOpts = {\n    url: opts.url,\n    fetchOptions: opts.fetchOptions,\n    fetch: opts.fetch,\n    preferGetMethod: !!opts.preferGetMethod,\n    requestPolicy: opts.requestPolicy || 'cache-first',\n  };\n\n  // This subject forms the input of operations; executeOperation may be\n  // called to dispatch a new operation on the subject\n  const { source: operations$, next: nextOperation } = makeSubject<Operation>();\n\n  // We define a queued dispatcher on the subject, which empties the queue when it's\n  // activated to allow `reexecuteOperation` to be trampoline-scheduled\n  let isOperationBatchActive = false;\n  function dispatchOperation(operation?: Operation | void) {\n    if (operation) nextOperation(operation);\n    if (!isOperationBatchActive) {\n      isOperationBatchActive = true;\n      while (isOperationBatchActive && (operation = queue.shift()))\n        nextOperation(operation);\n      isOperationBatchActive = false;\n    }\n  }\n\n  /** Defines how result streams are created */\n  const makeResultSource = (operation: Operation) => {\n    let result$ = pipe(\n      results$,\n      filter((res: OperationResult) => {\n        return (\n          res.operation.kind === operation.kind &&\n          res.operation.key === operation.key &&\n          (!res.operation.context._instance ||\n            res.operation.context._instance === operation.context._instance)\n        );\n      })\n    );\n\n    // Mask typename properties if the option for it is turned on\n    if (opts.maskTypename) {\n      result$ = pipe(\n        result$,\n        map(res => ({ ...res, data: maskTypename(res.data, true) }))\n      );\n    }\n\n    // A mutation is always limited to just a single result and is never shared\n    if (operation.kind === 'mutation') {\n      return pipe(\n        result$,\n        onStart(() => nextOperation(operation)),\n        take(1)\n      );\n    }\n\n    const source = pipe(\n      result$,\n      // End the results stream when an active teardown event is sent\n      takeUntil(\n        pipe(\n          operations$,\n          filter(op => op.kind === 'teardown' && op.key === operation.key)\n        )\n      ),\n      switchMap(result => {\n        if (operation.kind !== 'query' || result.stale) {\n          return fromValue(result);\n        }\n\n        return merge([\n          fromValue(result),\n          // Mark a result as stale when a new operation is sent for it\n          pipe(\n            operations$,\n            filter(\n              op =>\n                op.kind === 'query' &&\n                op.key === operation.key &&\n                op.context.requestPolicy !== 'cache-only'\n            ),\n            take(1),\n            map(() => ({ ...result, stale: true }))\n          ),\n        ]);\n      }),\n      onPush(result => {\n        replays.set(operation.key, result);\n      }),\n      onEnd(() => {\n        // Delete the active operation handle\n        replays.delete(operation.key);\n        active.delete(operation.key);\n        // Delete all queued up operations of the same key on end\n        for (let i = queue.length - 1; i >= 0; i--)\n          if (queue[i].key === operation.key) queue.splice(i, 1);\n        // Dispatch a teardown signal for the stopped operation\n        nextOperation(makeOperation('teardown', operation, operation.context));\n      }),\n      share\n    );\n\n    return source;\n  };\n\n  const instance: Client =\n    this instanceof Client ? this : Object.create(Client.prototype);\n  const client: Client = Object.assign(instance, {\n    suspense: !!opts.suspense,\n    operations$,\n\n    reexecuteOperation(operation: Operation) {\n      // Reexecute operation only if any subscribers are still subscribed to the\n      // operation's exchange results\n      if (operation.kind === 'mutation' || active.has(operation.key)) {\n        queue.push(operation);\n        Promise.resolve().then(dispatchOperation);\n      }\n    },\n\n    createRequestOperation(kind, request, opts) {\n      if (!opts) opts = {};\n      const requestOperationType = getOperationType(request.query);\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        kind !== 'teardown' &&\n        requestOperationType !== kind\n      ) {\n        throw new Error(\n          `Expected operation of type \"${kind}\" but found \"${requestOperationType}\"`\n        );\n      }\n      return makeOperation(kind, request, {\n        _instance:\n          kind === 'mutation'\n            ? ((ids = (ids + 1) | 0) as OperationInstance)\n            : undefined,\n        ...baseOpts,\n        ...opts,\n        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,\n        suspense: opts.suspense || (opts.suspense !== false && client.suspense),\n      });\n    },\n\n    executeRequestOperation(operation) {\n      if (operation.kind === 'mutation') {\n        return makeResultSource(operation);\n      }\n\n      return make<OperationResult>(observer => {\n        let source = active.get(operation.key);\n\n        if (!source) {\n          active.set(operation.key, (source = makeResultSource(operation)));\n        }\n\n        const isNetworkOperation =\n          operation.context.requestPolicy === 'cache-and-network' ||\n          operation.context.requestPolicy === 'network-only';\n\n        return pipe(\n          source,\n          onStart(() => {\n            const prevReplay = replays.get(operation.key);\n\n            if (operation.kind === 'subscription') {\n              return dispatchOperation(operation);\n            } else if (isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n\n            if (\n              prevReplay != null &&\n              prevReplay === replays.get(operation.key)\n            ) {\n              observer.next(\n                isNetworkOperation ? { ...prevReplay, stale: true } : prevReplay\n              );\n            } else if (!isNetworkOperation) {\n              dispatchOperation(operation);\n            }\n          }),\n          onEnd(() => {\n            isOperationBatchActive = false;\n            observer.complete();\n          }),\n          subscribe(observer.next)\n        ).unsubscribe;\n      });\n    },\n\n    executeQuery(query, opts) {\n      const operation = client.createRequestOperation('query', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    executeSubscription(query, opts) {\n      const operation = client.createRequestOperation(\n        'subscription',\n        query,\n        opts\n      );\n      return client.executeRequestOperation(operation);\n    },\n\n    executeMutation(query, opts) {\n      const operation = client.createRequestOperation('mutation', query, opts);\n      return client.executeRequestOperation(operation);\n    },\n\n    query(query, variables, context) {\n      if (!context || typeof context.suspense !== 'boolean') {\n        context = { ...context, suspense: false };\n      }\n\n      return withPromise(\n        client.executeQuery(createRequest(query, variables), context)\n      );\n    },\n\n    readQuery(query, variables, context) {\n      let result: OperationResult | null = null;\n\n      pipe(\n        client.query(query, variables, context),\n        subscribe(res => {\n          result = res;\n        })\n      ).unsubscribe();\n\n      return result;\n    },\n\n    subscription(query, variables, context) {\n      return client.executeSubscription(\n        createRequest(query, variables),\n        context\n      );\n    },\n\n    mutation(query, variables, context) {\n      return withPromise(\n        client.executeMutation(createRequest(query, variables), context)\n      );\n    },\n  } as Client);\n\n  let dispatchDebug: ExchangeInput['dispatchDebug'] = noop;\n  if (process.env.NODE_ENV !== 'production') {\n    const { next, source } = makeSubject<DebugEvent>();\n    client.subscribeToDebugTarget = (onEvent: (e: DebugEvent) => void) =>\n      pipe(source, subscribe(onEvent));\n    dispatchDebug = next as ExchangeInput['dispatchDebug'];\n  }\n\n  const exchanges =\n    opts.exchanges !== undefined ? opts.exchanges : defaultExchanges;\n\n  // All exchange are composed into a single one and are called using the constructed client\n  // and the fallback exchange stream\n  const composedExchange = composeExchanges(exchanges);\n\n  // All exchanges receive inputs using which they can forward operations to the next exchange\n  // and receive a stream of results in return, access the client, or dispatch debugging events\n  // All operations then run through the Exchange IOs in a pipeline-like fashion\n  const results$ = share(\n    composedExchange({\n      client,\n      dispatchDebug,\n      forward: fallbackExchange({ dispatchDebug }),\n    })(operations$)\n  );\n\n  // Prevent the `results$` exchange pipeline from being closed by active\n  // cancellations cascading up from components\n  pipe(results$, publish);\n\n  return client;\n} as any;\n\nexport const createClient = (Client as any) as (opts: ClientOptions) => Client;\n"],"names":["collectTypes","obj","types","Array","isArray","item","key","collectTypesFromResponse","response","Set","formatNode","node","selection","selectionSet","selections","kind","Kind","FIELD","name","value","formattedDocs","Map","formatDocument","query","keyDocument","result","visit","Field","InlineFragment","Object","defineProperty","enumerable","maskTypename","data","isRoot","map","d","acc","withPromise","source$","toPromise","Promise","resolve","then","makeOperation","request","context","addMetadata","operation","meta","noop","applyDefinitions","fragmentNames","target","source","definition","FRAGMENT_DEFINITION","stringifyDocument","has","set","push","process","env","NODE_ENV","get","gql","arguments","i","length","definitions","body","interpolations","shouldSkip","cacheExchange","forward","client","dispatchDebug","resultCache","operationCache","mapTypeNames","formattedOperation","isOperationCached","requestPolicy","sharedOps$","share","ops$","cachedOps$","cachedResult","type","message","stale","reexecuteOperation","filter","op","forwardedOps$","typenames","concat","additionalTypenames","pendingOperations","typeName","operations","values","add","delete","merge","serializeResult","hasNext","extensions","error","includeExtensions","undefined","deserializeResult","JSON","parse","networkError","graphQLErrors","revalidated","ssrExchange","params","staleWhileRevalidate","invalidate","invalidateQueue","ssr","isClient","suspense","cacheOutcome","serialized","restoreData","restore","extractData","initialState","subscriptionExchange","forwardSubscription","enableAllOperations","isSubscriptionOperation","createSubscriptionSource","sub","isComplete","observableish","subscribe","next","makeResult","err","makeErrorResult","complete","subscriptionResults$","mergeMap","takeUntil","teardown$","isSubscriptionOperationFn","debugExchange","dedupExchange","inFlightKeys","filterIncomingOperation","isInFlight","tap","afterOperationResult","forward$","fetchExchange","makeFetchBody","makeFetchSource","url","fetchOptions","fallbackExchange","console","warn","fallbackExchangeIO","composeExchanges","exchanges","reduceRight","exchange","event","timestamp","Date","now","mapExchange","onOperation","onResult","onError","newResult","fromPromise","fromValue","newOperation","defaultExchanges","Client","opts","Error","replays","active","baseOpts","preferGetMethod","operations$","nextOperation","makeSubject","makeResultSource","res","_instance","result$","onEnd","queue","splice","onPush","switchMap","take","assign","instance","createRequestOperation","executeRequestOperation","make","observer","onStart","dispatchOperation","isNetworkOperation","variables","executeQuery","createRequest","readQuery","unsubscribe","subscription","executeSubscription","mutation","executeMutation","subscribeToDebugTarget","onEvent","composedExchange","results$","publish","createClient"],"mappings":"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"}