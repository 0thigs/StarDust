import { visit as e, Kind as r } from "graphql";

import { k as t, s as n, C as o, m as s, a as u, b as c, c as p, d as v, e as d, g as l, f as y } from "./d275b28e.mjs";

export { C as CombinedError, f as createRequest, j as getOperationName, a as makeErrorResult, m as makeResult, i as mergeResultPatch, h as stringifyVariables } from "./d275b28e.mjs";

import { subscribe as k, share as g, map as x, filter as w, tap as b, merge as E, mergeMap as O, takeUntil as q, make as N, onPush as _, fromPromise as D, fromValue as P, makeSubject as S, onEnd as R, onStart as V, publish as A, take as M, switchMap as T } from "wonka";

var collectTypes = (e, r) => {
  if (Array.isArray(e)) {
    for (var t of e) {
      collectTypes(t, r);
    }
  } else if ("object" == typeof e && null !== e) {
    for (var a in e) {
      if ("__typename" === a && "string" == typeof e[a]) {
        r.add(e[a]);
      } else {
        collectTypes(e[a], r);
      }
    }
  }
  return r;
};

var formatNode = e => {
  if (!e.selectionSet) {
    return e;
  }
  for (var t of e.selectionSet.selections) {
    if (t.kind === r.FIELD && "__typename" === t.name.value && !t.alias) {
      return e;
    }
  }
  return {
    ...e,
    selectionSet: {
      ...e.selectionSet,
      selections: [ ...e.selectionSet.selections, {
        kind: r.FIELD,
        name: {
          kind: r.NAME,
          value: "__typename"
        }
      } ]
    }
  };
};

var I = new Map;

var formatDocument = r => {
  var a = t(r);
  var n = I.get(a.__key);
  if (!n) {
    n = e(a, {
      Field: formatNode,
      InlineFragment: formatNode
    });
    Object.defineProperty(n, "__key", {
      value: a.__key,
      enumerable: !1
    });
    I.set(a.__key, n);
  }
  return n;
};

var maskTypename = (e, r) => {
  if (!e || "object" != typeof e) {
    return e;
  } else if (Array.isArray(e)) {
    return e.map((e => maskTypename(e)));
  } else if (e && "object" == typeof e && (r || "__typename" in e)) {
    var t = {};
    for (var a in e) {
      if ("__typename" === a) {
        Object.defineProperty(t, "__typename", {
          enumerable: !1,
          value: e.__typename
        });
      } else {
        t[a] = maskTypename(e[a]);
      }
    }
    return t;
  } else {
    return e;
  }
};

function withPromise(e) {
  e.toPromise = () => new Promise((r => {
    var t = k((e => {
      if (!e.stale && !e.hasNext) {
        Promise.resolve().then((() => {
          t.unsubscribe();
          r(e);
        }));
      }
    }))(e);
  }));
  return e;
}

function makeOperation(e, r, t) {
  if (!t) {
    t = r.context;
  }
  return {
    key: r.key,
    query: r.query,
    variables: r.variables,
    kind: e,
    context: t
  };
}

var addMetadata = (e, r) => makeOperation(e.kind, e, {
  ...e.context,
  meta: {
    ...e.context.meta,
    ...r
  }
});

var noop = () => {};

var applyDefinitions = (e, t, a) => {
  for (var o of a) {
    if (o.kind === r.FRAGMENT_DEFINITION) {
      var i = o.name.value;
      var s = n(o);
      if (!e.has(i)) {
        e.set(i, s);
        t.push(o);
      } else if ("production" !== process.env.NODE_ENV && e.get(i) !== s) {
        console.warn("[WARNING: Duplicate Fragment] A fragment with name `" + i + "` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document.");
      }
    } else {
      t.push(o);
    }
  }
};

function gql() {
  var e = new Map;
  var a = [];
  var n = [];
  var o = Array.isArray(arguments[0]) ? arguments[0][0] : arguments[0] || "";
  for (var i = 1; i < arguments.length; i++) {
    var s = arguments[i];
    if (s && s.definitions) {
      n.push(...s.definitions);
    } else {
      o += s;
    }
    o += arguments[0][i];
  }
  applyDefinitions(e, a, t(o).definitions);
  applyDefinitions(e, a, n);
  return t({
    kind: r.DOCUMENT,
    definitions: a
  });
}

var shouldSkip = ({kind: e}) => "mutation" !== e && "query" !== e;

var cacheExchange = ({forward: e, client: r, dispatchDebug: t}) => {
  var a = new Map;
  var n = new Map;
  var mapTypeNames = e => {
    var r = makeOperation(e.kind, e);
    r.query = formatDocument(e.query);
    return r;
  };
  var isOperationCached = e => {
    var {key: r, kind: t, context: {requestPolicy: n}} = e;
    return "query" === t && "network-only" !== n && ("cache-only" === n || a.has(r));
  };
  return o => {
    var i = g(o);
    var s = x((e => {
      var n = a.get(e.key);
      "production" !== process.env.NODE_ENV && t({
        operation: e,
        ...n ? {
          type: "cacheHit",
          message: "The result was successfully retried from the cache"
        } : {
          type: "cacheMiss",
          message: "The result could not be retrieved from the cache"
        },
        source: "cacheExchange"
      });
      var o = {
        ...n,
        operation: addMetadata(e, {
          cacheOutcome: n ? "hit" : "miss"
        })
      };
      if ("cache-and-network" === e.context.requestPolicy) {
        o.stale = !0;
        reexecuteOperation(r, e);
      }
      return o;
    }))(w((e => !shouldSkip(e) && isOperationCached(e)))(i));
    var u = b((e => {
      var {operation: o} = e;
      if (!o) {
        return;
      }
      var i = (e => [ ...collectTypes(e, new Set) ])(e.data).concat(o.context.additionalTypenames || []);
      if ("mutation" === e.operation.kind) {
        var s = new Set;
        "production" !== process.env.NODE_ENV && t({
          type: "cacheInvalidation",
          message: `The following typenames have been invalidated: ${i}`,
          operation: o,
          data: {
            typenames: i,
            response: e
          },
          source: "cacheExchange"
        });
        for (var u = 0; u < i.length; u++) {
          var c = i[u];
          var p = n.get(c);
          if (!p) {
            n.set(c, p = new Set);
          }
          for (var v of p.values()) {
            s.add(v);
          }
          p.clear();
        }
        for (var d of s.values()) {
          if (a.has(d)) {
            o = a.get(d).operation;
            a.delete(d);
            reexecuteOperation(r, o);
          }
        }
      } else if ("query" === o.kind && e.data) {
        a.set(o.key, e);
        for (var l = 0; l < i.length; l++) {
          var f = i[l];
          var h = n.get(f);
          if (!h) {
            n.set(f, h = new Set);
          }
          h.add(o.key);
        }
      }
    }))(e(w((e => "query" !== e.kind || "cache-only" !== e.context.requestPolicy))(x((e => addMetadata(e, {
      cacheOutcome: "miss"
    })))(E([ x(mapTypeNames)(w((e => !shouldSkip(e) && !isOperationCached(e)))(i)), w((e => shouldSkip(e)))(i) ])))));
    return E([ s, u ]);
  };
};

var reexecuteOperation = (e, r) => e.reexecuteOperation(makeOperation(r.kind, r, {
  ...r.context,
  requestPolicy: "network-only"
}));

var F = new Set;

var ssrExchange = (e = {}) => {
  var r = !!e.staleWhileRevalidate;
  var t = !!e.includeExtensions;
  var a = {};
  var n = [];
  var invalidate = e => {
    n.push(e.operation.key);
    if (1 === n.length) {
      Promise.resolve().then((() => {
        var e;
        while (e = n.shift()) {
          a[e] = null;
        }
      }));
    }
  };
  var ssr = ({client: n, forward: i}) => s => {
    var u = e && "boolean" == typeof e.isClient ? !!e.isClient : !n.suspense;
    var c = g(s);
    var p = i(w((e => !a[e.key] || !!a[e.key].hasNext || "network-only" === e.context.requestPolicy))(c));
    var v = x((e => {
      var i = ((e, r, t) => ({
        operation: e,
        data: r.data ? JSON.parse(r.data) : void 0,
        extensions: t && r.extensions ? JSON.parse(r.extensions) : void 0,
        error: r.error ? new o({
          networkError: r.error.networkError ? new Error(r.error.networkError) : void 0,
          graphQLErrors: r.error.graphQLErrors
        }) : void 0,
        hasNext: r.hasNext
      }))(e, a[e.key], t);
      if (r && !F.has(e.key)) {
        i.stale = !0;
        F.add(e.key);
        reexecuteOperation(n, e);
      }
      return {
        ...i,
        operation: addMetadata(e, {
          cacheOutcome: "hit"
        })
      };
    }))(w((e => !!a[e.key] && "network-only" !== e.context.requestPolicy))(c));
    if (!u) {
      p = b((e => {
        var {operation: r} = e;
        if ("mutation" !== r.kind) {
          var n = (({hasNext: e, data: r, extensions: t, error: a}, n) => {
            var o = {};
            if (void 0 !== r) {
              o.data = JSON.stringify(r);
            }
            if (n && void 0 !== t) {
              o.extensions = JSON.stringify(t);
            }
            if (e) {
              o.hasNext = !0;
            }
            if (a) {
              o.error = {
                graphQLErrors: a.graphQLErrors.map((e => {
                  if (!e.path && !e.extensions) {
                    return e.message;
                  }
                  return {
                    message: e.message,
                    path: e.path,
                    extensions: e.extensions
                  };
                }))
              };
              if (a.networkError) {
                o.error.networkError = "" + a.networkError;
              }
            }
            return o;
          })(e, t);
          a[r.key] = n;
        }
      }))(p);
    } else {
      v = b(invalidate)(v);
    }
    return E([ p, v ]);
  };
  ssr.restoreData = e => {
    for (var r in e) {
      if (null !== a[r]) {
        a[r] = e[r];
      }
    }
  };
  ssr.extractData = () => {
    var e = {};
    for (var r in a) {
      if (null != a[r]) {
        e[r] = a[r];
      }
    }
    return e;
  };
  if (e && e.initialState) {
    ssr.restoreData(e.initialState);
  }
  return ssr;
};

var subscriptionExchange = ({forwardSubscription: e, enableAllOperations: r, isSubscriptionOperation: t}) => ({client: a, forward: o}) => {
  var i = t || (e => {
    var {kind: t} = e;
    return "subscription" === t || !!r && ("query" === t || "mutation" === t);
  });
  return r => {
    var t = g(r);
    var c = O((r => {
      var {key: o} = r;
      var i = w((e => "teardown" === e.kind && e.key === o))(t);
      return q(i)((r => {
        var t = e({
          key: r.key.toString(36),
          query: n(r.query),
          variables: r.variables,
          context: {
            ...r.context
          }
        });
        return N((({next: e, complete: n}) => {
          var o = !1;
          var i;
          Promise.resolve().then((() => {
            if (o) {
              return;
            }
            i = t.subscribe({
              next: t => e(s(r, t)),
              error: t => e(u(r, t)),
              complete: () => {
                if (!o) {
                  o = !0;
                  if ("subscription" === r.kind) {
                    a.reexecuteOperation(makeOperation("teardown", r, r.context));
                  }
                  n();
                }
              }
            });
          }));
          return () => {
            o = !0;
            if (i) {
              i.unsubscribe();
            }
          };
        }));
      })(r));
    }))(w(i)(t));
    var p = o(w((e => !i(e)))(t));
    return E([ c, p ]);
  };
};

var debugExchange = ({forward: e}) => {
  if ("production" === process.env.NODE_ENV) {
    return r => e(r);
  } else {
    return r => b((e => console.log("[Exchange debug]: Completed operation: ", e)))(e(b((e => console.log("[Exchange debug]: Incoming operation: ", e)))(r)));
  }
};

var dedupExchange = ({forward: e, dispatchDebug: r}) => {
  var t = new Set;
  var filterIncomingOperation = e => {
    var {key: a, kind: n} = e;
    if ("teardown" === n || "mutation" === n) {
      t.delete(a);
      return !0;
    }
    var o = t.has(a);
    t.add(a);
    if (o) {
      "production" !== process.env.NODE_ENV && r({
        type: "dedup",
        message: "An operation has been deduped.",
        operation: e,
        source: "dedupExchange"
      });
    }
    return !o;
  };
  var afterOperationResult = ({operation: e, hasNext: r}) => {
    if (!r) {
      t.delete(e.key);
    }
  };
  return r => {
    var t = w(filterIncomingOperation)(r);
    return b(afterOperationResult)(e(t));
  };
};

var fetchExchange = ({forward: e, dispatchDebug: r}) => t => {
  var a = g(t);
  var n = O((e => {
    var {key: t} = e;
    var n = c(e);
    var o = p(e, n);
    var i = v(e, n);
    "production" !== process.env.NODE_ENV && r({
      type: "fetchRequest",
      message: "A fetch request is being executed.",
      operation: e,
      data: {
        url: o,
        fetchOptions: i
      },
      source: "fetchExchange"
    });
    var s = q(w((e => "teardown" === e.kind && e.key === t))(a))(d(e, o, i));
    if ("production" !== process.env.NODE_ENV) {
      return _((t => {
        var a = !t.data ? t.error : void 0;
        "production" !== process.env.NODE_ENV && r({
          type: a ? "fetchError" : "fetchSuccess",
          message: `A ${a ? "failed" : "successful"} fetch response has been returned.`,
          operation: e,
          data: {
            url: o,
            fetchOptions: i,
            value: a || t
          },
          source: "fetchExchange"
        });
      }))(s);
    }
    return s;
  }))(w((e => "query" === e.kind || "mutation" === e.kind))(a));
  var o = e(w((e => "query" !== e.kind && "mutation" !== e.kind))(a));
  return E([ n, o ]);
};

var fallbackExchange = ({dispatchDebug: e}) => r => w((() => !1))(b((r => {
  if ("teardown" !== r.kind && "production" !== process.env.NODE_ENV) {
    var t = `No exchange has handled operations of kind "${r.kind}". Check whether you've added an exchange responsible for these operations.`;
    "production" !== process.env.NODE_ENV && e({
      type: "fallbackCatch",
      message: t,
      operation: r,
      source: "fallbackExchange"
    });
    console.warn(t);
  }
}))(r));

var Q = fallbackExchange({
  dispatchDebug: noop
});

var composeExchanges = e => ({client: r, forward: t, dispatchDebug: a}) => e.reduceRight(((e, t) => t({
  client: r,
  forward: e,
  dispatchDebug(e) {
    "production" !== process.env.NODE_ENV && a({
      timestamp: Date.now(),
      source: t.name,
      ...e
    });
  }
})), t);

var mapExchange = ({onOperation: e, onResult: r, onError: t}) => ({forward: a}) => n => O((e => {
  if (t && e.error) {
    t(e.error, e.operation);
  }
  var a = r && r(e) || e;
  return "then" in a ? D(a) : P(a);
}))(a(O((r => {
  var t = e && e(r) || r;
  return "then" in t ? D(t) : P(t);
}))(n)));

var L = [ dedupExchange, cacheExchange, fetchExchange ];

var $ = function Client(e) {
  if ("production" !== process.env.NODE_ENV && !e.url) {
    throw new Error("You are creating an urql-client without a url.");
  }
  var r = 0;
  var t = new Map;
  var a = new Map;
  var n = [];
  var o = {
    url: e.url,
    fetchOptions: e.fetchOptions,
    fetch: e.fetch,
    preferGetMethod: !!e.preferGetMethod,
    requestPolicy: e.requestPolicy || "cache-first"
  };
  var {source: i, next: s} = S();
  var u = !1;
  function dispatchOperation(e) {
    if (e) {
      s(e);
    }
    if (!u) {
      u = !0;
      while (u && (e = n.shift())) {
        s(e);
      }
      u = !1;
    }
  }
  var makeResultSource = r => {
    var o = w((e => e.operation.kind === r.kind && e.operation.key === r.key && (!e.operation.context._instance || e.operation.context._instance === r.context._instance)))(m);
    if (e.maskTypename) {
      o = x((e => ({
        ...e,
        data: maskTypename(e.data, !0)
      })))(o);
    }
    if ("mutation" === r.kind) {
      return M(1)(V((() => s(r)))(o));
    }
    return g(R((() => {
      t.delete(r.key);
      a.delete(r.key);
      for (var e = n.length - 1; e >= 0; e--) {
        if (n[e].key === r.key) {
          n.splice(e, 1);
        }
      }
      s(makeOperation("teardown", r, r.context));
    }))(_((e => {
      t.set(r.key, e);
    }))(T((e => {
      if ("query" !== r.kind || e.stale) {
        return P(e);
      }
      return E([ P(e), x((() => ({
        ...e,
        stale: !0
      })))(M(1)(w((e => "query" === e.kind && e.key === r.key && "cache-only" !== e.context.requestPolicy))(i))) ]);
    }))(q(w((e => "teardown" === e.kind && e.key === r.key))(i))(o)))));
  };
  var c = this instanceof Client ? this : Object.create(Client.prototype);
  var p = Object.assign(c, {
    suspense: !!e.suspense,
    operations$: i,
    reexecuteOperation(e) {
      if ("mutation" === e.kind || a.has(e.key)) {
        n.push(e);
        Promise.resolve().then(dispatchOperation);
      }
    },
    createRequestOperation(e, t, a) {
      if (!a) {
        a = {};
      }
      var n = l(t.query);
      if ("production" !== process.env.NODE_ENV && "teardown" !== e && n !== e) {
        throw new Error(`Expected operation of type "${e}" but found "${n}"`);
      }
      return makeOperation(e, t, {
        _instance: "mutation" === e ? r = r + 1 | 0 : void 0,
        ...o,
        ...a,
        requestPolicy: a.requestPolicy || o.requestPolicy,
        suspense: a.suspense || !1 !== a.suspense && p.suspense
      });
    },
    executeRequestOperation(e) {
      if ("mutation" === e.kind) {
        return makeResultSource(e);
      }
      return N((r => {
        var n = a.get(e.key);
        if (!n) {
          a.set(e.key, n = makeResultSource(e));
        }
        var o = "cache-and-network" === e.context.requestPolicy || "network-only" === e.context.requestPolicy;
        return k(r.next)(R((() => {
          u = !1;
          r.complete();
        }))(V((() => {
          var a = t.get(e.key);
          if ("subscription" === e.kind) {
            return dispatchOperation(e);
          } else if (o) {
            dispatchOperation(e);
          }
          if (null != a && a === t.get(e.key)) {
            r.next(o ? {
              ...a,
              stale: !0
            } : a);
          } else if (!o) {
            dispatchOperation(e);
          }
        }))(n))).unsubscribe;
      }));
    },
    executeQuery(e, r) {
      var t = p.createRequestOperation("query", e, r);
      return p.executeRequestOperation(t);
    },
    executeSubscription(e, r) {
      var t = p.createRequestOperation("subscription", e, r);
      return p.executeRequestOperation(t);
    },
    executeMutation(e, r) {
      var t = p.createRequestOperation("mutation", e, r);
      return p.executeRequestOperation(t);
    },
    query(e, r, t) {
      if (!t || "boolean" != typeof t.suspense) {
        t = {
          ...t,
          suspense: !1
        };
      }
      return withPromise(p.executeQuery(y(e, r), t));
    },
    readQuery(e, r, t) {
      var a = null;
      k((e => {
        a = e;
      }))(p.query(e, r, t)).unsubscribe();
      return a;
    },
    subscription: (e, r, t) => p.executeSubscription(y(e, r), t),
    mutation: (e, r, t) => withPromise(p.executeMutation(y(e, r), t))
  });
  var v = noop;
  if ("production" !== process.env.NODE_ENV) {
    var {next: d, source: f} = S();
    p.subscribeToDebugTarget = e => k(e)(f);
    v = d;
  }
  var h = composeExchanges(void 0 !== e.exchanges ? e.exchanges : L);
  var m = g(h({
    client: p,
    dispatchDebug: v,
    forward: fallbackExchange({
      dispatchDebug: v
    })
  })(i));
  A(m);
  return p;
};

var G = $;

export { $ as Client, cacheExchange, composeExchanges, G as createClient, debugExchange, dedupExchange, L as defaultExchanges, mapExchange as errorExchange, Q as fallbackExchangeIO, fetchExchange, formatDocument, gql, makeOperation, mapExchange, maskTypename, ssrExchange, subscriptionExchange };
//# sourceMappingURL=urql-core.mjs.map
