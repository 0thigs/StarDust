import { GraphQLError as r, Kind as e, print as t, parse as a } from "graphql";

import { make as n } from "wonka";

var rehydrateGraphQlError = e => {
  if ("string" == typeof e) {
    return new r(e);
  } else if ("object" == typeof e && e.message) {
    return new r(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {});
  } else {
    return e;
  }
};

class CombinedError extends Error {
  constructor(r) {
    var e = (r.graphQLErrors || []).map(rehydrateGraphQlError);
    var t = ((r, e) => {
      var t = "";
      if (r) {
        return `[Network] ${r.message}`;
      }
      if (e) {
        for (var a of e) {
          if (t) {
            t += "\n";
          }
          t += `[GraphQL] ${a.message}`;
        }
      }
      return t;
    })(r.networkError, e);
    super(t);
    this.name = "CombinedError";
    this.message = t;
    this.graphQLErrors = e;
    this.networkError = r.networkError;
    this.response = r.response;
  }
  toString() {
    return this.message;
  }
}

var phash = (r, e) => {
  var t = "number" == typeof e ? 0 | e : 5381;
  for (var a = 0, n = 0 | r.length; a < n; a++) {
    t = (t << 5) + t + r.charCodeAt(a);
  }
  return t;
};

var o = new Set;

var i = new WeakMap;

var stringify = r => {
  if (null === r || o.has(r)) {
    return "null";
  } else if ("object" != typeof r) {
    return JSON.stringify(r) || "";
  } else if (r.toJSON) {
    return stringify(r.toJSON());
  } else if (Array.isArray(r)) {
    var e = "[";
    for (var t of r) {
      if ("[" !== e) {
        e += ",";
      }
      e += (t = stringify(t)).length > 0 ? t : "null";
    }
    return e += "]";
  }
  var a = Object.keys(r).sort();
  if (!a.length && r.constructor && r.constructor !== Object) {
    var n = i.get(r) || Math.random().toString(36).slice(2);
    i.set(r, n);
    return `{"__key":"${n}"}`;
  }
  o.add(r);
  var s = "{";
  for (var f of a) {
    var v = stringify(r[f]);
    if (v) {
      if (s.length > 1) {
        s += ",";
      }
      s += stringify(f) + ":" + v;
    }
  }
  o.delete(r);
  return s += "}";
};

var stringifyVariables = r => {
  o.clear();
  return stringify(r);
};

var s = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;

var f = /(#[^\n\r]+)?(?:\n|\r\n?|$)+/g;

var replaceOutsideStrings = (r, e) => e % 2 == 0 ? r.replace(f, "\n") : r;

var sanitizeDocument = r => r.split(s).map(replaceOutsideStrings).join("").trim();

var v = new Map;

var l = new Map;

var stringifyDocument = r => {
  var e;
  if ("string" == typeof r) {
    e = sanitizeDocument(r);
  } else if (r.loc && l.get(r.__key) === r) {
    e = r.loc.source.body;
  } else {
    e = v.get(r) || sanitizeDocument(t(r));
    v.set(r, e);
  }
  if ("string" != typeof r && !r.loc) {
    r.loc = {
      start: 0,
      end: e.length,
      source: {
        body: e,
        name: "gql",
        locationOffset: {
          line: 1,
          column: 1
        }
      }
    };
  }
  return e;
};

var hashDocument = r => {
  var e = phash(stringifyDocument(r));
  if ("object" == typeof r && "definitions" in r) {
    var t = getOperationName(r);
    if (t) {
      e = phash(`\n# ${t}`, e);
    }
  }
  return e;
};

var keyDocument = r => {
  var e;
  var t;
  if ("string" == typeof r) {
    e = hashDocument(r);
    t = l.get(e) || a(r, {
      noLocation: !0
    });
  } else {
    e = r.__key || hashDocument(r);
    t = l.get(e) || r;
  }
  if (!t.loc) {
    stringifyDocument(t);
  }
  t.__key = e;
  l.set(e, t);
  return t;
};

var createRequest = (r, e) => {
  if (!e) {
    e = {};
  }
  var t = keyDocument(r);
  var a = stringifyVariables(e);
  var n = t.__key;
  if ("{}" !== a) {
    n = phash(a, n);
  }
  return {
    key: n,
    query: t,
    variables: e
  };
};

var getOperationName = r => {
  for (var t of r.definitions) {
    if (t.kind === e.OPERATION_DEFINITION && t.name) {
      return t.name.value;
    }
  }
};

var getOperationType = r => {
  for (var t of r.definitions) {
    if (t.kind === e.OPERATION_DEFINITION) {
      return t.operation;
    }
  }
};

var makeResult = (r, e, t) => {
  if (!("data" in e) && !("errors" in e) || "path" in e) {
    throw new Error("No Content");
  }
  return {
    operation: r,
    data: e.data,
    error: Array.isArray(e.errors) ? new CombinedError({
      graphQLErrors: e.errors,
      response: t
    }) : void 0,
    extensions: "object" == typeof e.extensions && e.extensions || void 0,
    hasNext: !!e.hasNext
  };
};

var mergeResultPatch = (r, e, t) => {
  var a = {
    ...r
  };
  a.hasNext = !!e.hasNext;
  if (!("path" in e)) {
    if ("data" in e) {
      a.data = e.data;
    }
    return a;
  }
  if (Array.isArray(e.errors)) {
    a.error = new CombinedError({
      graphQLErrors: a.error ? [ ...a.error.graphQLErrors, ...e.errors ] : e.errors,
      response: t
    });
  }
  var n = a.data = {
    ...a.data
  };
  var o = 0;
  var i;
  while (o < e.path.length) {
    n = n[i = e.path[o++]] = Array.isArray(n[i]) ? [ ...n[i] ] : {
      ...n[i]
    };
  }
  Object.assign(n, e.data);
  return a;
};

var makeErrorResult = (r, e, t) => ({
  operation: r,
  data: void 0,
  error: new CombinedError({
    networkError: e,
    response: t
  }),
  extensions: void 0
});

function makeFetchBody(r) {
  return {
    query: stringifyDocument(r.query),
    operationName: getOperationName(r.query),
    variables: r.variables || void 0,
    extensions: void 0
  };
}

var makeFetchURL = (r, e) => {
  var t = "query" === r.kind && r.context.preferGetMethod;
  if (!t || !e) {
    return r.context.url;
  }
  var a = new URL(r.context.url);
  var n = a.searchParams;
  if (e.operationName) {
    n.set("operationName", e.operationName);
  }
  if (e.query) {
    n.set("query", e.query);
  }
  if (e.variables) {
    n.set("variables", stringifyVariables(e.variables));
  }
  if (e.extensions) {
    n.set("extensions", stringifyVariables(e.extensions));
  }
  var o = a.toString();
  if (o.length > 2047 && "force" !== t) {
    r.context.preferGetMethod = !1;
    return r.context.url;
  }
  return o;
};

var makeFetchOptions = (r, e) => {
  var t = "query" === r.kind && !!r.context.preferGetMethod;
  var a = {
    accept: "application/graphql+json, application/json"
  };
  if (!t) {
    a["content-type"] = "application/json";
  }
  var n = ("function" == typeof r.context.fetchOptions ? r.context.fetchOptions() : r.context.fetchOptions) || {};
  if (n.headers) {
    for (var o in n.headers) {
      a[o.toLowerCase()] = n.headers[o];
    }
  }
  return {
    ...n,
    body: !t && e ? JSON.stringify(e) : void 0,
    method: t ? "GET" : "POST",
    headers: a
  };
};

var u = "undefined" != typeof TextDecoder ? new TextDecoder : null;

var c = /content-type:[^\r\n]*application\/json/i;

var d = /boundary="?([^=";]+)"?/i;

var makeFetchSource = (r, e, t) => {
  var a = "manual" === t.redirect ? 400 : 300;
  var o = r.context.fetch;
  return n((({next: n, complete: i}) => {
    var s = "undefined" != typeof AbortController ? new AbortController : null;
    if (s) {
      t.signal = s.signal;
    }
    var f = !1;
    var executeIncrementalFetch = (r, e, t) => {
      var a = t.headers && t.headers.get("Content-Type") || "";
      if (/text\//i.test(a)) {
        return t.text().then((a => {
          r(makeErrorResult(e, new Error(a), t));
        }));
      } else if (!/multipart\/mixed/i.test(a)) {
        return t.text().then((a => {
          r(makeResult(e, JSON.parse(a), t));
        }));
      }
      var n = "---";
      var o = a.match(d);
      if (o) {
        n = "--" + o[1];
      }
      var i;
      var cancel = () => {};
      if (t[Symbol.asyncIterator]) {
        var s = t[Symbol.asyncIterator]();
        i = s.next.bind(s);
      } else if ("body" in t && t.body) {
        var v = t.body.getReader();
        cancel = () => v.cancel();
        i = () => v.read();
      } else {
        throw new TypeError("Streaming requests unsupported");
      }
      var l = "";
      var p = !0;
      var h = null;
      var y = null;
      return i().then((function next(a) {
        if (!a.done) {
          var o = "Buffer" === (w = a.value).constructor.name ? w.toString() : u.decode(w);
          var s = o.indexOf(n);
          if (s > -1) {
            s += l.length;
          } else {
            s = l.indexOf(n);
          }
          l += o;
          while (s > -1) {
            var v = l.slice(0, s);
            var d = l.slice(s + n.length);
            if (p) {
              p = !1;
            } else {
              var g = v.indexOf("\r\n\r\n") + 4;
              var m = v.slice(0, g);
              var x = v.slice(g, v.lastIndexOf("\r\n"));
              var b = void 0;
              if (c.test(m)) {
                try {
                  b = JSON.parse(x);
                  h = y = y ? mergeResultPatch(y, b, t) : makeResult(e, b, t);
                } catch (r) {}
              }
              if ("--" === d.slice(0, 2) || b && !b.hasNext) {
                if (!y) {
                  return r(makeResult(e, {}, t));
                }
                break;
              }
            }
            s = (l = d).indexOf(n);
          }
        } else {
          f = !0;
        }
        var w;
        if (h) {
          r(h);
          h = null;
        }
        if (!a.done && (!y || y.hasNext)) {
          return i().then(next);
        }
      })).finally(cancel);
    };
    var v = !1;
    var l = !1;
    var p;
    Promise.resolve().then((() => {
      if (v) {
        return;
      }
      return (o || fetch)(e, t);
    })).then((e => {
      if (!e) {
        return;
      }
      l = (p = e).status < 200 || p.status >= a;
      return executeIncrementalFetch(n, r, p);
    })).then(i).catch((e => {
      if (f) {
        throw e;
      }
      var t = makeErrorResult(r, l ? p.statusText ? new Error(p.statusText) : e : e, p);
      n(t);
      i();
    }));
    return () => {
      v = !0;
      if (s) {
        s.abort();
      }
    };
  }));
};

export { CombinedError as C, makeErrorResult as a, makeFetchBody as b, makeFetchURL as c, makeFetchOptions as d, makeFetchSource as e, createRequest as f, getOperationType as g, stringifyVariables as h, mergeResultPatch as i, getOperationName as j, keyDocument as k, makeResult as m, stringifyDocument as s };
//# sourceMappingURL=d275b28e.mjs.map
