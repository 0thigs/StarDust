{"version":3,"sources":["PointerEventManager.ts"],"names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","offsetX","offsetY","time","timeStamp"],"mappings":"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","sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n}\n"]}