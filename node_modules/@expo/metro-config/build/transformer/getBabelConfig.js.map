{"version":3,"file":"getBabelConfig.js","names":["getBabelRC","babelRC","_getBabelRC","projectRoot","options","plugins","projectBabelRCPath","path","resolve","fs","existsSync","extends","experimentalImportSupport","presetOptions","presetPath","resolveFrom","silent","require","presets","jsxRuntime","disableImportExportTransform","enableBabelRuntime","getBabelConfig","filename","extraConfig","babelrc","enableBabelRCLookup","code","highlightCode","config","extraPlugins","inlineRequires","inlineRequiresPlugin","push","concat","dev","hot","mayContainEditableReactComponents","indexOf"],"sources":["../../src/transformer/getBabelConfig.ts"],"sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Forks the default metro-react-native-babel-transformer and adds support for known transforms.\n */\n\nimport type { PluginItem as BabelPlugins, PluginItem } from '@babel/core';\nimport fs from 'fs';\nimport type { BabelTransformerOptions } from 'metro-babel-transformer';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\n/**\n * Return a memoized function that checks for the existence of a\n * project level .babelrc file, and if it doesn't exist, reads the\n * default RN babelrc file and uses that.\n */\nconst getBabelRC = (function () {\n  let babelRC: {\n    // `any` to avoid flow type mismatch with Babel 7's internal type of\n    // `Array<string>` even though it correctly accepts the usage below.\n    presets?: any;\n    extends?: string;\n    plugins: BabelPlugins;\n  } | null = null;\n\n  return function _getBabelRC(projectRoot: string, options: BabelTransformerOptions) {\n    if (babelRC != null) {\n      return babelRC;\n    }\n\n    babelRC = { plugins: [] };\n\n    // Let's look for a babel config file in the project root.\n    // TODO look into adding a command line option to specify this location\n    let projectBabelRCPath;\n\n    // .babelrc\n    if (projectRoot) {\n      projectBabelRCPath = path.resolve(projectRoot, '.babelrc');\n    }\n\n    if (projectBabelRCPath) {\n      // .babelrc.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, '.babelrc.js');\n      }\n\n      // babel.config.js\n      if (!fs.existsSync(projectBabelRCPath)) {\n        projectBabelRCPath = path.resolve(projectRoot, 'babel.config.js');\n      }\n\n      // If we found a babel config file, extend our config off of it\n      // otherwise the default config will be used\n      if (fs.existsSync(projectBabelRCPath)) {\n        babelRC.extends = projectBabelRCPath;\n      }\n    }\n\n    // If a babel config file doesn't exist in the project then\n    // the default preset for react-native will be used instead.\n    if (!babelRC.extends) {\n      const { experimentalImportSupport, ...presetOptions } = options;\n\n      // Use `babel-preset-expo` instead of `metro-react-native-babel-preset`.\n      const presetPath =\n        resolveFrom.silent(projectRoot, 'babel-preset-expo') ??\n        resolveFrom.silent(projectRoot, 'metro-react-native-babel-preset') ??\n        require.resolve('babel-preset-expo');\n\n      babelRC.presets = [\n        [\n          require(presetPath),\n          {\n            // Default to React 17 automatic JSX transform.\n            jsxRuntime: 'automatic',\n            ...presetOptions,\n            disableImportExportTransform: experimentalImportSupport,\n            enableBabelRuntime: options.enableBabelRuntime,\n          },\n        ],\n      ];\n    }\n\n    return babelRC;\n  };\n})();\n\n/**\n * Given a filename and options, build a Babel\n * config object with the appropriate plugins.\n */\nexport function getBabelConfig(\n  filename: string,\n  options: BabelTransformerOptions,\n  plugins: BabelPlugins = []\n) {\n  const babelRC = getBabelRC(options.projectRoot, options);\n\n  const extraConfig = {\n    babelrc: typeof options.enableBabelRCLookup === 'boolean' ? options.enableBabelRCLookup : true,\n    code: false,\n    filename,\n    highlightCode: true,\n  };\n\n  const config: any = { ...babelRC, ...extraConfig };\n\n  // Add extra plugins\n  const extraPlugins: (string | PluginItem)[] = [];\n\n  // TODO: This probably can be removed\n  if (options.inlineRequires) {\n    const inlineRequiresPlugin = resolveFrom(\n      options.projectRoot,\n      'babel-preset-fbjs/plugins/inline-requires'\n    );\n    extraPlugins.push(inlineRequiresPlugin);\n  }\n\n  config.plugins = extraPlugins.concat(config.plugins, plugins);\n\n  if (options.dev && options.hot) {\n    // Note: this intentionally doesn't include the path separator because\n    // I'm not sure which one it should use on Windows, and false positives\n    // are unlikely anyway. If you later decide to include the separator,\n    // don't forget that the string usually *starts* with \"node_modules\" so\n    // the first one often won't be there.\n    // TODO: Support monorepos\n    const mayContainEditableReactComponents = filename.indexOf('node_modules') === -1;\n\n    if (mayContainEditableReactComponents) {\n      if (!config.plugins) {\n        config.plugins = [];\n      }\n      // Add react refresh runtime.\n      // NOTICE: keep in sync with 'metro-react-native-babel-preset/src/configs/hmr'.\n      config.plugins.push(resolveFrom.silent(options.projectRoot, 'react-refresh/babel'));\n    }\n  }\n\n  return { ...babelRC, ...config };\n}\n"],"mappings":"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"}