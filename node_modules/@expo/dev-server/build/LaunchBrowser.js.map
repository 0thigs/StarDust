{"version":3,"file":"LaunchBrowser.js","names":["IS_WSL","require","launchBrowserAsync","url","browser","createBrowser","tempBrowserDir","createTempBrowserDir","launchArgs","browserType","LaunchBrowserTypes","CHROME","EDGE","isSupported","isSupportedBrowser","launchAsync","Error","os","platform","LaunchBrowserImplMacOS","LaunchBrowserImplWindows","LaunchBrowserImplLinux"],"sources":["../src/LaunchBrowser.ts"],"sourcesContent":["import os from 'os';\n\nimport { LaunchBrowserTypes, type LaunchBrowserInstance } from './LaunchBrowser.types';\nimport LaunchBrowserImplLinux from './LaunchBrowserImplLinux';\nimport LaunchBrowserImplMacOS from './LaunchBrowserImplMacOS';\nimport LaunchBrowserImplWindows from './LaunchBrowserImplWindows';\n\nexport type { LaunchBrowserInstance };\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Launch a browser for JavaScript inspector\n */\nexport async function launchBrowserAsync(url: string): Promise<LaunchBrowserInstance> {\n  const browser = createBrowser();\n  const tempBrowserDir = await browser.createTempBrowserDir('expo-inspector');\n\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempBrowserDir}`,\n    '--no-first-run',\n    '--no-default-browser-check',\n  ];\n\n  for (const browserType of [LaunchBrowserTypes.CHROME, LaunchBrowserTypes.EDGE]) {\n    const isSupported = await browser.isSupportedBrowser(browserType);\n    if (isSupported) {\n      return browser.launchAsync(browserType, launchArgs);\n    }\n  }\n\n  throw new Error(\n    '[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nfunction createBrowser() {\n  if (os.platform() === 'darwin') {\n    return new LaunchBrowserImplMacOS();\n  }\n  if (os.platform() === 'win32' || IS_WSL) {\n    return new LaunchBrowserImplWindows();\n  }\n  if (os.platform() === 'linux') {\n    return new LaunchBrowserImplLinux();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAIA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,IAAqB,CAACA,OAAO,CAAC,WAAD,CAAP,EAArC;AAEA;AACA;AACA;;AACO,eAAeC,kBAAf,CAAkCC,GAAlC,EAA+E;EACpF,MAAMC,OAAO,GAAGC,aAAa,EAA7B;EACA,MAAMC,cAAc,GAAG,MAAMF,OAAO,CAACG,oBAAR,CAA6B,gBAA7B,CAA7B,CAFoF,CAIpF;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMC,UAAU,GAAG,CAChB,SAAQL,GAAI,EADI,EAEjB,kCAFiB,EAGhB,mBAAkBG,cAAe,EAHjB,EAIjB,gBAJiB,EAKjB,4BALiB,CAAnB;;EAQA,KAAK,MAAMG,WAAX,IAA0B,CAACC,mCAAA,CAAmBC,MAApB,EAA4BD,mCAAA,CAAmBE,IAA/C,CAA1B,EAAgF;IAC9E,MAAMC,WAAW,GAAG,MAAMT,OAAO,CAACU,kBAAR,CAA2BL,WAA3B,CAA1B;;IACA,IAAII,WAAJ,EAAiB;MACf,OAAOT,OAAO,CAACW,WAAR,CAAoBN,WAApB,EAAiCD,UAAjC,CAAP;IACD;EACF;;EAED,MAAM,IAAIQ,KAAJ,CACJ,+HADI,CAAN;AAGD;;AAED,SAASX,aAAT,GAAyB;EACvB,IAAIY,aAAA,CAAGC,QAAH,OAAkB,QAAtB,EAAgC;IAC9B,OAAO,KAAIC,iCAAJ,GAAP;EACD;;EACD,IAAIF,aAAA,CAAGC,QAAH,OAAkB,OAAlB,IAA6BlB,MAAjC,EAAyC;IACvC,OAAO,KAAIoB,mCAAJ,GAAP;EACD;;EACD,IAAIH,aAAA,CAAGC,QAAH,OAAkB,OAAtB,EAA+B;IAC7B,OAAO,KAAIG,iCAAJ,GAAP;EACD;;EACD,MAAM,IAAIL,KAAJ,CAAU,2CAAV,CAAN;AACD"}