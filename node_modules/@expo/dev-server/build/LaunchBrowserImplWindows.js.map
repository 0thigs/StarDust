{"version":3,"file":"LaunchBrowserImplWindows.js","names":["IS_WSL","require","LaunchBrowserImplWindows","LaunchBrowserTypes","CHROME","appId","fullName","EDGE","isSupportedBrowser","browserType","result","status","spawnAsync","MAP","stdio","createTempBrowserDir","baseDirName","tmpDir","stdout","trim","path","join","launchAsync","args","open","openApp","arguments","_appId","close","undefined"],"sources":["../src/LaunchBrowserImplWindows.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport open from 'open';\nimport path from 'path';\n\nimport {\n  LaunchBrowserTypes,\n  type LaunchBrowserImpl,\n  type LaunchBrowserInstance,\n} from './LaunchBrowser.types';\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Browser implementation for Windows and WSL\n *\n * To minimize the difference between Windows and WSL, the implementation wraps all spawn calls through powershell.\n */\nexport default class LaunchBrowserImplWindows implements LaunchBrowserImpl, LaunchBrowserInstance {\n  private _appId: string | undefined;\n\n  MAP = {\n    [LaunchBrowserTypes.CHROME]: {\n      appId: 'chrome',\n      fullName: 'Google Chrome',\n    },\n    [LaunchBrowserTypes.EDGE]: {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge',\n    },\n  };\n\n  async isSupportedBrowser(browserType: LaunchBrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      const { status } = await spawnAsync(\n        'powershell.exe',\n        ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`],\n        { stdio: 'ignore' }\n      );\n      result = status === 0;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async createTempBrowserDir(baseDirName: string) {\n    let tmpDir;\n    if (IS_WSL) {\n      // On WSL, the browser is actually launched in host, the `temp-dir` returns the linux /tmp path where host browsers cannot reach into.\n      // We should get the temp path through the `$TEMP` windows environment variable.\n      tmpDir = (await spawnAsync('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n      return `${tmpDir}\\\\${baseDirName}`;\n    } else {\n      tmpDir = require('temp-dir');\n      return path.join(tmpDir, baseDirName);\n    }\n  }\n\n  async launchAsync(\n    browserType: LaunchBrowserTypes,\n    args: string[]\n  ): Promise<LaunchBrowserInstance> {\n    const appId = this.MAP[browserType].appId;\n    await open.openApp(appId, { arguments: args });\n    this._appId = appId;\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._appId != null) {\n      try {\n        // Since we wrap all spawn calls through powershell as well as from `open.openApp`, the returned ChildProcess is not the browser process.\n        // And we cannot just call `process.kill()` kill it.\n        // The implementation tries to find the pid of target chromium browser process (with --app=https://chrome-devtools-frontend.appspot.com in command arguments),\n        // and uses taskkill to terminate the process.\n        await spawnAsync(\n          'powershell.exe',\n          [\n            '-c',\n            `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`,\n          ],\n          { stdio: 'ignore' }\n        );\n      } catch {}\n      this._appId = undefined;\n    }\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;;;AAMA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,IAAqB,CAACA,OAAO,CAAC,WAAD,CAAP,EAArC;AAEA;AACA;AACA;AACA;AACA;;AACe,MAAMC,wBAAN,CAAmF;EAAA;IAAA;;IAAA,6BAG1F;MACJ,CAACC,mCAAA,CAAmBC,MAApB,GAA6B;QAC3BC,KAAK,EAAE,QADoB;QAE3BC,QAAQ,EAAE;MAFiB,CADzB;MAKJ,CAACH,mCAAA,CAAmBI,IAApB,GAA2B;QACzBF,KAAK,EAAE,QADkB;QAEzBC,QAAQ,EAAE;MAFe;IALvB,CAH0F;EAAA;;EAcxE,MAAlBE,kBAAkB,CAACC,WAAD,EAAoD;IAC1E,IAAIC,MAAM,GAAG,KAAb;;IACA,IAAI;MACF,MAAM;QAAEC;MAAF,IAAa,MAAM,IAAAC,qBAAA,EACvB,gBADuB,EAEvB,CAAC,IAAD,EAAQ,sBAAqB,KAAKC,GAAL,CAASJ,WAAT,EAAsBH,QAAS,GAA5D,CAFuB,EAGvB;QAAEQ,KAAK,EAAE;MAAT,CAHuB,CAAzB;MAKAJ,MAAM,GAAGC,MAAM,KAAK,CAApB;IACD,CAPD,CAOE,MAAM;MACND,MAAM,GAAG,KAAT;IACD;;IACD,OAAOA,MAAP;EACD;;EAEyB,MAApBK,oBAAoB,CAACC,WAAD,EAAsB;IAC9C,IAAIC,MAAJ;;IACA,IAAIjB,MAAJ,EAAY;MACV;MACA;MACAiB,MAAM,GAAG,CAAC,MAAM,IAAAL,qBAAA,EAAW,gBAAX,EAA6B,CAAC,IAAD,EAAO,kBAAP,CAA7B,CAAP,EAAiEM,MAAjE,CAAwEC,IAAxE,EAAT;MACA,OAAQ,GAAEF,MAAO,KAAID,WAAY,EAAjC;IACD,CALD,MAKO;MACLC,MAAM,GAAGhB,OAAO,CAAC,UAAD,CAAhB;MACA,OAAOmB,eAAA,CAAKC,IAAL,CAAUJ,MAAV,EAAkBD,WAAlB,CAAP;IACD;EACF;;EAEgB,MAAXM,WAAW,CACfb,WADe,EAEfc,IAFe,EAGiB;IAChC,MAAMlB,KAAK,GAAG,KAAKQ,GAAL,CAASJ,WAAT,EAAsBJ,KAApC;IACA,MAAMmB,eAAA,CAAKC,OAAL,CAAapB,KAAb,EAAoB;MAAEqB,SAAS,EAAEH;IAAb,CAApB,CAAN;IACA,KAAKI,MAAL,GAActB,KAAd;IACA,OAAO,IAAP;EACD;;EAEU,MAALuB,KAAK,GAAkB;IAC3B,IAAI,KAAKD,MAAL,IAAe,IAAnB,EAAyB;MACvB,IAAI;QACF;QACA;QACA;QACA;QACA,MAAM,IAAAf,qBAAA,EACJ,gBADI,EAEJ,CACE,IADF,EAEG,oEAAmE,KAAKe,MAAO,iHAFlF,CAFI,EAMJ;UAAEb,KAAK,EAAE;QAAT,CANI,CAAN;MAQD,CAbD,CAaE,MAAM,CAAE;;MACV,KAAKa,MAAL,GAAcE,SAAd;IACD;EACF;;AAtE+F"}