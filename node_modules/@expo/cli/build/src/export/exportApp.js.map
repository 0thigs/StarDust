{"version":3,"sources":["../../../src/export/exportApp.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { importCliSaveAssetsFromProject } from '../start/server/metro/resolveFromProject';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { copyAsync, ensureDirectoryAsync } from '../utils/dir';\nimport { env } from '../utils/env';\nimport { createBundlesAsync } from './createBundles';\nimport { exportAssetsAsync } from './exportAssets';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { printBundleSizes } from './printBundleSizes';\nimport { Options } from './resolveOptions';\nimport {\n  writeAssetMapAsync,\n  writeBundlesAsync,\n  writeDebugHtmlAsync,\n  writeMetadataJsonAsync,\n  writeSourceMapsAsync,\n} from './writeContents';\n\n/**\n * The structure of the outputDir will be:\n *\n * ```\n * ├── assets\n * │   └── *\n * ├── bundles\n * │   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n * │   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * └── metadata.json\n * ```\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    dumpSourcemap,\n  }: Pick<Options, 'dumpAssetmap' | 'dumpSourcemap' | 'dev' | 'clear' | 'outputDir' | 'platforms'>\n): Promise<void> {\n  const exp = await getPublicExpoManifestAsync(projectRoot);\n\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n\n  const outputPath = path.resolve(projectRoot, outputDir);\n  const assetsPath = path.join(outputPath, 'assets');\n  const bundlesPath = path.join(outputPath, 'bundles');\n\n  await Promise.all([assetsPath, bundlesPath].map(ensureDirectoryAsync));\n\n  await copyPublicFolderAsync(publicPath, outputDir);\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await createBundlesAsync(\n    projectRoot,\n    { resetCache: !!clear },\n    {\n      platforms,\n      dev,\n      useDevServer: true,\n      // TODO: Disable source map generation if we aren't outputting them.\n    }\n  );\n\n  // Log bundle size info to the user\n  printBundleSizes(\n    Object.fromEntries(\n      Object.entries(bundles).map(([key, value]) => {\n        if (!dumpSourcemap) {\n          return [\n            key,\n            {\n              ...value,\n              // Remove source maps from the bundles if they aren't going to be written.\n              map: undefined,\n            },\n          ];\n        }\n\n        return [key, value];\n      })\n    )\n  );\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n  const { hashes, fileNames } = await writeBundlesAsync({ bundles, outputDir: bundlesPath });\n\n  Log.log('Finished saving JS Bundles');\n\n  if (fileNames.web) {\n    // If web exists, then write the template HTML file.\n    await fs.promises.writeFile(\n      path.join(outputPath, 'index.html'),\n      await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n        scripts: [`/bundles/${fileNames.web}`],\n      })\n    );\n\n    // Save assets like a typical bundler, preserving the file paths on web.\n    const saveAssets = importCliSaveAssetsFromProject(projectRoot);\n    await Promise.all(\n      Object.entries(bundles).map(([platform, bundle]) => {\n        return saveAssets(\n          // @ts-expect-error: tolerable type mismatches: unused `readonly` (common in Metro) and `undefined` instead of `null`.\n          bundle.assets,\n          platform,\n          outputPath,\n          undefined\n        );\n      })\n    );\n  }\n\n  const { assets } = await exportAssetsAsync(projectRoot, {\n    exp,\n    outputDir: outputPath,\n    bundles,\n  });\n\n  if (dumpAssetmap) {\n    Log.log('Dumping asset map');\n    await writeAssetMapAsync({ outputDir: outputPath, assets });\n  }\n\n  // build source maps\n  if (dumpSourcemap) {\n    Log.log('Dumping source maps');\n    await writeSourceMapsAsync({\n      bundles,\n      hashes,\n      outputDir: bundlesPath,\n      fileNames,\n    });\n\n    Log.log('Preparing additional debugging files');\n    // If we output source maps, then add a debug HTML file which the user can open in\n    // the web browser to inspect the output like web.\n    await writeDebugHtmlAsync({\n      outputDir: outputPath,\n      fileNames,\n    });\n  }\n\n  // Generate a `metadata.json` and the export is complete.\n  await writeMetadataJsonAsync({ outputDir: outputPath, bundles, fileNames });\n}\n\n/**\n * Copy the contents of the public folder into the output folder.\n * This enables users to add static files like `favicon.ico` or `serve.json`.\n *\n * The contents of this folder are completely universal since they refer to\n * static network requests which fall outside the scope of React Native's magic\n * platform resolution patterns.\n */\nasync function copyPublicFolderAsync(publicFolder: string, outputFolder: string) {\n  if (fs.existsSync(publicFolder)) {\n    await copyAsync(publicFolder, outputFolder);\n  }\n}\n"],"names":["exportAppAsync","Log","projectRoot","platforms","outputDir","clear","dev","dumpAssetmap","dumpSourcemap","exp","getPublicExpoManifestAsync","publicPath","path","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","assetsPath","join","bundlesPath","Promise","all","map","ensureDirectoryAsync","copyPublicFolderAsync","bundles","createBundlesAsync","resetCache","useDevServer","printBundleSizes","Object","fromEntries","entries","key","value","undefined","hashes","fileNames","writeBundlesAsync","log","web","fs","promises","writeFile","createTemplateHtmlFromExpoConfigAsync","scripts","saveAssets","importCliSaveAssetsFromProject","platform","bundle","assets","exportAssetsAsync","writeAssetMapAsync","writeSourceMapsAsync","writeDebugHtmlAsync","writeMetadataJsonAsync","publicFolder","outputFolder","existsSync","copyAsync"],"mappings":"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"}