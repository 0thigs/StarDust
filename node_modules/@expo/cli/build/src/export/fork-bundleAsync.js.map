{"version":3,"sources":["../../../src/export/fork-bundleAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig, getConfigFilePaths, Platform } from '@expo/config';\nimport {\n  buildHermesBundleAsync,\n  isEnableHermesManaged,\n  maybeThrowFromInconsistentEngineAsync,\n} from '@expo/dev-server/build/HermesBundler';\nimport {\n  importExpoMetroConfigFromProject,\n  importMetroFromProject,\n  importMetroServerFromProject,\n} from '@expo/dev-server/build/metro/importMetroFromProject';\nimport { LoadOptions } from '@expo/metro-config';\nimport chalk from 'chalk';\nimport Metro from 'metro';\nimport { Terminal } from 'metro-core';\n\nimport { MetroTerminalReporter } from '../start/server/metro/MetroTerminalReporter';\nimport { withMetroMultiPlatformAsync } from '../start/server/metro/withMetroMultiPlatform';\nimport { getPlatformBundlers } from '../start/server/platformBundlers';\n\nexport type MetroDevServerOptions = LoadOptions & {\n  logger: import('@expo/bunyan');\n  quiet?: boolean;\n};\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: 'android' | 'ios' | 'web';\n  dev?: boolean;\n  minify?: boolean;\n  sourceMapUrl?: string;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\nexport type BundleOutput = {\n  code: string;\n  map?: string;\n  hermesBytecodeBundle?: Uint8Array;\n  hermesSourcemap?: string;\n  assets: readonly BundleAssetWithFileHashes[];\n};\n\nfunction getExpoMetroConfig(\n  projectRoot: string,\n  { logger }: Pick<MetroDevServerOptions, 'logger'>\n): typeof import('@expo/metro-config') {\n  try {\n    return importExpoMetroConfigFromProject(projectRoot);\n  } catch {\n    // If expo isn't installed, use the unversioned config and warn about installing expo.\n  }\n\n  const unversionedVersion = require('@expo/metro-config/package.json').version;\n  logger.info(\n    { tag: 'expo' },\n    chalk.gray(\n      `\\u203A Unversioned ${chalk.bold`@expo/metro-config@${unversionedVersion}`} is being used. Bundling apps may not work as expected, and is subject to breaking changes. Install ${chalk.bold`expo`} or set the app.json sdkVersion to use a stable version of @expo/metro-config.`\n    )\n  );\n\n  return require('@expo/metro-config');\n}\n\nlet nextBuildID = 0;\n\n// Fork of @expo/dev-server bundleAsync to add Metro logging back.\n\nasync function assertEngineMismatchAsync(projectRoot: string, exp: ExpoConfig, platform: Platform) {\n  const isHermesManaged = isEnableHermesManaged(exp, platform);\n\n  const paths = getConfigFilePaths(projectRoot);\n  const configFilePath = paths.dynamicConfigPath ?? paths.staticConfigPath ?? 'app.json';\n  await maybeThrowFromInconsistentEngineAsync(\n    projectRoot,\n    configFilePath,\n    platform,\n    isHermesManaged\n  );\n}\n\nexport async function bundleAsync(\n  projectRoot: string,\n  expoConfig: ExpoConfig,\n  options: MetroDevServerOptions,\n  bundles: BundleOptions[]\n): Promise<BundleOutput[]> {\n  // Assert early so the user doesn't have to wait until bundling is complete to find out that\n  // Hermes won't be available.\n  await Promise.all(\n    bundles.map(({ platform }) => assertEngineMismatchAsync(projectRoot, expoConfig, platform))\n  );\n\n  const metro = importMetroFromProject(projectRoot);\n  const Server = importMetroServerFromProject(projectRoot);\n\n  const terminal = new Terminal(process.stdout);\n  const terminalReporter = new MetroTerminalReporter(projectRoot, terminal);\n\n  const reporter = {\n    update(event: any) {\n      terminalReporter.update(event);\n    },\n  };\n\n  const ExpoMetroConfig = getExpoMetroConfig(projectRoot, options);\n\n  const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  let config = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n\n  const bundlerPlatforms = getPlatformBundlers(exp);\n\n  config = await withMetroMultiPlatformAsync(projectRoot, config, bundlerPlatforms);\n\n  const metroServer = await metro.runMetro(config, {\n    watch: false,\n  });\n\n  const buildAsync = async (bundle: BundleOptions): Promise<BundleOutput> => {\n    const buildID = `bundle_${nextBuildID++}_${bundle.platform}`;\n    const bundleOptions: Metro.BundleOptions = {\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      bundleType: 'bundle',\n      platform: bundle.platform,\n      entryFile: bundle.entryPoint,\n      dev: bundle.dev ?? false,\n      minify: bundle.minify ?? !bundle.dev,\n      inlineSourceMap: false,\n      sourceMapUrl: bundle.sourceMapUrl,\n      createModuleIdFactory: config.serializer.createModuleIdFactory,\n      onProgress: (transformedFileCount: number, totalFileCount: number) => {\n        if (!options.quiet) {\n          terminalReporter.update({\n            buildID,\n            type: 'bundle_transform_progressed',\n            transformedFileCount,\n            totalFileCount,\n          });\n        }\n      },\n    };\n    const bundleDetails = {\n      ...bundleOptions,\n      buildID,\n    };\n    terminalReporter.update({\n      buildID,\n      type: 'bundle_build_started',\n      // @ts-expect-error: TODO\n      bundleDetails,\n    });\n    try {\n      const { code, map } = await metroServer.build(bundleOptions);\n      const assets = (await metroServer.getAssets(\n        bundleOptions\n      )) as readonly BundleAssetWithFileHashes[];\n      terminalReporter.update({\n        buildID,\n        type: 'bundle_build_done',\n      });\n      return { code, map, assets };\n    } catch (error) {\n      terminalReporter.update({\n        buildID,\n        type: 'bundle_build_failed',\n      });\n\n      throw error;\n    }\n  };\n\n  const maybeAddHermesBundleAsync = async (\n    bundle: BundleOptions,\n    bundleOutput: BundleOutput\n  ): Promise<BundleOutput> => {\n    const { platform } = bundle;\n    const isHermesManaged = isEnableHermesManaged(expoConfig, platform);\n    if (isHermesManaged) {\n      const platformTag = chalk.bold(\n        { ios: 'iOS', android: 'Android', web: 'Web' }[platform] || platform\n      );\n\n      terminalReporter.terminal.log(`${platformTag} Building Hermes bytecode for the bundle`);\n\n      const hermesBundleOutput = await buildHermesBundleAsync(\n        projectRoot,\n        bundleOutput.code,\n        bundleOutput.map!,\n        bundle.minify\n      );\n      bundleOutput.hermesBytecodeBundle = hermesBundleOutput.hbc;\n      bundleOutput.hermesSourcemap = hermesBundleOutput.sourcemap;\n    }\n    return bundleOutput;\n  };\n\n  try {\n    const intermediateOutputs = await Promise.all(bundles.map((bundle) => buildAsync(bundle)));\n    const bundleOutputs: BundleOutput[] = [];\n    for (let i = 0; i < bundles.length; ++i) {\n      // hermesc does not support parallel building even we spawn processes.\n      // we should build them sequentially.\n      bundleOutputs.push(await maybeAddHermesBundleAsync(bundles[i], intermediateOutputs[i]));\n    }\n    return bundleOutputs;\n  } catch (error) {\n    // New line so errors don't show up inline with the progress bar\n    console.log('');\n    throw error;\n  } finally {\n    metroServer.end();\n  }\n}\n"],"names":["bundleAsync","getExpoMetroConfig","projectRoot","logger","importExpoMetroConfigFromProject","unversionedVersion","require","version","info","tag","chalk","gray","bold","nextBuildID","assertEngineMismatchAsync","exp","platform","isHermesManaged","isEnableHermesManaged","paths","getConfigFilePaths","configFilePath","dynamicConfigPath","staticConfigPath","maybeThrowFromInconsistentEngineAsync","expoConfig","options","bundles","Promise","all","map","metro","importMetroFromProject","Server","importMetroServerFromProject","terminal","Terminal","process","stdout","terminalReporter","MetroTerminalReporter","reporter","update","event","ExpoMetroConfig","getConfig","skipSDKVersionRequirement","config","loadAsync","bundlerPlatforms","getPlatformBundlers","withMetroMultiPlatformAsync","metroServer","runMetro","watch","buildAsync","bundle","buildID","bundleOptions","DEFAULT_BUNDLE_OPTIONS","bundleType","entryFile","entryPoint","dev","minify","inlineSourceMap","sourceMapUrl","createModuleIdFactory","serializer","onProgress","transformedFileCount","totalFileCount","quiet","type","bundleDetails","code","build","assets","getAssets","error","maybeAddHermesBundleAsync","bundleOutput","platformTag","ios","android","web","log","hermesBundleOutput","buildHermesBundleAsync","hermesBytecodeBundle","hbc","hermesSourcemap","sourcemap","intermediateOutputs","bundleOutputs","i","length","push","console","end"],"mappings":"AAAA;;;;QAgFsBA,WAAW,GAAXA,WAAW;AAhFmC,IAAA,OAAc,WAAd,cAAc,CAAA;AAK3E,IAAA,cAAsC,WAAtC,sCAAsC,CAAA;AAKtC,IAAA,uBAAqD,WAArD,qDAAqD,CAAA;AAE1C,IAAA,MAAO,kCAAP,OAAO,EAAA;AAEA,IAAA,UAAY,WAAZ,YAAY,CAAA;AAEC,IAAA,sBAA6C,WAA7C,6CAA6C,CAAA;AACvC,IAAA,uBAA8C,WAA9C,8CAA8C,CAAA;AACtD,IAAA,iBAAkC,WAAlC,kCAAkC,CAAA;;;;;;AAwBtE,SAASC,kBAAkB,CACzBC,WAAmB,EACnB,EAAEC,MAAM,CAAA,EAAyC,EACZ;IACrC,IAAI;QACF,OAAOC,CAAAA,GAAAA,uBAAgC,AAAa,CAAA,iCAAb,CAACF,WAAW,CAAC,CAAC;KACtD,CAAC,OAAM;IACN,sFAAsF;KACvF;IAED,MAAMG,kBAAkB,GAAGC,OAAO,CAAC,iCAAiC,CAAC,CAACC,OAAO,AAAC;IAC9EJ,MAAM,CAACK,IAAI,CACT;QAAEC,GAAG,EAAE,MAAM;KAAE,EACfC,MAAK,QAAA,CAACC,IAAI,CACR,CAAC,mBAAmB,EAAED,MAAK,QAAA,CAACE,IAAI,CAAC,mBAAmB,EAAEP,kBAAkB,CAAC,CAAC,CAAC,oGAAoG,EAAEK,MAAK,QAAA,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,8EAA8E,CAAC,CAClR,CACF,CAAC;IAEF,OAAON,OAAO,CAAC,oBAAoB,CAAC,CAAC;CACtC;AAED,IAAIO,WAAW,GAAG,CAAC,AAAC;AAEpB,kEAAkE;AAElE,eAAeC,yBAAyB,CAACZ,WAAmB,EAAEa,GAAe,EAAEC,QAAkB,EAAE;IACjG,MAAMC,eAAe,GAAGC,CAAAA,GAAAA,cAAqB,AAAe,CAAA,sBAAf,CAACH,GAAG,EAAEC,QAAQ,CAAC,AAAC;IAE7D,MAAMG,KAAK,GAAGC,CAAAA,GAAAA,OAAkB,AAAa,CAAA,mBAAb,CAAClB,WAAW,CAAC,AAAC;QACvBiB,kBAAuB,EAAvBA,GAAiD;IAAxE,MAAME,cAAc,GAAGF,CAAAA,GAAiD,GAAjDA,CAAAA,kBAAuB,GAAvBA,KAAK,CAACG,iBAAiB,YAAvBH,kBAAuB,GAAIA,KAAK,CAACI,gBAAgB,YAAjDJ,GAAiD,GAAI,UAAU,AAAC;IACvF,MAAMK,CAAAA,GAAAA,cAAqC,AAK1C,CAAA,sCAL0C,CACzCtB,WAAW,EACXmB,cAAc,EACdL,QAAQ,EACRC,eAAe,CAChB,CAAC;CACH;AAEM,eAAejB,WAAW,CAC/BE,WAAmB,EACnBuB,UAAsB,EACtBC,OAA8B,EAC9BC,OAAwB,EACC;IACzB,4FAA4F;IAC5F,6BAA6B;IAC7B,MAAMC,OAAO,CAACC,GAAG,CACfF,OAAO,CAACG,GAAG,CAAC,CAAC,EAAEd,QAAQ,CAAA,EAAE,GAAKF,yBAAyB,CAACZ,WAAW,EAAEuB,UAAU,EAAET,QAAQ,CAAC;IAAA,CAAC,CAC5F,CAAC;IAEF,MAAMe,KAAK,GAAGC,CAAAA,GAAAA,uBAAsB,AAAa,CAAA,uBAAb,CAAC9B,WAAW,CAAC,AAAC;IAClD,MAAM+B,MAAM,GAAGC,CAAAA,GAAAA,uBAA4B,AAAa,CAAA,6BAAb,CAAChC,WAAW,CAAC,AAAC;IAEzD,MAAMiC,QAAQ,GAAG,IAAIC,UAAQ,SAAA,CAACC,OAAO,CAACC,MAAM,CAAC,AAAC;IAC9C,MAAMC,gBAAgB,GAAG,IAAIC,sBAAqB,sBAAA,CAACtC,WAAW,EAAEiC,QAAQ,CAAC,AAAC;IAE1E,MAAMM,QAAQ,GAAG;QACfC,MAAM,EAACC,KAAU,EAAE;YACjBJ,gBAAgB,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC;SAChC;KACF,AAAC;IAEF,MAAMC,eAAe,GAAG3C,kBAAkB,CAACC,WAAW,EAAEwB,OAAO,CAAC,AAAC;IAEjE,MAAM,EAAEX,GAAG,CAAA,EAAE,GAAG8B,CAAAA,GAAAA,OAAS,AAAkD,CAAA,UAAlD,CAAC3C,WAAW,EAAE;QAAE4C,yBAAyB,EAAE,IAAI;KAAE,CAAC,AAAC;IAC5E,IAAIC,MAAM,GAAG,MAAMH,eAAe,CAACI,SAAS,CAAC9C,WAAW,EAAE;QAAEuC,QAAQ;QAAE,GAAGf,OAAO;KAAE,CAAC,AAAC;IAEpF,MAAMuB,gBAAgB,GAAGC,CAAAA,GAAAA,iBAAmB,AAAK,CAAA,oBAAL,CAACnC,GAAG,CAAC,AAAC;IAElDgC,MAAM,GAAG,MAAMI,CAAAA,GAAAA,uBAA2B,AAAuC,CAAA,4BAAvC,CAACjD,WAAW,EAAE6C,MAAM,EAAEE,gBAAgB,CAAC,CAAC;IAElF,MAAMG,WAAW,GAAG,MAAMrB,KAAK,CAACsB,QAAQ,CAACN,MAAM,EAAE;QAC/CO,KAAK,EAAE,KAAK;KACb,CAAC,AAAC;IAEH,MAAMC,UAAU,GAAG,OAAOC,MAAqB,GAA4B;QACzE,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE5C,WAAW,EAAE,CAAC,CAAC,EAAE2C,MAAM,CAACxC,QAAQ,CAAC,CAAC,AAAC;YAMtDwC,IAAU,EACPA,OAAa;QANvB,MAAME,aAAa,GAAwB;YACzC,GAAGzB,MAAM,CAAC0B,sBAAsB;YAChCC,UAAU,EAAE,QAAQ;YACpB5C,QAAQ,EAAEwC,MAAM,CAACxC,QAAQ;YACzB6C,SAAS,EAAEL,MAAM,CAACM,UAAU;YAC5BC,GAAG,EAAEP,CAAAA,IAAU,GAAVA,MAAM,CAACO,GAAG,YAAVP,IAAU,GAAI,KAAK;YACxBQ,MAAM,EAAER,CAAAA,OAAa,GAAbA,MAAM,CAACQ,MAAM,YAAbR,OAAa,GAAI,CAACA,MAAM,CAACO,GAAG;YACpCE,eAAe,EAAE,KAAK;YACtBC,YAAY,EAAEV,MAAM,CAACU,YAAY;YACjCC,qBAAqB,EAAEpB,MAAM,CAACqB,UAAU,CAACD,qBAAqB;YAC9DE,UAAU,EAAE,CAACC,oBAA4B,EAAEC,cAAsB,GAAK;gBACpE,IAAI,CAAC7C,OAAO,CAAC8C,KAAK,EAAE;oBAClBjC,gBAAgB,CAACG,MAAM,CAAC;wBACtBe,OAAO;wBACPgB,IAAI,EAAE,6BAA6B;wBACnCH,oBAAoB;wBACpBC,cAAc;qBACf,CAAC,CAAC;iBACJ;aACF;SACF,AAAC;QACF,MAAMG,aAAa,GAAG;YACpB,GAAGhB,aAAa;YAChBD,OAAO;SACR,AAAC;QACFlB,gBAAgB,CAACG,MAAM,CAAC;YACtBe,OAAO;YACPgB,IAAI,EAAE,sBAAsB;YAC5B,yBAAyB;YACzBC,aAAa;SACd,CAAC,CAAC;QACH,IAAI;YACF,MAAM,EAAEC,IAAI,CAAA,EAAE7C,GAAG,CAAA,EAAE,GAAG,MAAMsB,WAAW,CAACwB,KAAK,CAAClB,aAAa,CAAC,AAAC;YAC7D,MAAMmB,MAAM,GAAI,MAAMzB,WAAW,CAAC0B,SAAS,CACzCpB,aAAa,CACd,AAAyC,AAAC;YAC3CnB,gBAAgB,CAACG,MAAM,CAAC;gBACtBe,OAAO;gBACPgB,IAAI,EAAE,mBAAmB;aAC1B,CAAC,CAAC;YACH,OAAO;gBAAEE,IAAI;gBAAE7C,GAAG;gBAAE+C,MAAM;aAAE,CAAC;SAC9B,CAAC,OAAOE,KAAK,EAAE;YACdxC,gBAAgB,CAACG,MAAM,CAAC;gBACtBe,OAAO;gBACPgB,IAAI,EAAE,qBAAqB;aAC5B,CAAC,CAAC;YAEH,MAAMM,KAAK,CAAC;SACb;KACF,AAAC;IAEF,MAAMC,yBAAyB,GAAG,OAChCxB,MAAqB,EACrByB,YAA0B,GACA;QAC1B,MAAM,EAAEjE,QAAQ,CAAA,EAAE,GAAGwC,MAAM,AAAC;QAC5B,MAAMvC,eAAe,GAAGC,CAAAA,GAAAA,cAAqB,AAAsB,CAAA,sBAAtB,CAACO,UAAU,EAAET,QAAQ,CAAC,AAAC;QACpE,IAAIC,eAAe,EAAE;YACnB,MAAMiE,WAAW,GAAGxE,MAAK,QAAA,CAACE,IAAI,CAC5B;gBAAEuE,GAAG,EAAE,KAAK;gBAAEC,OAAO,EAAE,SAAS;gBAAEC,GAAG,EAAE,KAAK;aAAE,CAACrE,QAAQ,CAAC,IAAIA,QAAQ,CACrE,AAAC;YAEFuB,gBAAgB,CAACJ,QAAQ,CAACmD,GAAG,CAAC,CAAC,EAAEJ,WAAW,CAAC,wCAAwC,CAAC,CAAC,CAAC;YAExF,MAAMK,kBAAkB,GAAG,MAAMC,CAAAA,GAAAA,cAAsB,AAKtD,CAAA,uBALsD,CACrDtF,WAAW,EACX+E,YAAY,CAACN,IAAI,EACjBM,YAAY,CAACnD,GAAG,EAChB0B,MAAM,CAACQ,MAAM,CACd,AAAC;YACFiB,YAAY,CAACQ,oBAAoB,GAAGF,kBAAkB,CAACG,GAAG,CAAC;YAC3DT,YAAY,CAACU,eAAe,GAAGJ,kBAAkB,CAACK,SAAS,CAAC;SAC7D;QACD,OAAOX,YAAY,CAAC;KACrB,AAAC;IAEF,IAAI;QACF,MAAMY,mBAAmB,GAAG,MAAMjE,OAAO,CAACC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAAC0B,MAAM,GAAKD,UAAU,CAACC,MAAM,CAAC;QAAA,CAAC,CAAC,AAAC;QAC3F,MAAMsC,aAAa,GAAmB,EAAE,AAAC;QACzC,IAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpE,OAAO,CAACqE,MAAM,EAAE,EAAED,CAAC,CAAE;YACvC,sEAAsE;YACtE,qCAAqC;YACrCD,aAAa,CAACG,IAAI,CAAC,MAAMjB,yBAAyB,CAACrD,OAAO,CAACoE,CAAC,CAAC,EAAEF,mBAAmB,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;SACzF;QACD,OAAOD,aAAa,CAAC;KACtB,CAAC,OAAOf,KAAK,EAAE;QACd,gEAAgE;QAChEmB,OAAO,CAACZ,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,MAAMP,KAAK,CAAC;KACb,QAAS;QACR3B,WAAW,CAAC+C,GAAG,EAAE,CAAC;KACnB;CACF"}