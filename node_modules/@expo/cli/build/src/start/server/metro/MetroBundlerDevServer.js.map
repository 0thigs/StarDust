{"version":3,"sources":["../../../../../src/start/server/metro/MetroBundlerDevServer.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { prependMiddleware } from '@expo/dev-server';\n\nimport getDevClientProperties from '../../../utils/analytics/getDevClientProperties';\nimport { logEventAsync } from '../../../utils/analytics/rudderstackClient';\nimport { getFreePortAsync } from '../../../utils/port';\nimport { BundlerDevServer, BundlerStartOptions, DevServerInstance } from '../BundlerDevServer';\nimport { CreateFileMiddleware } from '../middleware/CreateFileMiddleware';\nimport { HistoryFallbackMiddleware } from '../middleware/HistoryFallbackMiddleware';\nimport { InterstitialPageMiddleware } from '../middleware/InterstitialPageMiddleware';\nimport {\n  DeepLinkHandler,\n  RuntimeRedirectMiddleware,\n} from '../middleware/RuntimeRedirectMiddleware';\nimport { ServeStaticMiddleware } from '../middleware/ServeStaticMiddleware';\nimport { instantiateMetroAsync } from './instantiateMetro';\n\n/** Default port to use for apps running in Expo Go. */\nconst EXPO_GO_METRO_PORT = 19000;\n\n/** Default port to use for apps that run in standard React Native projects or Expo Dev Clients. */\nconst DEV_CLIENT_METRO_PORT = 8081;\n\nexport class MetroBundlerDevServer extends BundlerDevServer {\n  get name(): string {\n    return 'metro';\n  }\n\n  async resolvePortAsync(options: Partial<BundlerStartOptions> = {}): Promise<number> {\n    const port =\n      // If the manually defined port is busy then an error should be thrown...\n      options.port ??\n      // Otherwise use the default port based on the runtime target.\n      (options.devClient\n        ? // Don't check if the port is busy if we're using the dev client since most clients are hardcoded to 8081.\n          Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT\n        : // Otherwise (running in Expo Go) use a free port that falls back on the classic 19000 port.\n          await getFreePortAsync(EXPO_GO_METRO_PORT));\n\n    return port;\n  }\n\n  protected async startImplementationAsync(\n    options: BundlerStartOptions\n  ): Promise<DevServerInstance> {\n    options.port = await this.resolvePortAsync(options);\n    this.urlCreator = this.getUrlCreator(options);\n\n    const parsedOptions = {\n      port: options.port,\n      maxWorkers: options.maxWorkers,\n      resetCache: options.resetDevServer,\n\n      // Use the unversioned metro config.\n      // TODO: Deprecate this property when expo-cli goes away.\n      unversioned: false,\n    };\n\n    const { server, middleware, messageSocket } = await instantiateMetroAsync(\n      this.projectRoot,\n      parsedOptions\n    );\n\n    const manifestMiddleware = await this.getManifestMiddlewareAsync(options);\n\n    // We need the manifest handler to be the first middleware to run so our\n    // routes take precedence over static files. For example, the manifest is\n    // served from '/' and if the user has an index.html file in their project\n    // then the manifest handler will never run, the static middleware will run\n    // and serve index.html instead of the manifest.\n    // https://github.com/expo/expo/issues/13114\n    prependMiddleware(middleware, manifestMiddleware);\n\n    middleware.use(\n      new InterstitialPageMiddleware(this.projectRoot, {\n        // TODO: Prevent this from becoming stale.\n        scheme: options.location.scheme ?? null,\n      }).getHandler()\n    );\n\n    const deepLinkMiddleware = new RuntimeRedirectMiddleware(this.projectRoot, {\n      onDeepLink: getDeepLinkHandler(this.projectRoot),\n      getLocation: ({ runtime }) => {\n        if (runtime === 'custom') {\n          return this.urlCreator?.constructDevClientUrl();\n        } else {\n          return this.urlCreator?.constructUrl({\n            scheme: 'exp',\n          });\n        }\n      },\n    });\n    middleware.use(deepLinkMiddleware.getHandler());\n\n    middleware.use(new CreateFileMiddleware(this.projectRoot).getHandler());\n\n    // Append support for redirecting unhandled requests to the index.html page on web.\n    if (this.isTargetingWeb()) {\n      // This MUST be after the manifest middleware so it doesn't have a chance to serve the template `public/index.html`.\n      middleware.use(new ServeStaticMiddleware(this.projectRoot).getHandler());\n\n      // This MUST run last since it's the fallback.\n      middleware.use(new HistoryFallbackMiddleware(manifestMiddleware.internal).getHandler());\n    }\n    // Extend the close method to ensure that we clean up the local info.\n    const originalClose = server.close.bind(server);\n\n    server.close = (callback?: (err?: Error) => void) => {\n      return originalClose((err?: Error) => {\n        this.instance = null;\n        callback?.(err);\n      });\n    };\n\n    return {\n      server,\n      location: {\n        // The port is the main thing we want to send back.\n        port: options.port,\n        // localhost isn't always correct.\n        host: 'localhost',\n        // http is the only supported protocol on native.\n        url: `http://localhost:${options.port}`,\n        protocol: 'http',\n      },\n      middleware,\n      messageSocket,\n    };\n  }\n\n  protected getConfigModuleIds(): string[] {\n    return ['./metro.config.js', './metro.config.json', './rn-cli.config.js'];\n  }\n}\n\nexport function getDeepLinkHandler(projectRoot: string): DeepLinkHandler {\n  return async ({ runtime }) => {\n    if (runtime === 'expo') return;\n    const { exp } = getConfig(projectRoot);\n    await logEventAsync('dev client start command', {\n      status: 'started',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  };\n}\n"],"names":["getDeepLinkHandler","EXPO_GO_METRO_PORT","DEV_CLIENT_METRO_PORT","MetroBundlerDevServer","BundlerDevServer","name","resolvePortAsync","options","port","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","startImplementationAsync","urlCreator","getUrlCreator","parsedOptions","maxWorkers","resetCache","resetDevServer","unversioned","server","middleware","messageSocket","instantiateMetroAsync","projectRoot","manifestMiddleware","getManifestMiddlewareAsync","prependMiddleware","use","InterstitialPageMiddleware","scheme","location","getHandler","deepLinkMiddleware","RuntimeRedirectMiddleware","onDeepLink","getLocation","runtime","constructDevClientUrl","constructUrl","CreateFileMiddleware","isTargetingWeb","ServeStaticMiddleware","HistoryFallbackMiddleware","internal","originalClose","close","bind","callback","err","instance","host","url","protocol","getConfigModuleIds","exp","getConfig","logEventAsync","status","getDevClientProperties"],"mappings":"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"}