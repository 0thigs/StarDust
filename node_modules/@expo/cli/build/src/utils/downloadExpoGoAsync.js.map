{"version":3,"sources":["../../../src/utils/downloadExpoGoAsync.ts"],"sourcesContent":["import { getExpoHomeDirectory } from '@expo/config/build/getUserState';\nimport path from 'path';\nimport ProgressBar from 'progress';\n\nimport { getVersionsAsync, SDKVersion } from '../api/getVersions';\nimport { downloadAppAsync } from './downloadAppAsync';\nimport { CommandError } from './errors';\nimport { ora } from './ora';\nimport { profile } from './profile';\nimport { createProgressBar } from './progress';\n\nconst debug = require('debug')('expo:utils:downloadExpoGo') as typeof console.log;\n\nconst platformSettings: Record<\n  string,\n  {\n    shouldExtractResults: boolean;\n    versionsKey: keyof SDKVersion;\n    getFilePath: (filename: string) => string;\n  }\n> = {\n  ios: {\n    versionsKey: 'iosClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'ios-simulator-app-cache', `${filename}.app`),\n    shouldExtractResults: true,\n  },\n  android: {\n    versionsKey: 'androidClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'android-apk-cache', `${filename}.apk`),\n    shouldExtractResults: false,\n  },\n};\n\n/** Download the Expo Go app from the Expo servers (if only it was this easy for every app). */\nexport async function downloadExpoGoAsync(\n  platform: keyof typeof platformSettings,\n  {\n    url,\n    sdkVersion,\n  }: {\n    url?: string;\n    sdkVersion?: string;\n  }\n): Promise<string> {\n  const { getFilePath, versionsKey, shouldExtractResults } = platformSettings[platform];\n\n  const spinner = ora({ text: 'Fetching Expo Go', color: 'white' }).start();\n\n  let bar: ProgressBar | null = null;\n\n  if (!url) {\n    if (!sdkVersion) {\n      throw new CommandError(\n        `Unable to determine which Expo Go version to install (platform: ${platform})`\n      );\n    }\n    const { sdkVersions: versions } = await getVersionsAsync();\n\n    const version = versions[sdkVersion];\n    if (!version) {\n      throw new CommandError(\n        `Unable to find a version of Expo Go for SDK ${sdkVersion} (platform: ${platform})`\n      );\n    }\n    debug(`Installing Expo Go version for SDK ${sdkVersion} at URL: ${version[versionsKey]}`);\n    url = version[versionsKey] as string;\n  }\n\n  const filename = path.parse(url).name;\n\n  try {\n    const outputPath = getFilePath(filename);\n    debug(`Downloading Expo Go from \"${url}\" to \"${outputPath}\".`);\n    debug(\n      `The requested copy of Expo Go might already be cached in: \"${getExpoHomeDirectory()}\". You can disable the cache with EXPO_NO_CACHE=1`\n    );\n    await profile(downloadAppAsync)({\n      url,\n      // Save all encrypted cache data to `~/.expo/expo-go`\n      cacheDirectory: 'expo-go',\n      outputPath,\n      extract: shouldExtractResults,\n      onProgress({ progress, total }) {\n        if (progress && total) {\n          if (!bar) {\n            if (spinner.isSpinning) {\n              spinner.stop();\n            }\n            bar = createProgressBar('Downloading the Expo Go app [:bar] :percent :etas', {\n              width: 64,\n              total: 100,\n              // clear: true,\n              complete: '=',\n              incomplete: ' ',\n            });\n          }\n          bar!.update(progress, total);\n        }\n      },\n    });\n    return outputPath;\n  } finally {\n    spinner.stop();\n    // @ts-expect-error\n    bar?.terminate();\n  }\n}\n"],"names":["downloadExpoGoAsync","debug","require","platformSettings","ios","versionsKey","getFilePath","filename","path","join","getExpoHomeDirectory","shouldExtractResults","android","platform","url","sdkVersion","spinner","ora","text","color","start","bar","CommandError","sdkVersions","versions","getVersionsAsync","version","parse","name","outputPath","profile","downloadAppAsync","cacheDirectory","extract","onProgress","progress","total","isSpinning","stop","createProgressBar","width","complete","incomplete","update","terminate"],"mappings":"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"}