{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import {\n  ColorValue,\n  GestureResponderEvent,\n  GestureResponderHandlers,\n  LayoutChangeEvent,\n} from 'react-native';\nimport React from 'react';\n\nexport type NumberProp = string | number;\nexport type NumberArray = NumberProp[] | NumberProp;\n\nexport type FillRule = 'evenodd' | 'nonzero';\nexport type Units = 'userSpaceOnUse' | 'objectBoundingBox';\n\nexport type TextAnchor = 'start' | 'middle' | 'end';\nexport type FontStyle = 'normal' | 'italic' | 'oblique';\nexport type FontVariant = 'normal' | 'small-caps';\nexport type FontWeight =\n  | NumberProp\n  | 'normal'\n  | 'bold'\n  | 'bolder'\n  | 'lighter'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\nexport type FontStretch =\n  | 'normal'\n  | 'wider'\n  | 'narrower'\n  | 'ultra-condensed'\n  | 'extra-condensed'\n  | 'condensed'\n  | 'semi-condensed'\n  | 'semi-expanded'\n  | 'expanded'\n  | 'extra-expanded'\n  | 'ultra-expanded';\nexport type TextDecoration =\n  | 'none'\n  | 'underline'\n  | 'overline'\n  | 'line-through'\n  | 'blink';\nexport type FontVariantLigatures = 'normal' | 'none';\nexport type AlignmentBaseline =\n  | 'baseline'\n  | 'text-bottom'\n  | 'alphabetic'\n  | 'ideographic'\n  | 'middle'\n  | 'central'\n  | 'mathematical'\n  | 'text-top'\n  | 'bottom'\n  | 'center'\n  | 'top'\n  | 'text-before-edge'\n  | 'text-after-edge'\n  | 'before-edge'\n  | 'after-edge'\n  | 'hanging';\nexport type BaselineShift =\n  | 'sub'\n  | 'super'\n  | 'baseline'\n  | ReadonlyArray<NumberProp>\n  | NumberProp;\nexport type LengthAdjust = 'spacing' | 'spacingAndGlyphs';\n\nexport type TextPathMethod = 'align' | 'stretch';\nexport type TextPathSpacing = 'auto' | 'exact';\nexport type TextPathMidLine = 'sharp' | 'smooth';\n\nexport type Linecap = 'butt' | 'square' | 'round';\nexport type Linejoin = 'miter' | 'bevel' | 'round';\n\nexport interface TouchableProps {\n  disabled?: boolean;\n  onPress?: (event: GestureResponderEvent) => void;\n  onPressIn?: (event: GestureResponderEvent) => void;\n  onPressOut?: (event: GestureResponderEvent) => void;\n  onLongPress?: (event: GestureResponderEvent) => void;\n  delayPressIn?: number;\n  delayPressOut?: number;\n  delayLongPress?: number;\n}\n\nexport interface ResponderProps extends GestureResponderHandlers {\n  pointerEvents?: 'box-none' | 'none' | 'box-only' | 'auto';\n}\n\nexport interface FillProps {\n  fill?: ColorValue;\n  fillOpacity?: NumberProp;\n  fillRule?: FillRule;\n}\n\nexport interface ClipProps {\n  clipRule?: FillRule;\n  clipPath?: string;\n}\n\nexport interface VectorEffectProps {\n  vectorEffect?:\n    | 'none'\n    | 'non-scaling-stroke'\n    | 'nonScalingStroke'\n    | 'default'\n    | 'inherit'\n    | 'uri';\n}\n\nexport interface DefinitionProps {\n  id?: string;\n}\n\nexport interface StrokeProps {\n  stroke?: ColorValue;\n  strokeWidth?: NumberProp;\n  strokeOpacity?: NumberProp;\n  strokeDasharray?: ReadonlyArray<NumberProp> | NumberProp;\n  strokeDashoffset?: NumberProp;\n  strokeLinecap?: Linecap;\n  strokeLinejoin?: Linejoin;\n  strokeMiterlimit?: NumberProp;\n  vectorEffect?: VectorEffect;\n}\n\nexport type VectorEffect =\n  | 'none'\n  | 'non-scaling-stroke'\n  | 'nonScalingStroke'\n  | 'default'\n  | 'inherit'\n  | 'uri';\n\nexport interface FontObject {\n  fontStyle?: FontStyle;\n  fontVariant?: FontVariant;\n  fontWeight?: FontWeight;\n  fontStretch?: FontStretch;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: TextAnchor;\n  textDecoration?: TextDecoration;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: FontVariantLigatures;\n  fontVariationSettings?: string;\n}\n\nexport interface FontProps extends FontObject {\n  font?: FontObject;\n}\n\nexport interface TransformObject {\n  translate?: NumberArray;\n  translateX?: NumberProp;\n  translateY?: NumberProp;\n  origin?: NumberArray;\n  originX?: NumberProp;\n  originY?: NumberProp;\n  scale?: NumberArray;\n  scaleX?: NumberProp;\n  scaleY?: NumberProp;\n  skew?: NumberArray;\n  skewX?: NumberProp;\n  skewY?: NumberProp;\n  rotation?: NumberProp;\n  x?: NumberArray;\n  y?: NumberArray;\n}\n\n/*\n\n  ColumnMajorTransformMatrix\n\n  [a, b, c, d, tx, ty]\n\n  This matrix can be visualized as:\n\n  ╔═      ═╗\n  ║ a c tx ║\n  ║ b d ty ║\n  ║ 0 0 1  ║\n  ╚═      ═╝\n\n*/\nexport type ColumnMajorTransformMatrix = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n];\n\nexport interface TransformProps extends TransformObject {\n  transform?: ColumnMajorTransformMatrix | string | TransformObject;\n  // | TransformsStyle['transform']; // not used since it causes type problems\n}\n\nexport interface TransformedProps {\n  rotation: number;\n  originX: number;\n  originY: number;\n  scaleX: number;\n  scaleY: number;\n  skewX: number;\n  skewY: number;\n  x: number;\n  y: number;\n}\n\nexport interface CommonMaskProps {\n  mask?: string;\n}\n\nexport interface CommonMarkerProps {\n  marker?: string;\n  markerStart?: string;\n  markerMid?: string;\n  markerEnd?: string;\n}\n\nexport interface NativeProps {\n  onLayout?: (event: LayoutChangeEvent) => void;\n}\n\nexport interface CommonPathProps\n  extends FillProps,\n    StrokeProps,\n    ClipProps,\n    TransformProps,\n    VectorEffectProps,\n    ResponderProps,\n    TouchableProps,\n    DefinitionProps,\n    CommonMarkerProps,\n    CommonMaskProps,\n    NativeProps {}\n\nexport type ResponderInstanceProps = {\n  touchableHandleResponderMove?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;\n  touchableHandleStartShouldSetResponder?: (\n    e: GestureResponderEvent,\n  ) => boolean;\n  touchableHandleResponderTerminationRequest?: (\n    e: GestureResponderEvent,\n  ) => boolean;\n};\n\nexport type extractedProps = {\n  name?: string;\n  mask?: string;\n  opacity?: number;\n  matrix?: number[];\n  propList?: string[];\n  onLayout?: (event: LayoutChangeEvent) => void;\n  ref?: (instance: React.Component | null) => void;\n  markerStart?: string;\n  markerMid?: string;\n  markerEnd?: string;\n  clipPath?: string;\n  clipRule?: number;\n  display?: string;\n  [touchableProperty: string]: unknown;\n};\n\nexport interface TextSpecificProps extends CommonPathProps, FontProps {\n  alignmentBaseline?: AlignmentBaseline;\n  baselineShift?: BaselineShift;\n  verticalAlign?: NumberProp;\n  lengthAdjust?: LengthAdjust;\n  textLength?: NumberProp;\n  fontData?: null | { [name: string]: unknown };\n  fontFeatureSettings?: string;\n}\n"],"mappings":""}