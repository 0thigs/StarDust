{"version":3,"names":["fontRegExp","fontFamilyPrefix","fontFamilySuffix","commaReg","cachedFontObjectsFromString","extractSingleFontFamily","fontFamilyString","split","replace","parseFontString","font","hasOwnProperty","match","exec","isBold","isItalic","fontSize","fontWeight","fontStyle","fontFamily","extractFont","props","fontData","fontVariant","fontStretch","textAnchor","textDecoration","letterSpacing","wordSpacing","kerning","fontFeatureSettings","fontVariantLigatures","fontVariationSettings","ownedFont","pickNotNil","baseFont","fontProps","stringifiedFontProps","Object","keys","map","k","String","TSpan","setTSpan","TSpanImplementation","getChild","child","extractText","container","x","y","dx","dy","rotate","children","inlineSize","baselineShift","verticalAlign","alignmentBaseline","textChildren","Children","count","Array","isArray","stringifiedTextProps","stringifyPropsForFabric","content","extractLengthList"],"sources":["extractText.tsx"],"sourcesContent":["import React, { Children, ComponentType } from 'react';\nimport extractLengthList from './extractLengthList';\nimport { pickNotNil } from '../util';\nimport { NumberArray, NumberProp } from './types';\nimport { stringifyPropsForFabric } from './extractProps';\n\nconst fontRegExp =\n  /^\\s*((?:(?:normal|bold|italic)\\s+)*)(?:(\\d+(?:\\.\\d+)?(?:%|px|em|pt|pc|mm|cm|in]))*(?:\\s*\\/.*?)?\\s+)?\\s*\"?([^\"]*)/i;\nconst fontFamilyPrefix = /^[\\s\"']*/;\nconst fontFamilySuffix = /[\\s\"']*$/;\nconst commaReg = /\\s*,\\s*/g;\n\nconst cachedFontObjectsFromString: {\n  [font: string]: {\n    fontStyle: string;\n    fontSize: NumberProp;\n    fontWeight: NumberProp;\n    fontFamily: string | null;\n  } | null;\n} = {};\n\nfunction extractSingleFontFamily(fontFamilyString?: string) {\n  // SVG on the web allows for multiple font-families to be specified.\n  // For compatibility, we extract the first font-family, hoping\n  // we'll get a match.\n  return fontFamilyString\n    ? fontFamilyString\n        .split(commaReg)[0]\n        .replace(fontFamilyPrefix, '')\n        .replace(fontFamilySuffix, '')\n    : null;\n}\n\nfunction parseFontString(font: string) {\n  if (cachedFontObjectsFromString.hasOwnProperty(font)) {\n    return cachedFontObjectsFromString[font];\n  }\n  const match = fontRegExp.exec(font);\n  if (!match) {\n    cachedFontObjectsFromString[font] = null;\n    return null;\n  }\n  const isBold = /bold/.exec(match[1]);\n  const isItalic = /italic/.exec(match[1]);\n  cachedFontObjectsFromString[font] = {\n    fontSize: match[2] || 12,\n    fontWeight: isBold ? 'bold' : 'normal',\n    fontStyle: isItalic ? 'italic' : 'normal',\n    fontFamily: extractSingleFontFamily(match[3]),\n  };\n  return cachedFontObjectsFromString[font];\n}\n\ninterface fontProps {\n  fontData?: unknown;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontWeight?: NumberProp;\n  fontStretch?: string;\n  fontSize?: NumberProp;\n  fontFamily?: string;\n  textAnchor?: string;\n  textDecoration?: string;\n  letterSpacing?: NumberProp;\n  wordSpacing?: NumberProp;\n  kerning?: NumberProp;\n  fontFeatureSettings?: string;\n  fontVariantLigatures?: string;\n  fontVariationSettings?: string;\n  font?: string;\n}\n\nexport function extractFont(props: fontProps) {\n  const {\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily,\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n    font,\n  } = props;\n\n  const ownedFont = pickNotNil({\n    fontData,\n    fontStyle,\n    fontVariant,\n    fontWeight,\n    fontStretch,\n    fontSize,\n    fontFamily: extractSingleFontFamily(fontFamily),\n    textAnchor,\n    textDecoration,\n    letterSpacing,\n    wordSpacing,\n    kerning,\n    fontFeatureSettings,\n    fontVariantLigatures,\n    fontVariationSettings,\n  });\n\n  const baseFont = typeof font === 'string' ? parseFontString(font) : font;\n\n  const fontProps: { [prop: string]: string | number | null } = {\n    ...baseFont,\n    ...ownedFont,\n  };\n  const stringifiedFontProps: { [prop: string]: string | null } = {};\n  Object.keys(fontProps).map(\n    (k) =>\n      (stringifiedFontProps[k] =\n        fontProps[k] === null ? null : String(fontProps[k])),\n  );\n\n  return stringifiedFontProps;\n}\n\nlet TSpan: ComponentType<React.PropsWithChildren<{}>>;\n\nexport function setTSpan(TSpanImplementation: ComponentType) {\n  TSpan = TSpanImplementation;\n}\n\nexport type TextChild =\n  | (undefined | string | number | ComponentType | React.ReactElement)\n  | TextChild[];\n\nfunction getChild(child: TextChild) {\n  if (typeof child === 'string' || typeof child === 'number') {\n    return <TSpan>{String(child)}</TSpan>;\n  } else {\n    return child;\n  }\n}\n\nexport type TextProps = {\n  x?: NumberArray;\n  y?: NumberArray;\n  dx?: NumberArray;\n  dy?: NumberArray;\n  rotate?: NumberArray;\n  children?: TextChild;\n  inlineSize?: NumberProp;\n  baselineShift?: NumberProp;\n  verticalAlign?: NumberProp;\n  alignmentBaseline?: string;\n} & fontProps;\n\nexport default function extractText(props: TextProps, container: boolean) {\n  const {\n    x,\n    y,\n    dx,\n    dy,\n    rotate,\n    children,\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n    alignmentBaseline,\n  } = props;\n\n  const textChildren =\n    typeof children === 'string' || typeof children === 'number' ? (\n      container ? (\n        <TSpan>{String(children)}</TSpan>\n      ) : null\n    ) : Children.count(children) > 1 || Array.isArray(children) ? (\n      Children.map(children, getChild)\n    ) : (\n      children\n    );\n\n  const stringifiedTextProps = stringifyPropsForFabric({\n    inlineSize,\n    baselineShift,\n    verticalAlign,\n  });\n\n  return {\n    content: textChildren === null ? String(children) : null,\n    children: textChildren,\n    ...stringifiedTextProps,\n    alignmentBaseline,\n    font: extractFont(props),\n    x: extractLengthList(x),\n    y: extractLengthList(y),\n    dx: extractLengthList(dx),\n    dy: extractLengthList(dy),\n    rotate: extractLengthList(rotate),\n  };\n}\n"],"mappings":"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"}