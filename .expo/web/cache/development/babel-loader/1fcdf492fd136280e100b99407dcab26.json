{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _excluded = [\"children\", \"screenListeners\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from \"./Group\";\nimport isArrayEqual from \"./isArrayEqual\";\nimport isRecordEqual from \"./isRecordEqual\";\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport PreventRemoveProvider from \"./PreventRemoveProvider\";\nimport Screen from \"./Screen\";\nimport { PrivateValueStore } from \"./types\";\nimport useChildListeners from \"./useChildListeners\";\nimport useComponent from \"./useComponent\";\nimport useCurrentRender from \"./useCurrentRender\";\nimport useDescriptors from \"./useDescriptors\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useFocusedListenersChildrenAdapter from \"./useFocusedListenersChildrenAdapter\";\nimport useFocusEvents from \"./useFocusEvents\";\nimport useKeyedChildListeners from \"./useKeyedChildListeners\";\nimport useNavigationHelpers from \"./useNavigationHelpers\";\nimport useOnAction from \"./useOnAction\";\nimport useOnGetState from \"./useOnGetState\";\nimport useOnRouteFocus from \"./useOnRouteFocus\";\nimport useRegisterNavigator from \"./useRegisterNavigator\";\nimport useScheduleUpdate from \"./useScheduleUpdate\";\nPrivateValueStore;\n\nvar isValidKey = function isValidKey(key) {\n  return key === undefined || typeof key === 'string' && key !== '';\n};\n\nvar getRouteConfigsFromChildren = function getRouteConfigsFromChildren(children, groupKey, groupOptions) {\n  var configs = React.Children.toArray(children).reduce(function (acc, child) {\n    var _child$type, _child$props;\n\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the screen '\" + child.props.name + \"'. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\"Got an invalid 'navigationKey' prop (\" + JSON.stringify(child.props.navigationKey) + \") for the group. It must be a non-empty string or 'undefined'.\");\n        }\n\n        acc.push.apply(acc, _toConsumableArray(getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [].concat(_toConsumableArray(groupOptions), [child.props.screenOptions]) : [child.props.screenOptions])));\n        return acc;\n      }\n    }\n\n    throw new Error(\"A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found \" + (React.isValidElement(child) ? \"'\" + (typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name) + \"'\" + ((_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? \" for the screen '\" + child.props.name + \"'\" : '') : typeof child === 'object' ? JSON.stringify(child) : \"'\" + String(child) + \"'\") + \"). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.\");\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(function (config) {\n      var _config$props = config.props,\n          name = _config$props.name,\n          children = _config$props.children,\n          component = _config$props.component,\n          getComponent = _config$props.getComponent;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\"Got an invalid name (\" + JSON.stringify(name) + \") for the screen. It must be a non-empty string.\");\n      }\n\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\"Got both 'component' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\"Got both 'getComponent' and 'children' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\"Got both 'component' and 'getComponent' props for the screen '\" + name + \"'. You must pass only one of them.\");\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\"Got an invalid value for 'children' prop for the screen '\" + name + \"'. It must be a function returning a React Element.\");\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\"Got an invalid value for 'component' prop for the screen '\" + name + \"'. It must be a valid React Component.\");\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\"Got an invalid value for 'getComponent' prop for the screen '\" + name + \"'. It must be a function returning a React Component.\");\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            console.warn(\"Looks like you're passing an inline function for 'component' prop for the screen '\" + name + \"' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.\");\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\"Got a component with the name '\" + component.name + \"' for the screen '\" + name + \"'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.\");\n          }\n        }\n      } else {\n        throw new Error(\"Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '\" + name + \"'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.\");\n      }\n    });\n  }\n\n  return configs;\n};\n\nexport default function useNavigationBuilder(createRouter, options) {\n  var navigatorKey = useRegisterNavigator();\n  var route = React.useContext(NavigationRouteContext);\n\n  var children = options.children,\n      screenListeners = options.screenListeners,\n      rest = _objectWithoutProperties(options, _excluded);\n\n  var _React$useRef = React.useRef(createRouter(_objectSpread(_objectSpread({}, rest), route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n    initialRouteName: route.params.screen\n  } : null))),\n      router = _React$useRef.current;\n\n  var routeConfigs = getRouteConfigsFromChildren(children);\n  var screens = routeConfigs.reduce(function (acc, config) {\n    if (config.props.name in acc) {\n      throw new Error(\"A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '\" + config.props.name + \"')\");\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  var routeNames = routeConfigs.map(function (config) {\n    return config.props.name;\n  });\n  var routeKeyList = routeNames.reduce(function (acc, curr) {\n    acc[curr] = screens[curr].keys.map(function (key) {\n      return key != null ? key : '';\n    }).join(':');\n    return acc;\n  }, {});\n  var routeParamList = routeNames.reduce(function (acc, curr) {\n    var initialParams = screens[curr].props.initialParams;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  var routeGetIdList = routeNames.reduce(function (acc, curr) {\n    return Object.assign(acc, _defineProperty({}, curr, screens[curr].props.getId));\n  }, {});\n\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n\n  var isStateValid = React.useCallback(function (state) {\n    return state.type === undefined || state.type === router.type;\n  }, [router.type]);\n  var isStateInitialized = React.useCallback(function (state) {\n    return state !== undefined && state.stale === false && isStateValid(state);\n  }, [isStateValid]);\n\n  var _React$useContext = React.useContext(NavigationStateContext),\n      currentState = _React$useContext.state,\n      getCurrentState = _React$useContext.getState,\n      setCurrentState = _React$useContext.setState,\n      setKey = _React$useContext.setKey,\n      getKey = _React$useContext.getKey,\n      getIsInitial = _React$useContext.getIsInitial;\n\n  var stateCleanedUp = React.useRef(false);\n  var cleanUpState = React.useCallback(function () {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  var setState = React.useCallback(function (state) {\n    if (stateCleanedUp.current) {\n      return;\n    }\n\n    setCurrentState(state);\n  }, [setCurrentState]);\n\n  var _React$useMemo = React.useMemo(function () {\n    var _route$params4;\n\n    var initialRouteParamList = routeNames.reduce(function (acc, curr) {\n      var _route$params, _route$params2, _route$params3;\n\n      var initialParams = screens[curr].props.initialParams;\n      var initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? _objectSpread(_objectSpread({}, initialParams), initialParamsFromParams) : undefined;\n      return acc;\n    }, {});\n\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), true];\n    } else {\n      var _ref;\n\n      var _route$params5;\n\n      return [router.getRehydratedState((_ref = route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) != null ? _ref : currentState, {\n        routeNames: routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList: routeGetIdList\n      }), false];\n    }\n  }, [currentState, router, isStateValid]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n      initializedState = _React$useMemo2[0],\n      isFirstStateInitialization = _React$useMemo2[1];\n\n  var previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(function () {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  var previousRouteKeyList = previousRouteKeyListRef.current;\n  var state = isStateInitialized(currentState) ? currentState : initializedState;\n  var nextState = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(function (name) {\n        return previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name];\n      })\n    });\n  }\n\n  var previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(function () {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n\n  if (route !== null && route !== void 0 && route.params) {\n    var previousParams = previousNestedParamsRef.current;\n    var action;\n\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    var updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    }) : nextState;\n  }\n\n  var shouldUpdate = state !== nextState;\n  useScheduleUpdate(function () {\n    if (shouldUpdate) {\n      setState(nextState);\n    }\n  });\n  state = nextState;\n  React.useEffect(function () {\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      setState(nextState);\n    }\n\n    return function () {\n      setTimeout(function () {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n  }, []);\n  var initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  var getState = React.useCallback(function () {\n    var currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  var emitter = useEventEmitter(function (e) {\n    var _ref2;\n\n    var routeNames = [];\n    var route;\n\n    if (e.target) {\n      var _route;\n\n      route = state.routes.find(function (route) {\n        return route.key === e.target;\n      });\n\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push.apply(routeNames, _toConsumableArray(Object.keys(screens).filter(function (name) {\n        var _route2;\n\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      })));\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    var navigation = descriptors[route.key].navigation;\n\n    var listeners = (_ref2 = []).concat.apply(_ref2, _toConsumableArray([screenListeners].concat(_toConsumableArray(routeNames.map(function (name) {\n      var listeners = screens[name].props.listeners;\n      return listeners;\n    }))).map(function (listeners) {\n      var map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation: navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(function (type) {\n        return type === e.type;\n      }).map(function (type) {\n        return map === null || map === void 0 ? void 0 : map[type];\n      }) : undefined;\n    }))).filter(function (cb, i, self) {\n      return cb && self.lastIndexOf(cb) === i;\n    });\n\n    listeners.forEach(function (listener) {\n      return listener === null || listener === void 0 ? void 0 : listener(e);\n    });\n  });\n  useFocusEvents({\n    state: state,\n    emitter: emitter\n  });\n  React.useEffect(function () {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n  }, [emitter, state]);\n\n  var _useChildListeners = useChildListeners(),\n      childListeners = _useChildListeners.listeners,\n      addListener = _useChildListeners.addListener;\n\n  var _useKeyedChildListene = useKeyedChildListeners(),\n      keyedListeners = _useKeyedChildListene.keyedListeners,\n      addKeyedListener = _useKeyedChildListene.addKeyedListener;\n\n  var onAction = useOnAction({\n    router: router,\n    getState: getState,\n    setState: setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames: routeNames,\n      routeParamList: routeParamList,\n      routeGetIdList: routeGetIdList\n    },\n    emitter: emitter\n  });\n  var onRouteFocus = useOnRouteFocus({\n    router: router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState: getState,\n    setState: setState\n  });\n  var navigation = useNavigationHelpers({\n    id: options.id,\n    onAction: onAction,\n    getState: getState,\n    emitter: emitter,\n    router: router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation: navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState: getState,\n    getStateListeners: keyedListeners.getState\n  });\n  var descriptors = useDescriptors({\n    state: state,\n    screens: screens,\n    navigation: navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction: onAction,\n    getState: getState,\n    setState: setState,\n    onRouteFocus: onRouteFocus,\n    addListener: addListener,\n    addKeyedListener: addKeyedListener,\n    router: router,\n    emitter: emitter\n  });\n  useCurrentRender({\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  });\n  var NavigationContent = useComponent(function (children) {\n    return React.createElement(NavigationHelpersContext.Provider, {\n      value: navigation\n    }, React.createElement(PreventRemoveProvider, null, children));\n  });\n  return {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors,\n    NavigationContent: NavigationContent\n  };\n}","map":{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["CommonActions","React","isValidElementType","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useKeyedChildListeners","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","configs","Children","toArray","reduce","acc","child","isValidElement","type","props","navigationKey","Error","JSON","stringify","name","push","keys","options","Fragment","screenOptions","String","process","env","NODE_ENV","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","rest","current","router","useRef","params","state","initial","screen","initialRouteName","routeConfigs","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","Object","assign","getId","length","isStateValid","useCallback","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","cleanUpState","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","getInitialState","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","hasOwnProperty","previousNestedParamsRef","previousParams","action","reset","navigate","path","updatedState","getStateForAction","shouldUpdate","setTimeout","initializedStateRef","emitter","e","target","routes","find","index","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","defaultScreenOptions","NavigationContent"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Group from './Group';\nimport isArrayEqual from './isArrayEqual';\nimport isRecordEqual from './isRecordEqual';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport PreventRemoveProvider from './PreventRemoveProvider';\nimport Screen from './Screen';\nimport { PrivateValueStore } from './types';\nimport useChildListeners from './useChildListeners';\nimport useComponent from './useComponent';\nimport useCurrentRender from './useCurrentRender';\nimport useDescriptors from './useDescriptors';\nimport useEventEmitter from './useEventEmitter';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport useFocusEvents from './useFocusEvents';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useOnGetState from './useOnGetState';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useScheduleUpdate from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\nconst isValidKey = key => key === undefined || typeof key === 'string' && key !== '';\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = (children, groupKey, groupOptions) => {\n  const configs = React.Children.toArray(children).reduce((acc, child) => {\n    var _child$type, _child$props;\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);\n        }\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          props: child.props\n        });\n        return acc;\n      }\n      if (child.type === React.Fragment || child.type === Group) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(...getRouteConfigsFromChildren(child.props.children, child.props.navigationKey, child.type !== Group ? groupOptions : groupOptions != null ? [...groupOptions, child.props.screenOptions] : [child.props.screenOptions]));\n        return acc;\n      }\n    }\n    throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${/*#__PURE__*/React.isValidElement(child) ? `'${typeof child.type === 'string' ? child.type : (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.name}'${(_child$props = child.props) !== null && _child$props !== void 0 && _child$props.name ? ` for the screen '${child.props.name}'` : ''}` : typeof child === 'object' ? JSON.stringify(child) : `'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);\n  }, []);\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const {\n        name,\n        children,\n        component,\n        getComponent\n      } = config.props;\n      if (typeof name !== 'string' || !name) {\n        throw new Error(`Got an invalid name (${JSON.stringify(name)}) for the screen. It must be a non-empty string.`);\n      }\n      if (children != null || component !== undefined || getComponent !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && getComponent !== undefined) {\n          throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);\n        }\n        if (children != null && typeof children !== 'function') {\n          throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);\n        }\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);\n        }\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);\n        }\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);\n          }\n        }\n      } else {\n        throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);\n      }\n    });\n  }\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder(createRouter, options) {\n  const navigatorKey = useRegisterNavigator();\n  const route = React.useContext(NavigationRouteContext);\n  const {\n    children,\n    screenListeners,\n    ...rest\n  } = options;\n  const {\n    current: router\n  } = React.useRef(createRouter({\n    ...rest,\n    ...(route !== null && route !== void 0 && route.params && route.params.state == null && route.params.initial !== false && typeof route.params.screen === 'string' ? {\n      initialRouteName: route.params.screen\n    } : null)\n  }));\n  const routeConfigs = getRouteConfigsFromChildren(children);\n  const screens = routeConfigs.reduce((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);\n    }\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n  const routeNames = routeConfigs.map(config => config.props.name);\n  const routeKeyList = routeNames.reduce((acc, curr) => {\n    acc[curr] = screens[curr].keys.map(key => key ?? '').join(':');\n    return acc;\n  }, {});\n  const routeParamList = routeNames.reduce((acc, curr) => {\n    const {\n      initialParams\n    } = screens[curr].props;\n    acc[curr] = initialParams;\n    return acc;\n  }, {});\n  const routeGetIdList = routeNames.reduce((acc, curr) => Object.assign(acc, {\n    [curr]: screens[curr].props.getId\n  }), {});\n  if (!routeNames.length) {\n    throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");\n  }\n  const isStateValid = React.useCallback(state => state.type === undefined || state.type === router.type, [router.type]);\n  const isStateInitialized = React.useCallback(state => state !== undefined && state.stale === false && isStateValid(state), [isStateValid]);\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial\n  } = React.useContext(NavigationStateContext);\n  const stateCleanedUp = React.useRef(false);\n  const cleanUpState = React.useCallback(() => {\n    setCurrentState(undefined);\n    stateCleanedUp.current = true;\n  }, [setCurrentState]);\n  const setState = React.useCallback(state => {\n    if (stateCleanedUp.current) {\n      // State might have been already cleaned up due to unmount\n      // We do not want to expose API allowing to override this\n      // This would lead to old data preservation on main navigator unmount\n      return;\n    }\n    setCurrentState(state);\n  }, [setCurrentState]);\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    var _route$params4;\n    const initialRouteParamList = routeNames.reduce((acc, curr) => {\n      var _route$params, _route$params2, _route$params3;\n      const {\n        initialParams\n      } = screens[curr].props;\n      const initialParamsFromParams = (route === null || route === void 0 ? void 0 : (_route$params = route.params) === null || _route$params === void 0 ? void 0 : _route$params.state) == null && (route === null || route === void 0 ? void 0 : (_route$params2 = route.params) === null || _route$params2 === void 0 ? void 0 : _route$params2.initial) !== false && (route === null || route === void 0 ? void 0 : (_route$params3 = route.params) === null || _route$params3 === void 0 ? void 0 : _route$params3.screen) === curr ? route.params.params : undefined;\n      acc[curr] = initialParams !== undefined || initialParamsFromParams !== undefined ? {\n        ...initialParams,\n        ...initialParamsFromParams\n      } : undefined;\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if ((currentState === undefined || !isStateValid(currentState)) && (route === null || route === void 0 ? void 0 : (_route$params4 = route.params) === null || _route$params4 === void 0 ? void 0 : _route$params4.state) == null) {\n      return [router.getInitialState({\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), true];\n    } else {\n      var _route$params5;\n      return [router.getRehydratedState((route === null || route === void 0 ? void 0 : (_route$params5 = route.params) === null || _route$params5 === void 0 ? void 0 : _route$params5.state) ?? currentState, {\n        routeNames,\n        routeParamList: initialRouteParamList,\n        routeGetIdList\n      }), false];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n  let state =\n  // If the state isn't initialized, or stale, use the state we initialized instead\n  // The state won't update until there's a change needed in the state we have initalized locally\n  // So it'll be `undefined` or stale until the first navigation event happens\n  isStateInitialized(currentState) ? currentState : initializedState;\n  let nextState = state;\n  if (!isArrayEqual(state.routeNames, routeNames) || !isRecordEqual(routeKeyList, previousRouteKeyList)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(name => previousRouteKeyList.hasOwnProperty(name) && routeKeyList[name] !== previousRouteKeyList[name])\n    });\n  }\n  const previousNestedParamsRef = React.useRef(route === null || route === void 0 ? void 0 : route.params);\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route === null || route === void 0 ? void 0 : route.params;\n  }, [route === null || route === void 0 ? void 0 : route.params]);\n  if (route !== null && route !== void 0 && route.params) {\n    const previousParams = previousNestedParamsRef.current;\n    let action;\n    if (typeof route.params.state === 'object' && route.params.state != null && route.params !== previousParams) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (typeof route.params.screen === 'string' && (route.params.initial === false && isFirstStateInitialization || route.params !== previousParams)) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action ? router.getStateForAction(nextState, action, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : null;\n    nextState = updatedState !== null ? router.getRehydratedState(updatedState, {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    }) : nextState;\n  }\n  const shouldUpdate = state !== nextState;\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n  React.useEffect(() => {\n    setKey(navigatorKey);\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      // We do it in a timeout because we need to detect if another navigator mounted in the meantime\n      // For example, if another navigator has started rendering, we should skip cleanup\n      // Otherwise, our cleanup step will cleanup state for the other navigator and re-initialize it\n      setTimeout(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          cleanUpState();\n        }\n      }, 0);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // We initialize this ref here to avoid a new getState getting initialized\n  // whenever initializedState changes. We want getState to have access to the\n  // latest initializedState, but don't need it to change when that happens\n  const initializedStateRef = React.useRef();\n  initializedStateRef.current = initializedState;\n  const getState = React.useCallback(() => {\n    const currentState = getCurrentState();\n    return isStateInitialized(currentState) ? currentState : initializedStateRef.current;\n  }, [getCurrentState, isStateInitialized]);\n  const emitter = useEventEmitter(e => {\n    let routeNames = [];\n    let route;\n    if (e.target) {\n      var _route;\n      route = state.routes.find(route => route.key === e.target);\n      if ((_route = route) !== null && _route !== void 0 && _route.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(...Object.keys(screens).filter(name => {\n        var _route2;\n        return ((_route2 = route) === null || _route2 === void 0 ? void 0 : _route2.name) === name;\n      }));\n    }\n    if (route == null) {\n      return;\n    }\n    const navigation = descriptors[route.key].navigation;\n    const listeners = [].concat(\n    // Get an array of listeners for all screens + common listeners on navigator\n    ...[screenListeners, ...routeNames.map(name => {\n      const {\n        listeners\n      } = screens[name].props;\n      return listeners;\n    })].map(listeners => {\n      const map = typeof listeners === 'function' ? listeners({\n        route: route,\n        navigation\n      }) : listeners;\n      return map ? Object.keys(map).filter(type => type === e.type).map(type => map === null || map === void 0 ? void 0 : map[type]) : undefined;\n    }))\n    // We don't want same listener to be called multiple times for same event\n    // So we remove any duplicate functions from the array\n    .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n    listeners.forEach(listener => listener === null || listener === void 0 ? void 0 : listener(e));\n  });\n  useFocusEvents({\n    state,\n    emitter\n  });\n  React.useEffect(() => {\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n  }, [emitter, state]);\n  const {\n    listeners: childListeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList\n    },\n    emitter\n  });\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route === null || route === void 0 ? void 0 : route.key,\n    getState,\n    setState\n  });\n  const navigation = useNavigationHelpers({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router\n  });\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus\n  });\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState\n  });\n  const descriptors = useDescriptors({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    defaultScreenOptions: options.defaultScreenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter\n  });\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors\n  });\n  const NavigationContent = useComponent(children => /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(PreventRemoveProvider, null, children)));\n  return {\n    state,\n    navigation,\n    descriptors,\n    NavigationContent\n  };\n}\n//# sourceMappingURL=useNavigationBuilder.js.map"]},"metadata":{},"sourceType":"module"}