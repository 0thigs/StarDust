{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useThenable(create) {\n  var _React$useState = React.useState(create),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      promise = _React$useState2[0];\n\n  var initialState = [false, undefined];\n  promise.then(function (result) {\n    initialState = [true, result];\n  });\n\n  var _React$useState3 = React.useState(initialState),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      state = _React$useState4[0],\n      setState = _React$useState4[1];\n\n  var _state = _slicedToArray(state, 1),\n      resolved = _state[0];\n\n  React.useEffect(function () {\n    var cancelled = false;\n\n    var resolve = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var result;\n\n        try {\n          result = yield promise;\n        } finally {\n          if (!cancelled) {\n            setState([true, result]);\n          }\n        }\n      });\n\n      return function resolve() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return function () {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":{"version":3,"sources":["useThenable.tsx"],"names":["React","useThenable","create","promise","useState","initialState","undefined","then","result","state","setState","resolved","useEffect","cancelled","resolve"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,eAAe,SAASC,WAAT,CAAwBC,MAAxB,EAAsD;EACnE,sBAAkBF,KAAK,CAACI,QAANJ,CAAeE,MAAfF,CAAlB;EAAA;EAAA,IAAOG,OAAP;;EAEA,IAAIE,YAAsC,GAAG,CAAC,KAAD,EAAQC,SAAR,CAA7C;EAGAH,OAAO,CAACI,IAARJ,CAAcK,UAAAA,MAAM,EAAK;IACvBH,YAAY,GAAG,CAAC,IAAD,EAAOG,MAAP,CAAfH;EACD,CAFDF;;EAIA,uBAA0BH,KAAK,CAACI,QAANJ,CAAeK,YAAfL,CAA1B;EAAA;EAAA,IAAOS,KAAP;EAAA,IAAcC,QAAd;;EACA,4BAAmBD,KAAnB;EAAA,IAAOE,QAAP;;EAEAX,KAAK,CAACY,SAANZ,CAAgB,YAAM;IACpB,IAAIa,SAAS,GAAG,KAAhB;;IAEA,IAAMC,OAAO;MAAA,6BAAG,aAAY;QAC1B,IAAIN,MAAJ;;QAEA,IAAI;UACFA,MAAM,SAASL,OAAfK;QACD,CAFD,SAEU;UACR,IAAI,CAACK,SAAL,EAAgB;YACdH,QAAQ,CAAC,CAAC,IAAD,EAAOF,MAAP,CAAD,CAARE;UACF;QACF;MACD,CAVY;;MAAA,gBAAPI,OAAO;QAAA;MAAA;IAAA,GAAb;;IAYA,IAAI,CAACH,QAAL,EAAe;MACbG,OAAO;IACT;;IAEA,OAAO,YAAM;MACXD,SAAS,GAAG,IAAZA;IACD,CAFD;EAGD,CAtBDb,EAsBG,CAACG,OAAD,EAAUQ,QAAV,CAtBHX;EAwBA,OAAOS,KAAP;AACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nexport default function useThenable(create) {\n  const [promise] = React.useState(create);\n  let initialState = [false, undefined];\n\n  // Check if our thenable is synchronous\n  promise.then(result => {\n    initialState = [true, result];\n  });\n  const [state, setState] = React.useState(initialState);\n  const [resolved] = state;\n  React.useEffect(() => {\n    let cancelled = false;\n    const resolve = async () => {\n      let result;\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n    if (!resolved) {\n      resolve();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}\n//# sourceMappingURL=useThenable.js.map"]},"metadata":{},"sourceType":"module"}