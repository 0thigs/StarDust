{"ast":null,"code":"import * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    _Dimensions$get$width = _Dimensions$get.width,\n    width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n    _Dimensions$get$heigh = _Dimensions$get.height,\n    height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\n\nvar initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  var children = _ref.children,\n      style = _ref.style;\n  return React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n    if (insets) {\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n\n    return React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["React","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","width","height","Dimensions","get","initialMetrics","Platform","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","children","style","styles","container","StyleSheet","create","flex"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AASA,SACEC,oBADF,EAEEC,qBAFF,EAGEC,gBAHF,QAIO,gCAJP;;AAWA,sBAAkCG,UAAU,CAACC,GAAXD,CAAe,QAAfA,CAAlC;AAAA,4CAAQF,KAAR;AAAA,IAAQA,KAAR,sCAAgB,CAAhB;AAAA,4CAAmBC,MAAnB;AAAA,IAAmBA,MAAnB,sCAA4B,CAA5B;;AAKA,IAAMG,cAAc,GAClBC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyBR,oBAAoB,IAAI,IAAjDQ,GACI;EACEE,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAL;IAAQC,CAAC,EAAE,CAAX;IAAcT,KAAK,EAALA,KAAd;IAAqBC,MAAAA,EAAAA;EAArB,CADT;EAEES,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAP;IAAUC,IAAI,EAAE,CAAhB;IAAmBC,KAAK,EAAE,CAA1B;IAA6BC,MAAM,EAAE;EAArC;AAFV,CADJT,GAKIR,oBANN;AAQA,eAAe,SAASkB,sBAAT,CAA+B,IAA/B,EAA4D;EAA5B,IAAEC,QAAF,GAA0B,IAA1B,CAAEA,QAAF;EAAA,IAAYC,KAAZ,GAA0B,IAA1B,CAAYA,KAAZ;EAC7C,OACE,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAC,QAAvB,EAA+B,IAA/B,EACIP,UAAAA,MAAM,EAAK;IACX,IAAIA,MAAJ,EAAY;MAIV,OAAO,KAAA,CAAA,aAAA,CAAC,IAAD,EAAK;QAAC,KAAK,EAAE,CAACQ,MAAM,CAACC,SAAR,EAAmBF,KAAnB;MAAR,CAAL,EAAyCD,QAAzC,CAAP;IACF;;IAEA,OACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAiB;MAAC,cAAc,EAAEZ,cAAjB;MAAiC,KAAK,EAAEa;IAAxC,CAAjB,EACGD,QADH,CADF;EAKD,CAdH,CADF;AAkBF;AAEAD,sBAAsB,CAACX,cAAvBW,GAAwCX,cAAxCW;AAEA,IAAMG,MAAM,GAAGE,UAAU,CAACC,MAAXD,CAAkB;EAC/BD,SAAS,EAAE;IACTG,IAAI,EAAE;EADG;AADoB,CAAlBF,CAAf","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { Dimensions, Platform, StyleSheet, View } from 'react-native';\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nconst {\n  width = 0,\n  height = 0\n} = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width,\n    height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport default function SafeAreaProviderCompat(_ref) {\n  let {\n    children,\n    style\n  } = _ref;\n  return /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return /*#__PURE__*/React.createElement(View, {\n        style: [styles.container, style]\n      }, children);\n    }\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialMetrics: initialMetrics,\n      style: style\n    }, children);\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=SafeAreaProviderCompat.js.map"]},"metadata":{},"sourceType":"module"}