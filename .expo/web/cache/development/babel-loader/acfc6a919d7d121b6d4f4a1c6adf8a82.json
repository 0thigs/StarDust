{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from \"./findFocusedRoute\";\nimport validatePathConfig from \"./validatePathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  var initialRoutes = [];\n\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n\n  var screens = options === null || options === void 0 ? void 0 : options.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : remaining + \"/\";\n\n  if (screens === undefined) {\n    var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n      var name = decodeURIComponent(segment);\n      return {\n        name: name\n      };\n    });\n\n    if (_routes.length) {\n      return createNestedStateObject(path, _routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(key, screens, [], initialRoutes, []);\n  }))).sort(function (a, b) {\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n\n    for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      if (aParts[i] == null) {\n        return 1;\n      }\n\n      if (bParts[i] == null) {\n        return -1;\n      }\n\n      var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n\n      if (aWildCard) {\n        return 1;\n      }\n\n      if (bWildCard) {\n        return -1;\n      }\n    }\n\n    return bParts.length - aParts.length;\n  });\n\n  configs.reduce(function (acc, config) {\n    if (acc[config.pattern]) {\n      var a = acc[config.pattern].routeNames;\n      var b = config.routeNames;\n      var intersects = a.length > b.length ? b.every(function (it, i) {\n        return a[i] === it;\n      }) : a.every(function (it, i) {\n        return b[i] === it;\n      });\n\n      if (!intersects) {\n        throw new Error(\"Found conflicting screens with the same pattern. The pattern '\" + config.pattern + \"' resolves to both '\" + a.join(' > ') + \"' and '\" + b.join(' > ') + \"'. Patterns must be unique and cannot resolve to more than one screen.\");\n      }\n    }\n\n    return Object.assign(acc, _defineProperty({}, config.pattern, config));\n  }, {});\n\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) !== null && _configs$find !== void 0 && _configs$find.path);\n      });\n    });\n\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(function (name) {\n        return {\n          name: name\n        };\n      }), initialRoutes, configs);\n    }\n\n    return undefined;\n  }\n\n  var result;\n  var current;\n\n  var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n    return _objectSpread(_objectSpread({}, c), {}, {\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    });\n  })),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n\n  if (routes !== undefined) {\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  return result;\n}\n\nvar joinPaths = function joinPaths() {\n  var _ref2;\n\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\n\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routes;\n  var remainingPath = remaining;\n\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n\n    var match = remainingPath.match(config.regex);\n\n    if (match) {\n      var matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      }).reduce(function (acc, p, i) {\n        return Object.assign(acc, _defineProperty({}, p, match[(i + 1) * 2].replace(/\\//, '')));\n      }, {});\n      routes = config.routeNames.map(function (name) {\n        var _config$path;\n\n        var config = configs.find(function (c) {\n          return c.screen === name;\n        });\n        var params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(function (p) {\n          return p.startsWith(':');\n        }).reduce(function (acc, p) {\n          var value = matchedParams[p];\n\n          if (value) {\n            var _config$parse;\n\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n\n        if (params && Object.keys(params).length) {\n          return {\n            name: name,\n            params: params\n          };\n        }\n\n        return {\n          name: name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n\n  for (var config of configs) {\n    var _config$pattern;\n\n    var _ret = _loop(config);\n\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n\n  return {\n    routes: routes,\n    remainingPath: remainingPath\n  };\n};\n\nvar createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n  var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var initials = arguments.length > 3 ? arguments[3] : undefined;\n  var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n  var config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern;\n\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n\n      _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens: parentScreens\n        });\n      }\n\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern2;\n\n        var result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nvar createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\" + pattern.split('/').map(function (it) {\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\" + (it.endsWith('?') ? '?' : '') + \")\";\n    }\n\n    return (it === '*' ? '.*' : escape(it)) + \"\\\\/\";\n  }).join('') + \")\") : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\n\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\nvar findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n  for (var config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      var sameParents = true;\n\n      for (var i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nvar createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, _objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    } else {\n      return {\n        routes: [_objectSpread(_objectSpread({}, route), {}, {\n          state: {\n            routes: []\n          }\n        })]\n      };\n    }\n  }\n};\n\nvar createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n  var state;\n  var route = routes.shift();\n  var parentScreens = [];\n  var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n\n  if (routes.length > 0) {\n    var nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n\n      parentScreens.push(route.name);\n    }\n  }\n\n  route = findFocusedRoute(state);\n  route.path = path;\n  var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return state;\n};\n\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","findFocusedRoute","validatePathConfig","getStateFromPath","path","options","initialRoutes","initialRouteName","push","parentScreens","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","name","decodeURIComponent","length","createNestedStateObject","configs","concat","Object","keys","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","i","Math","max","aWildCard","bWildCard","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","result","current","remainingPath","matchAgainstConfigs","regex","RegExp","source","joinPaths","paths","p","matchedParams","params","value","parse","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","findParseConfigForRoute","routeName","flatConfig","findInitialRoute","sameParents","createStateObject","initialRoute","route","isEmpty","index","state","shift","nestedState","nestedStateIndex","parseQueryParams","parseConfig","query","hasOwnProperty","call"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport findFocusedRoute from './findFocusedRoute';\nimport validatePathConfig from './validatePathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(path, options) {\n  if (options) {\n    validatePathConfig(options);\n  }\n  let initialRoutes = [];\n  if (options !== null && options !== void 0 && options.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: options.initialRouteName,\n      parentScreens: []\n    });\n  }\n  const screens = options === null || options === void 0 ? void 0 : options.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map(segment => {\n      const name = decodeURIComponent(segment);\n      return {\n        name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(path, routes, initialRoutes);\n    }\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(key, screens, [], initialRoutes, []))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n\n    // If 2 patterns are same, move the one with less route names up\n    // This is an error state, so it's only useful for consistent error messages\n    if (a.pattern === b.pattern) {\n      return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    }\n\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return -1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n      // if b is longer, b get higher priority\n      if (aParts[i] == null) {\n        return 1;\n      }\n      // if a is longer, a get higher priority\n      if (bParts[i] == null) {\n        return -1;\n      }\n      const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n      const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n      // if both are wildcard we compare next component\n      if (aWildCard && bWildCard) {\n        continue;\n      }\n      // if only a is wild card, b get higher priority\n      if (aWildCard) {\n        return 1;\n      }\n      // if only b is wild card, a get higher priority\n      if (bWildCard) {\n        return -1;\n      }\n    }\n    return bParts.length - aParts.length;\n  });\n\n  // Check for duplicate patterns in the config\n  configs.reduce((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects = a.length > b.length ? b.every((it, i) => a[i] === it) : a.every((it, i) => b[i] === it);\n      if (!intersects) {\n        throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n      }\n    }\n    return Object.assign(acc, {\n      [config.pattern]: config\n    });\n  }, {});\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every(\n    // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n      return !((_configs$find = configs.find(c => c.screen === name)) !== null && _configs$find !== void 0 && _configs$find.path);\n    }));\n    if (match) {\n      return createNestedStateObject(path, match.routeNames.map(name => ({\n        name\n      })), initialRoutes, configs);\n    }\n    return undefined;\n  }\n  let result;\n  let current;\n\n  // We match the whole path against the regex instead of segments\n  // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n  const {\n    routes,\n    remainingPath\n  } = matchAgainstConfigs(remaining, configs.map(c => ({\n    ...c,\n    // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n    regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n  })));\n  if (routes !== undefined) {\n    // This will always be empty if full path matched\n    current = createNestedStateObject(path, routes, initialRoutes, configs);\n    remaining = remainingPath;\n    result = current;\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  return result;\n}\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routes;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      var _config$pattern;\n      const matchedParams = (_config$pattern = config.pattern) === null || _config$pattern === void 0 ? void 0 : _config$pattern.split('/').filter(p => p.startsWith(':')).reduce((acc, p, i) => Object.assign(acc, {\n        // The param segments appear every second item starting from 2 in the regex match result\n        [p]: match[(i + 1) * 2].replace(/\\//, '')\n      }), {});\n      routes = config.routeNames.map(name => {\n        var _config$path;\n        const config = configs.find(c => c.screen === name);\n        const params = config === null || config === void 0 ? void 0 : (_config$path = config.path) === null || _config$path === void 0 ? void 0 : _config$path.split('/').filter(p => p.startsWith(':')).reduce((acc, p) => {\n          const value = matchedParams[p];\n          if (value) {\n            var _config$parse;\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            acc[key] = (_config$parse = config.parse) !== null && _config$parse !== void 0 && _config$parse[key] ? config.parse[key](value) : value;\n          }\n          return acc;\n        }, {});\n        if (params && Object.keys(params).length) {\n          return {\n            name,\n            params\n          };\n        }\n        return {\n          name\n        };\n      });\n      remainingPath = remainingPath.replace(match[1], '');\n      break;\n    }\n  }\n  return {\n    routes,\n    remainingPath\n  };\n};\nconst createNormalizedConfigs = function (screen, routeConfig) {\n  let routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let initials = arguments.length > 3 ? arguments[3] : undefined;\n  let parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n  let parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  const configs = [];\n  routeNames.push(screen);\n  parentScreens.push(screen);\n\n  // @ts-expect-error: we can't strongly typecheck this for now\n  const config = routeConfig[screen];\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (config.exact && config.path === undefined) {\n        throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n      }\n      pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      configs.push(createConfigItem(screen, routeNames, pattern, config.path, config.parse));\n    }\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          parentScreens\n        });\n      }\n      Object.keys(config.screens).forEach(nestedConfig => {\n        const result = createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, [...parentScreens], pattern ?? parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nconst createConfigItem = (screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(`^(${pattern.split('/').map(it => {\n    if (it.startsWith(':')) {\n      return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    }\n    return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n  }).join('')})`) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (routeName, parentScreens, initialRoutes) => {\n  for (const config of initialRoutes) {\n    if (parentScreens.length === config.parentScreens.length) {\n      let sameParents = true;\n      for (let i = 0; i < parentScreens.length; i++) {\n        if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n          sameParents = false;\n          break;\n        }\n      }\n      if (sameParents) {\n        return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n      }\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (initialRoute, route, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, route]\n      };\n    } else {\n      return {\n        routes: [route]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          ...route,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nconst createNestedStateObject = (path, routes, initialRoutes, flatConfig) => {\n  let state;\n  let route = routes.shift();\n  const parentScreens = [];\n  let initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n  parentScreens.push(route.name);\n  state = createStateObject(initialRoute, route, routes.length === 0);\n  if (routes.length > 0) {\n    let nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n      parentScreens.push(route.name);\n    }\n  }\n  route = findFocusedRoute(state);\n  route.path = path;\n  const params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n  if (params) {\n    route.params = {\n      ...route.params,\n      ...params\n    };\n  }\n  return state;\n};\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};\n//# sourceMappingURL=getStateFromPath.js.map"]},"metadata":{},"sourceType":"module"}