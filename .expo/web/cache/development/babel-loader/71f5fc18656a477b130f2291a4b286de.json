{"ast":null,"code":"'use strict';\n\nimport PressResponder from \"./PressResponder\";\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current;\n  useEffect(function () {\n    pressResponder.configure(config);\n  }, [config, pressResponder]);\n  useEffect(function () {\n    return function () {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}","map":{"version":3,"names":["PressResponder","useDebugValue","useEffect","useRef","usePressEvents","hostRef","config","pressResponderRef","current","pressResponder","configure","reset","getEventHandlers"],"sources":["/home/user/Documentos/code/JavaScript/ProjetosReactNative/StarDust/node_modules/react-native-web/dist/modules/usePressEvents/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport PressResponder from './PressResponder';\nimport { useDebugValue, useEffect, useRef } from 'react';\nexport default function usePressEvents(hostRef, config) {\n  var pressResponderRef = useRef(null);\n\n  if (pressResponderRef.current == null) {\n    pressResponderRef.current = new PressResponder(config);\n  }\n\n  var pressResponder = pressResponderRef.current; // Re-configure to use the current node and configuration.\n\n  useEffect(() => {\n    pressResponder.configure(config);\n  }, [config, pressResponder]); // Reset the `pressResponder` when cleanup needs to occur. This is\n  // a separate effect because we do not want to rest the responder when `config` changes.\n\n  useEffect(() => {\n    return () => {\n      pressResponder.reset();\n    };\n  }, [pressResponder]);\n  useDebugValue(config);\n  return pressResponder.getEventHandlers();\n}"],"mappings":"AASA;;AAEA,OAAOA,cAAP;AACA,SAASC,aAAT,EAAwBC,SAAxB,EAAmCC,MAAnC,QAAiD,OAAjD;AACA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;EACtD,IAAIC,iBAAiB,GAAGJ,MAAM,CAAC,IAAD,CAA9B;;EAEA,IAAII,iBAAiB,CAACC,OAAlB,IAA6B,IAAjC,EAAuC;IACrCD,iBAAiB,CAACC,OAAlB,GAA4B,IAAIR,cAAJ,CAAmBM,MAAnB,CAA5B;EACD;;EAED,IAAIG,cAAc,GAAGF,iBAAiB,CAACC,OAAvC;EAEAN,SAAS,CAAC,YAAM;IACdO,cAAc,CAACC,SAAf,CAAyBJ,MAAzB;EACD,CAFQ,EAEN,CAACA,MAAD,EAASG,cAAT,CAFM,CAAT;EAKAP,SAAS,CAAC,YAAM;IACd,OAAO,YAAM;MACXO,cAAc,CAACE,KAAf;IACD,CAFD;EAGD,CAJQ,EAIN,CAACF,cAAD,CAJM,CAAT;EAKAR,aAAa,CAACK,MAAD,CAAb;EACA,OAAOG,cAAc,CAACG,gBAAf,EAAP;AACD"},"metadata":{},"sourceType":"module"}