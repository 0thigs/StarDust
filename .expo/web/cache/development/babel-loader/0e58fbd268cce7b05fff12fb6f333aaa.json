{"ast":null,"code":"import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport LinkingContext from \"./LinkingContext\";\nimport useLinkTo from \"./useLinkTo\";\n\nvar getStateFromParams = function getStateFromParams(params) {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n\n  return undefined;\n};\n\nexport default function useLinkProps(_ref) {\n  var _ref2;\n\n  var to = _ref.to,\n      action = _ref.action;\n  var root = React.useContext(NavigationContainerRefContext);\n  var navigation = React.useContext(NavigationHelpersContext);\n\n  var _React$useContext = React.useContext(LinkingContext),\n      options = _React$useContext.options;\n\n  var linkTo = useLinkTo();\n\n  var onPress = function onPress(e) {\n    var _e$currentTarget;\n\n    var shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented && !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target)) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  var getPathFromStateHelper = (_ref2 = options === null || options === void 0 ? void 0 : options.getPathFromState) != null ? _ref2 : getPathFromState;\n  var href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      params: to.params,\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href: href,\n    accessibilityRole: 'link',\n    onPress: onPress\n  };\n}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"mappings":"AAAA,SACEA,gBADF,EAGEC,6BAHF,EAIEC,wBAJF,QAOO,wBAPP;AASA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAGA,OAAOC,cAAP;AACA,OAAOC,SAAP;;AAOA,IAAMC,kBAAkB,GACtBC,SADID,kBACJC,CAAAA,MAAyE,EACT;EAChE,IAAIA,MAAM,KAAA,IAANA,IAAAA,MAAM,KAAA,KAAA,CAANA,IAAAA,MAAM,CAAEC,KAAZ,EAAmB;IACjB,OAAOD,MAAM,CAACC,KAAd;EACF;;EAEA,IAAID,MAAM,KAAA,IAANA,IAAAA,MAAM,KAAA,KAAA,CAANA,IAAAA,MAAM,CAAEE,MAAZ,EAAoB;IAClB,OAAO;MACLC,MAAM,EAAE,CACN;QACEC,IAAI,EAAEJ,MAAM,CAACE,MADf;QAEEF,MAAM,EAAEA,MAAM,CAACA,MAFjB;QAIEC,KAAK,EAAED,MAAM,CAACE,MAAPF,GACHD,kBAAkB,CAChBC,MAAM,CAACA,MADS,CADfA,GAMHK;MAVN,CADM;IADH,CAAP;EAgBF;;EAEA,OAAOA,SAAP;AACD,CA3BD;;AAmCA,eAAe,SAASC,YAAT,CAAqB,IAArB,EAEqB;EAAA;;EAAlC,IAAEC,EAAF,GAAgC,IAAhC,CAAEA,EAAF;EAAA,IAAMC,MAAN,GAAgC,IAAhC,CAAMA,MAAN;EACA,IAAMC,IAAI,GAAGb,KAAK,CAACc,UAANd,CAAiBF,6BAAjBE,CAAb;EACA,IAAMe,UAAU,GAAGf,KAAK,CAACc,UAANd,CAAiBD,wBAAjBC,CAAnB;;EACA,wBAAoBA,KAAK,CAACc,UAANd,CAAiBC,cAAjBD,CAApB;EAAA,IAAQgB,OAAR,qBAAQA,OAAR;;EACA,IAAMC,MAAM,GAAGf,SAAS,EAAxB;;EAEA,IAAMgB,OAAO,GACXC,SADID,OACJC,CAAAA,CAA2E,EACxE;IAAA,IAAA,gBAAA;;IACH,IAAIC,YAAY,GAAG,KAAnB;;IAEA,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,IAAyB,CAACF,CAA9B,EAAiC;MAC/BC,YAAY,GAAGD,CAAC,GAAG,CAACA,CAAC,CAACI,gBAAN,GAAyB,IAAzCH;IACD,CAFD,MAEO,IACL,CAACD,CAAC,CAACI,gBAAH,IAEA,EAAEJ,CAAC,CAACK,OAAFL,IAAaA,CAAC,CAACM,MAAfN,IAAyBA,CAAC,CAACO,OAA3BP,IAAsCA,CAAC,CAACQ,QAA1C,CAFA,KAICR,CAAC,CAACS,MAAFT,IAAY,IAAZA,IAAoBA,CAAC,CAACS,MAAFT,KAAa,CAJlC,KAMA,CAACV,SAAD,EAAY,IAAZ,EAAkB,EAAlB,EAAsB,MAAtB,EAA8BoB,QAA9B,CAAsC,CAAA,gBAAA,GAACV,CAAC,CAACW,aAAH,MAAgB,IAAhB,IAAgB,gBAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAACX,gBAAAA,CAAiBY,MAAxD,CAPK,EAQL;MACAZ,CAAC,CAACa,cAAFb;MACAC,YAAY,GAAG,IAAfA;IACF;;IAEA,IAAIA,YAAJ,EAAkB;MAChB,IAAIR,MAAJ,EAAY;QACV,IAAIG,UAAJ,EAAgB;UACdA,UAAU,CAACkB,QAAXlB,CAAoBH,MAApBG;QACD,CAFD,MAEO,IAAIF,IAAJ,EAAU;UACfA,IAAI,CAACoB,QAALpB,CAAcD,MAAdC;QACD,CAFM,MAEA;UACL,MAAM,IAAIqB,KAAJ,CACJ,kFADI,CAAN;QAGF;MACD,CAVD,MAUO;QACLjB,MAAM,CAACN,EAAD,CAANM;MACF;IACF;EACD,CAnCD;;EAqCA,IAAMkB,sBAAsB,YAAG,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAEtC,gBAAZ,oBAAgCA,gBAA5D;EAEA,IAAMuC,IAAI,GACR,OAAOzB,EAAP,KAAc,QAAd,GACIA,EADJ,GAEIwB,sBAAsB,CACpB;IACE5B,MAAM,EAAE,CACN;MACEC,IAAI,EAAEG,EAAE,CAACL,MADX;MAGEF,MAAM,EAAEO,EAAE,CAACP,MAHb;MAKEC,KAAK,EAAEF,kBAAkB,CAACQ,EAAE,CAACP,MAAJ;IAL3B,CADM;EADV,CADoB,EAYpBY,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,GAAO,KAAA,CAAPA,GAAAA,OAAO,CAAEqB,MAZW,CAH5B;EAkBA,OAAO;IACLD,IAAI,EAAJA,IADK;IAELE,iBAAiB,EAAE,MAFd;IAGLpB,OAAAA,EAAAA;EAHK,CAAP;AAKF","sourceRoot":"../../src","sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps(_ref) {\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n  const onPress = e => {\n    var _e$currentTarget;\n    let shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented &&\n    // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n    // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) &&\n    // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  const getPathFromStateHelper = (options === null || options === void 0 ? void 0 : options.getPathFromState) ?? getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"module"}