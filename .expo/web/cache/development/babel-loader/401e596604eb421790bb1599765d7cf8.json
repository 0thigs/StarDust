{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useOnRouteFocus(_ref) {\n  var router = _ref.router,\n      getState = _ref.getState,\n      sourceRouteKey = _ref.key,\n      setState = _ref.setState;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onRouteFocusParent = _React$useContext.onRouteFocus;\n\n  return React.useCallback(function (key) {\n    var state = getState();\n    var result = router.getStateForRouteFocus(state, key);\n\n    if (result !== state) {\n      setState(result);\n    }\n\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","key","sourceRouteKey","setState","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"mappings":"AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,eAAT,CAAwB,IAAxB,EAKK;EALqD,IACvEC,MADuE,GAKvD,IALuD,CACvEA,MADuE;EAAA,IAEvEC,QAFuE,GAKvD,IALuD,CAEvEA,QAFuE;EAAA,IAGlEE,cAHkE,GAKvD,IALuD,CAGvED,GAHuE;EAAA,IAIvEE,QAJuE,GAKvD,IALuD,CAIvEA,QAJuE;;EAMvE,wBAA6CP,KAAK,CAACU,UAANV,CAC3CC,wBAD2CD,CAA7C;EAAA,IAAsBS,kBAAtB,qBAAQD,YAAR;;EAIA,OAAOR,KAAK,CAACW,WAANX,CACJK,UAAAA,GAAW,EAAK;IACf,IAAMO,KAAK,GAAGR,QAAQ,EAAtB;IACA,IAAMS,MAAM,GAAGV,MAAM,CAACW,qBAAPX,CAA6BS,KAA7BT,EAAoCE,GAApCF,CAAf;;IAEA,IAAIU,MAAM,KAAKD,KAAf,EAAsB;MACpBL,QAAQ,CAACM,MAAD,CAARN;IACF;;IAEA,IAAIE,kBAAkB,KAAKM,SAAvBN,IAAoCH,cAAc,KAAKS,SAA3D,EAAsE;MACpEN,kBAAkB,CAACH,cAAD,CAAlBG;IACF;EACD,CAZIT,EAaL,CAACI,QAAD,EAAWK,kBAAX,EAA+BN,MAA/B,EAAuCI,QAAvC,EAAiDD,cAAjD,CAbKN,CAAP;AAeF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus(_ref) {\n  let {\n    router,\n    getState,\n    key: sourceRouteKey,\n    setState\n  } = _ref;\n  const {\n    onRouteFocus: onRouteFocusParent\n  } = React.useContext(NavigationBuilderContext);\n  return React.useCallback(key => {\n    const state = getState();\n    const result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}\n//# sourceMappingURL=useOnRouteFocus.js.map"]},"metadata":{},"sourceType":"module"}