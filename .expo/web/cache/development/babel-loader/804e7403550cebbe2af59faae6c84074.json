{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { getPathFromState, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from \"./LinkingContext\";\n\nvar getRootStateForNavigate = function getRootStateForNavigate(navigation, state) {\n  var parent = navigation.getParent();\n\n  if (parent) {\n    var parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [_objectSpread(_objectSpread({}, parentState.routes[parentState.index]), {}, {\n        state: state\n      })]\n    });\n  }\n\n  return state;\n};\n\nexport default function useLinkBuilder() {\n  var navigation = React.useContext(NavigationHelpersContext);\n  var linking = React.useContext(LinkingContext);\n  var buildLink = React.useCallback(function (name, params) {\n    var options = linking.options;\n\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n\n    var state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    }) : {\n      index: 0,\n      routes: [{\n        name: name,\n        params: params\n      }]\n    };\n    var path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}","map":{"version":3,"sources":["useLinkBuilder.tsx"],"names":["getPathFromState","NavigationHelpersContext","React","LinkingContext","getRootStateForNavigate","navigation","state","parent","getParent","parentState","getState","index","routes","useLinkBuilder","useContext","linking","buildLink","useCallback","name","params","options","enabled","undefined","path","config"],"mappings":";;;;;;AAAA,SACEA,gBADF,EAGEC,wBAHF,QAMO,wBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,cAAP;;AAWA,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAC9BC,UAD8B,EAE9BC,KAF8B,EAGb;EACjB,IAAMC,MAAM,GAAGF,UAAU,CAACG,SAAXH,EAAf;;EAEA,IAAIE,MAAJ,EAAY;IACV,IAAME,WAAW,GAAGF,MAAM,CAACG,QAAPH,EAApB;IAEA,OAAOH,uBAAuB,CAACG,MAAD,EAAS;MACrCI,KAAK,EAAE,CAD8B;MAErCC,MAAM,EAAE,iCAEDH,WAAW,CAACG,MAAZH,CAAmBA,WAAW,CAACE,KAA/BF,CAFC;QAGJH,KAAK,EAAEA;MAHH;IAF6B,CAAT,CAA9B;EASF;;EAEA,OAAOA,KAAP;AACD,CArBD;;AA2BA,eAAe,SAASO,cAAT,GAA0B;EACvC,IAAMR,UAAU,GAAGH,KAAK,CAACY,UAANZ,CAAiBD,wBAAjBC,CAAnB;EACA,IAAMa,OAAO,GAAGb,KAAK,CAACY,UAANZ,CAAiBC,cAAjBD,CAAhB;EAEA,IAAMc,SAAS,GAAGd,KAAK,CAACe,WAANf,CAChB,UAACgB,IAAD,EAAeC,MAAf,EAAmC;IACjC,IAAQC,OAAR,GAAoBL,OAApB,CAAQK,OAAR;;IAEA,IAAI,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAEC,OAAT,MAAqB,KAAzB,EAAgC;MAC9B,OAAOC,SAAP;IACF;;IAEA,IAAMhB,KAAK,GAAGD,UAAU,GACpBD,uBAAuB,CAACC,UAAD,EAAa;MAClCM,KAAK,EAAE,CAD2B;MAElCC,MAAM,EAAE,CAAC;QAAEM,IAAI,EAAJA,IAAF;QAAQC,MAAAA,EAAAA;MAAR,CAAD;IAF0B,CAAb,CADH,GAOpB;MACER,KAAK,EAAE,CADT;MAEEC,MAAM,EAAE,CAAC;QAAEM,IAAI,EAAJA,IAAF;QAAQC,MAAAA,EAAAA;MAAR,CAAD;IAFV,CAPJ;IAYA,IAAMI,IAAI,GAAGH,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,IAAAA,OAAO,CAAEpB,gBAAToB,GACTA,OAAO,CAACpB,gBAARoB,CAAyBd,KAAzBc,EAAgCA,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,GAAO,KAAA,CAAPA,GAAAA,OAAO,CAAEI,MAAzCJ,CADSA,GAETpB,gBAAgB,CAACM,KAAD,EAAQc,OAAO,KAAA,IAAPA,IAAAA,OAAO,KAAA,KAAA,CAAPA,GAAO,KAAA,CAAPA,GAAAA,OAAO,CAAEI,MAAjB,CAFpB;IAIA,OAAOD,IAAP;EACD,CAzBerB,EA0BhB,CAACa,OAAD,EAAUV,UAAV,CA1BgBH,CAAlB;EA6BA,OAAOc,SAAP;AACF","sourceRoot":"../../src","sourcesContent":["import { getPathFromState, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nconst getRootStateForNavigate = (navigation, state) => {\n  const parent = navigation.getParent();\n  if (parent) {\n    const parentState = parent.getState();\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [{\n        ...parentState.routes[parentState.index],\n        state: state\n      }]\n    });\n  }\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n  const buildLink = React.useCallback((name, params) => {\n    const {\n      options\n    } = linking;\n    if ((options === null || options === void 0 ? void 0 : options.enabled) === false) {\n      return undefined;\n    }\n    const state = navigation ? getRootStateForNavigate(navigation, {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    }) :\n    // If we couldn't find a navigation object in context, we're at root\n    // So we'll construct a basic state object to use\n    {\n      index: 0,\n      routes: [{\n        name,\n        params\n      }]\n    };\n    const path = options !== null && options !== void 0 && options.getPathFromState ? options.getPathFromState(state, options === null || options === void 0 ? void 0 : options.config) : getPathFromState(state, options === null || options === void 0 ? void 0 : options.config);\n    return path;\n  }, [linking, navigation]);\n  return buildLink;\n}\n//# sourceMappingURL=useLinkBuilder.js.map"]},"metadata":{},"sourceType":"module"}