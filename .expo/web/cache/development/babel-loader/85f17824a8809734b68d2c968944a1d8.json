{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = function isActiveSignal(signal) {\n  return signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isButtonRole = function isButtonRole(element) {\n  return element.getAttribute('role') === 'button';\n};\n\nvar isPressStartSignal = function isPressStartSignal(signal) {\n  return signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n};\n\nvar isTerminalSignal = function isTerminalSignal(signal) {\n  return signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n};\n\nvar isValidKeyPress = function isValidKeyPress(event) {\n  var key = event.key,\n      target = event.target;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return key === 'Enter' || isSpacebar && role === 'button';\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450;\nvar DEFAULT_PRESS_DELAY_MS = 50;\n\nvar PressResponder = function () {\n  function PressResponder(config) {\n    _classCallCheck(this, PressResponder);\n\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  _createClass(PressResponder, [{\n    key: \"configure\",\n    value: function configure(config) {\n      this._config = config;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._cancelLongPressDelayTimeout();\n\n      this._cancelPressDelayTimeout();\n\n      this._cancelPressOutDelayTimeout();\n    }\n  }, {\n    key: \"getEventHandlers\",\n    value: function getEventHandlers() {\n      if (this._eventHandlers == null) {\n        this._eventHandlers = this._createEventHandlers();\n      }\n\n      return this._eventHandlers;\n    }\n  }, {\n    key: \"_createEventHandlers\",\n    value: function _createEventHandlers() {\n      var _this = this;\n\n      var start = function start(event, shouldDelay) {\n        event.persist();\n\n        _this._cancelPressOutDelayTimeout();\n\n        _this._longPressDispatched = false;\n        _this._selectionTerminated = false;\n        _this._touchState = NOT_RESPONDER;\n        _this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n        _this._receiveSignal(RESPONDER_GRANT, event);\n\n        var delayPressStart = normalizeDelay(_this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n        if (shouldDelay !== false && delayPressStart > 0) {\n          _this._pressDelayTimeout = setTimeout(function () {\n            _this._receiveSignal(DELAY, event);\n          }, delayPressStart);\n        } else {\n          _this._receiveSignal(DELAY, event);\n        }\n\n        var delayLongPress = normalizeDelay(_this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n        _this._longPressDelayTimeout = setTimeout(function () {\n          _this._handleLongPress(event);\n        }, delayLongPress + delayPressStart);\n      };\n\n      var end = function end(event) {\n        _this._receiveSignal(RESPONDER_RELEASE, event);\n      };\n\n      var keyupHandler = function keyupHandler(event) {\n        var onPress = _this._config.onPress;\n        var target = event.target;\n\n        if (_this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n          end(event);\n          document.removeEventListener('keyup', keyupHandler);\n          var role = target.getAttribute('role');\n          var elementType = target.tagName.toLowerCase();\n          var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n\n          if (onPress != null && !isNativeInteractiveElement) {\n            onPress(event);\n          }\n        }\n      };\n\n      return {\n        onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n          var disabled = _this._config.disabled;\n\n          if (disabled && isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n\n          if (disabled == null) {\n            return true;\n          }\n\n          return !disabled;\n        },\n        onKeyDown: function onKeyDown(event) {\n          var disabled = _this._config.disabled;\n          var key = event.key,\n              target = event.target;\n\n          if (!disabled && isValidKeyPress(event)) {\n            if (_this._touchState === NOT_RESPONDER) {\n              start(event, false);\n              document.addEventListener('keyup', keyupHandler);\n            }\n\n            var role = target.getAttribute('role');\n            var isSpacebarKey = key === ' ' || key === 'Spacebar';\n\n            var _isButtonRole = role === 'button' || role === 'menuitem';\n\n            if (isSpacebarKey && _isButtonRole) {\n              event.preventDefault();\n            }\n\n            event.stopPropagation();\n          }\n        },\n        onResponderGrant: function onResponderGrant(event) {\n          return start(event);\n        },\n        onResponderMove: function onResponderMove(event) {\n          if (_this._config.onPressMove != null) {\n            _this._config.onPressMove(event);\n          }\n\n          var touch = getTouchFromResponderEvent(event);\n\n          if (_this._touchActivatePosition != null) {\n            var deltaX = _this._touchActivatePosition.pageX - touch.pageX;\n            var deltaY = _this._touchActivatePosition.pageY - touch.pageY;\n\n            if (Math.hypot(deltaX, deltaY) > 10) {\n              _this._cancelLongPressDelayTimeout();\n            }\n          }\n        },\n        onResponderRelease: function onResponderRelease(event) {\n          return end(event);\n        },\n        onResponderTerminate: function onResponderTerminate(event) {\n          if (event.nativeEvent.type === 'selectionchange') {\n            _this._selectionTerminated = true;\n          }\n\n          _this._receiveSignal(RESPONDER_TERMINATED, event);\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n          var _this$_config = _this._config,\n              cancelable = _this$_config.cancelable,\n              disabled = _this$_config.disabled,\n              onLongPress = _this$_config.onLongPress;\n\n          if (!disabled && onLongPress != null && _this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n            return false;\n          }\n\n          if (cancelable == null) {\n            return true;\n          }\n\n          return cancelable;\n        },\n        onClick: function onClick(event) {\n          var _this$_config2 = _this._config,\n              disabled = _this$_config2.disabled,\n              onPress = _this$_config2.onPress;\n\n          if (!disabled) {\n            event.stopPropagation();\n\n            if (_this._longPressDispatched || _this._selectionTerminated) {\n              event.preventDefault();\n            } else if (onPress != null && event.altKey === false) {\n              onPress(event);\n            }\n          } else {\n            if (isButtonRole(event.currentTarget)) {\n              event.stopPropagation();\n            }\n          }\n        },\n        onContextMenu: function onContextMenu(event) {\n          var _this$_config3 = _this._config,\n              disabled = _this$_config3.disabled,\n              onLongPress = _this$_config3.onLongPress;\n\n          if (!disabled) {\n            if (onLongPress != null && _this._isPointerTouch && !event.defaultPrevented) {\n              event.preventDefault();\n              event.stopPropagation();\n            }\n          } else {\n            if (isButtonRole(event.currentTarget)) {\n              event.stopPropagation();\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"_receiveSignal\",\n    value: function _receiveSignal(signal, event) {\n      var prevState = this._touchState;\n      var nextState = null;\n\n      if (Transitions[prevState] != null) {\n        nextState = Transitions[prevState][signal];\n      }\n\n      if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n        return;\n      }\n\n      if (nextState == null || nextState === ERROR) {\n        console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n      } else if (prevState !== nextState) {\n        this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n        this._touchState = nextState;\n      }\n    }\n  }, {\n    key: \"_performTransitionSideEffects\",\n    value: function _performTransitionSideEffects(prevState, nextState, signal, event) {\n      var _this2 = this;\n\n      if (isTerminalSignal(signal)) {\n        setTimeout(function () {\n          _this2._isPointerTouch = false;\n        }, 0);\n        this._touchActivatePosition = null;\n\n        this._cancelLongPressDelayTimeout();\n      }\n\n      if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n        var onLongPress = this._config.onLongPress;\n\n        if (onLongPress != null && event.nativeEvent.key == null) {\n          onLongPress(event);\n          this._longPressDispatched = true;\n        }\n      }\n\n      var isPrevActive = isActiveSignal(prevState);\n      var isNextActive = isActiveSignal(nextState);\n\n      if (!isPrevActive && isNextActive) {\n        this._activate(event);\n      } else if (isPrevActive && !isNextActive) {\n        this._deactivate(event);\n      }\n\n      if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n        var _this$_config4 = this._config,\n            _onLongPress = _this$_config4.onLongPress,\n            onPress = _this$_config4.onPress;\n\n        if (onPress != null) {\n          var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n          if (!isPressCanceledByLongPress) {\n            if (!isNextActive && !isPrevActive) {\n              this._activate(event);\n\n              this._deactivate(event);\n            }\n          }\n        }\n      }\n\n      this._cancelPressDelayTimeout();\n    }\n  }, {\n    key: \"_activate\",\n    value: function _activate(event) {\n      var _this$_config5 = this._config,\n          onPressChange = _this$_config5.onPressChange,\n          onPressStart = _this$_config5.onPressStart;\n      var touch = getTouchFromResponderEvent(event);\n      this._touchActivatePosition = {\n        pageX: touch.pageX,\n        pageY: touch.pageY\n      };\n\n      if (onPressStart != null) {\n        onPressStart(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(true);\n      }\n    }\n  }, {\n    key: \"_deactivate\",\n    value: function _deactivate(event) {\n      var _this$_config6 = this._config,\n          onPressChange = _this$_config6.onPressChange,\n          onPressEnd = _this$_config6.onPressEnd;\n\n      function end() {\n        if (onPressEnd != null) {\n          onPressEnd(event);\n        }\n\n        if (onPressChange != null) {\n          onPressChange(false);\n        }\n      }\n\n      var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n      if (delayPressEnd > 0) {\n        this._pressOutDelayTimeout = setTimeout(function () {\n          end();\n        }, delayPressEnd);\n      } else {\n        end();\n      }\n    }\n  }, {\n    key: \"_handleLongPress\",\n    value: function _handleLongPress(event) {\n      if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n        this._receiveSignal(LONG_PRESS_DETECTED, event);\n      }\n    }\n  }, {\n    key: \"_cancelLongPressDelayTimeout\",\n    value: function _cancelLongPressDelayTimeout() {\n      if (this._longPressDelayTimeout != null) {\n        clearTimeout(this._longPressDelayTimeout);\n        this._longPressDelayTimeout = null;\n      }\n    }\n  }, {\n    key: \"_cancelPressDelayTimeout\",\n    value: function _cancelPressDelayTimeout() {\n      if (this._pressDelayTimeout != null) {\n        clearTimeout(this._pressDelayTimeout);\n        this._pressDelayTimeout = null;\n      }\n    }\n  }, {\n    key: \"_cancelPressOutDelayTimeout\",\n    value: function _cancelPressOutDelayTimeout() {\n      if (this._pressOutDelayTimeout != null) {\n        clearTimeout(this._pressOutDelayTimeout);\n        this._pressOutDelayTimeout = null;\n      }\n    }\n  }]);\n\n  return PressResponder;\n}();\n\nexport { PressResponder as default };\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}","map":{"version":3,"names":["DELAY","ERROR","LONG_PRESS_DETECTED","NOT_RESPONDER","RESPONDER_ACTIVE_LONG_PRESS_START","RESPONDER_ACTIVE_PRESS_START","RESPONDER_INACTIVE_PRESS_START","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","Transitions","Object","freeze","isActiveSignal","signal","isButtonRole","element","getAttribute","isPressStartSignal","isTerminalSignal","isValidKeyPress","event","key","target","role","isSpacebar","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_DELAY_MS","PressResponder","config","_eventHandlers","_isPointerTouch","_longPressDelayTimeout","_longPressDispatched","_pressDelayTimeout","_pressOutDelayTimeout","_touchState","configure","_config","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","_createEventHandlers","start","shouldDelay","persist","_selectionTerminated","nativeEvent","type","_receiveSignal","delayPressStart","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","end","keyupHandler","onPress","document","removeEventListener","elementType","tagName","toLowerCase","isNativeInteractiveElement","onStartShouldSetResponder","disabled","currentTarget","stopPropagation","onKeyDown","addEventListener","isSpacebarKey","_isButtonRole","preventDefault","onResponderGrant","onResponderMove","onPressMove","touch","getTouchFromResponderEvent","_touchActivatePosition","deltaX","pageX","deltaY","pageY","Math","hypot","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","_this$_config","cancelable","onLongPress","onClick","_this$_config2","altKey","onContextMenu","_this$_config3","defaultPrevented","prevState","nextState","console","error","_performTransitionSideEffects","isPrevActive","isNextActive","_activate","_deactivate","_this$_config4","_onLongPress","isPressCanceledByLongPress","_this$_config5","onPressChange","onPressStart","_this$_config6","onPressEnd","delayPressEnd","clearTimeout","delay","min","fallback","max","_event$nativeEvent","changedTouches","touches","length"],"sources":["/home/user/Documentos/code/JavaScript/ProjetosReactNative/StarDust/node_modules/react-native-web/dist/modules/usePressEvents/PressResponder.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nvar DELAY = 'DELAY';\nvar ERROR = 'ERROR';\nvar LONG_PRESS_DETECTED = 'LONG_PRESS_DETECTED';\nvar NOT_RESPONDER = 'NOT_RESPONDER';\nvar RESPONDER_ACTIVE_LONG_PRESS_START = 'RESPONDER_ACTIVE_LONG_PRESS_START';\nvar RESPONDER_ACTIVE_PRESS_START = 'RESPONDER_ACTIVE_PRESS_START';\nvar RESPONDER_INACTIVE_PRESS_START = 'RESPONDER_INACTIVE_PRESS_START';\nvar RESPONDER_GRANT = 'RESPONDER_GRANT';\nvar RESPONDER_RELEASE = 'RESPONDER_RELEASE';\nvar RESPONDER_TERMINATED = 'RESPONDER_TERMINATED';\nvar Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: ERROR,\n    RESPONDER_TERMINATED: ERROR,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_INACTIVE_PRESS_START: {\n    DELAY: RESPONDER_ACTIVE_PRESS_START,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: ERROR\n  },\n  RESPONDER_ACTIVE_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_START: {\n    DELAY: ERROR,\n    RESPONDER_GRANT: ERROR,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: RESPONDER_ACTIVE_LONG_PRESS_START\n  },\n  ERROR: {\n    DELAY: NOT_RESPONDER,\n    RESPONDER_GRANT: RESPONDER_INACTIVE_PRESS_START,\n    RESPONDER_RELEASE: NOT_RESPONDER,\n    RESPONDER_TERMINATED: NOT_RESPONDER,\n    LONG_PRESS_DETECTED: NOT_RESPONDER\n  }\n});\n\nvar isActiveSignal = signal => signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n\nvar isButtonRole = element => element.getAttribute('role') === 'button';\n\nvar isPressStartSignal = signal => signal === RESPONDER_INACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_PRESS_START || signal === RESPONDER_ACTIVE_LONG_PRESS_START;\n\nvar isTerminalSignal = signal => signal === RESPONDER_TERMINATED || signal === RESPONDER_RELEASE;\n\nvar isValidKeyPress = event => {\n  var key = event.key,\n      target = event.target;\n  var role = target.getAttribute('role');\n  var isSpacebar = key === ' ' || key === 'Spacebar';\n  return key === 'Enter' || isSpacebar && role === 'button';\n};\n\nvar DEFAULT_LONG_PRESS_DELAY_MS = 450; // 500 - 50\n\nvar DEFAULT_PRESS_DELAY_MS = 50;\n/**\n * =========================== PressResponder Tutorial ===========================\n *\n * The `PressResponder` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `PressResponder`, do the following:\n *\n *     const pressResponder = new PressResponder(config);\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressResponder.getEventHandlers()} />\n *    );\n *\n * 3. Reset `PressResponder` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressResponder.reset();\n *    }\n *\n * ==================== Implementation Details ====================\n *\n * `PressResponder` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`.\n *  │  │  ┌────────────┐  │  │\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates.\n *  │  └──────────────────┘  │\n *  │       Out Region   o   │\n *  └────────────────────│───┘\n *                       └────── When the press is released outside the `HitRect`,\n *                               the responder is NOT eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_START         ├────────▶ │ PRESS_START       ├────────────▶ │ LONG_PRESS_START  │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onLongPress`. Only when the browser produces a\n * `click` event is `onPress` invoked.\n */\n\nexport default class PressResponder {\n  constructor(config) {\n    this._eventHandlers = null;\n    this._isPointerTouch = false;\n    this._longPressDelayTimeout = null;\n    this._longPressDispatched = false;\n    this._pressDelayTimeout = null;\n    this._pressOutDelayTimeout = null;\n    this._touchState = NOT_RESPONDER;\n    this.configure(config);\n  }\n\n  configure(config) {\n    this._config = config;\n  }\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n\n\n  reset() {\n    this._cancelLongPressDelayTimeout();\n\n    this._cancelPressDelayTimeout();\n\n    this._cancelPressOutDelayTimeout();\n  }\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n\n\n  getEventHandlers() {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n\n    return this._eventHandlers;\n  }\n\n  _createEventHandlers() {\n    var start = (event, shouldDelay) => {\n      event.persist();\n\n      this._cancelPressOutDelayTimeout();\n\n      this._longPressDispatched = false;\n      this._selectionTerminated = false;\n      this._touchState = NOT_RESPONDER;\n      this._isPointerTouch = event.nativeEvent.type === 'touchstart';\n\n      this._receiveSignal(RESPONDER_GRANT, event);\n\n      var delayPressStart = normalizeDelay(this._config.delayPressStart, 0, DEFAULT_PRESS_DELAY_MS);\n\n      if (shouldDelay !== false && delayPressStart > 0) {\n        this._pressDelayTimeout = setTimeout(() => {\n          this._receiveSignal(DELAY, event);\n        }, delayPressStart);\n      } else {\n        this._receiveSignal(DELAY, event);\n      }\n\n      var delayLongPress = normalizeDelay(this._config.delayLongPress, 10, DEFAULT_LONG_PRESS_DELAY_MS);\n      this._longPressDelayTimeout = setTimeout(() => {\n        this._handleLongPress(event);\n      }, delayLongPress + delayPressStart);\n    };\n\n    var end = event => {\n      this._receiveSignal(RESPONDER_RELEASE, event);\n    };\n\n    var keyupHandler = event => {\n      var onPress = this._config.onPress;\n      var target = event.target;\n\n      if (this._touchState !== NOT_RESPONDER && isValidKeyPress(event)) {\n        end(event);\n        document.removeEventListener('keyup', keyupHandler);\n        var role = target.getAttribute('role');\n        var elementType = target.tagName.toLowerCase();\n        var isNativeInteractiveElement = role === 'link' || elementType === 'a' || elementType === 'button' || elementType === 'input' || elementType === 'select' || elementType === 'textarea';\n\n        if (onPress != null && !isNativeInteractiveElement) {\n          onPress(event);\n        }\n      }\n    };\n\n    return {\n      onStartShouldSetResponder: event => {\n        var disabled = this._config.disabled;\n\n        if (disabled && isButtonRole(event.currentTarget)) {\n          event.stopPropagation();\n        }\n\n        if (disabled == null) {\n          return true;\n        }\n\n        return !disabled;\n      },\n      onKeyDown: event => {\n        var disabled = this._config.disabled;\n        var key = event.key,\n            target = event.target;\n\n        if (!disabled && isValidKeyPress(event)) {\n          if (this._touchState === NOT_RESPONDER) {\n            start(event, false); // Listen to 'keyup' on document to account for situations where\n            // focus is moved to another element during 'keydown'.\n\n            document.addEventListener('keyup', keyupHandler);\n          }\n\n          var role = target.getAttribute('role');\n          var isSpacebarKey = key === ' ' || key === 'Spacebar';\n\n          var _isButtonRole = role === 'button' || role === 'menuitem';\n\n          if (isSpacebarKey && _isButtonRole) {\n            // Prevent spacebar scrolling the window\n            event.preventDefault();\n          }\n\n          event.stopPropagation();\n        }\n      },\n      onResponderGrant: event => start(event),\n      onResponderMove: event => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n\n        var touch = getTouchFromResponderEvent(event);\n\n        if (this._touchActivatePosition != null) {\n          var deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          var deltaY = this._touchActivatePosition.pageY - touch.pageY;\n\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n      },\n      onResponderRelease: event => end(event),\n      onResponderTerminate: event => {\n        if (event.nativeEvent.type === 'selectionchange') {\n          this._selectionTerminated = true;\n        }\n\n        this._receiveSignal(RESPONDER_TERMINATED, event);\n      },\n      onResponderTerminationRequest: event => {\n        var _this$_config = this._config,\n            cancelable = _this$_config.cancelable,\n            disabled = _this$_config.disabled,\n            onLongPress = _this$_config.onLongPress; // If `onLongPress` is provided, don't terminate on `contextmenu` as default\n        // behavior will be prevented for non-mouse pointers.\n\n        if (!disabled && onLongPress != null && this._isPointerTouch && event.nativeEvent.type === 'contextmenu') {\n          return false;\n        }\n\n        if (cancelable == null) {\n          return true;\n        }\n\n        return cancelable;\n      },\n      // NOTE: this diverges from react-native in 3 significant ways:\n      // * The `onPress` callback is not connected to the responder system (the native\n      //  `click` event must be used but is dispatched in many scenarios where no pointers\n      //   are on the screen.) Therefore, it's possible for `onPress` to be called without\n      //   `onPress{Start,End}` being called first.\n      // * The `onPress` callback is only be called on the first ancestor of the native\n      //   `click` target that is using the PressResponder.\n      // * The event's `nativeEvent` is a `MouseEvent` not a `TouchEvent`.\n      onClick: event => {\n        var _this$_config2 = this._config,\n            disabled = _this$_config2.disabled,\n            onPress = _this$_config2.onPress;\n\n        if (!disabled) {\n          // If long press dispatched, cancel default click behavior.\n          // If the responder terminated because text was selected during the gesture,\n          // cancel the default click behavior.\n          event.stopPropagation();\n\n          if (this._longPressDispatched || this._selectionTerminated) {\n            event.preventDefault();\n          } else if (onPress != null && event.altKey === false) {\n            onPress(event);\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      },\n      // If `onLongPress` is provided and a touch pointer is being used, prevent the\n      // default context menu from opening.\n      onContextMenu: event => {\n        var _this$_config3 = this._config,\n            disabled = _this$_config3.disabled,\n            onLongPress = _this$_config3.onLongPress;\n\n        if (!disabled) {\n          if (onLongPress != null && this._isPointerTouch && !event.defaultPrevented) {\n            event.preventDefault();\n            event.stopPropagation();\n          }\n        } else {\n          if (isButtonRole(event.currentTarget)) {\n            event.stopPropagation();\n          }\n        }\n      }\n    };\n  }\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n\n\n  _receiveSignal(signal, event) {\n    var prevState = this._touchState;\n    var nextState = null;\n\n    if (Transitions[prevState] != null) {\n      nextState = Transitions[prevState][signal];\n    }\n\n    if (this._touchState === NOT_RESPONDER && signal === RESPONDER_RELEASE) {\n      return;\n    }\n\n    if (nextState == null || nextState === ERROR) {\n      console.error(\"PressResponder: Invalid signal \" + signal + \" for state \" + prevState + \" on responder\");\n    } else if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n\n      this._touchState = nextState;\n    }\n  }\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n\n\n  _performTransitionSideEffects(prevState, nextState, signal, event) {\n    if (isTerminalSignal(signal)) {\n      // Pressable suppression of contextmenu on windows.\n      // On Windows, the contextmenu is displayed after pointerup.\n      // https://github.com/necolas/react-native-web/issues/2296\n      setTimeout(() => {\n        this._isPointerTouch = false;\n      }, 0);\n      this._touchActivatePosition = null;\n\n      this._cancelLongPressDelayTimeout();\n    }\n\n    if (isPressStartSignal(prevState) && signal === LONG_PRESS_DETECTED) {\n      var onLongPress = this._config.onLongPress; // Long press is not supported for keyboards because 'click' can be dispatched\n      // immediately (and multiple times) after 'keydown'.\n\n      if (onLongPress != null && event.nativeEvent.key == null) {\n        onLongPress(event);\n        this._longPressDispatched = true;\n      }\n    }\n\n    var isPrevActive = isActiveSignal(prevState);\n    var isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressStartSignal(prevState) && signal === RESPONDER_RELEASE) {\n      var _this$_config4 = this._config,\n          _onLongPress = _this$_config4.onLongPress,\n          onPress = _this$_config4.onPress;\n\n      if (onPress != null) {\n        var isPressCanceledByLongPress = _onLongPress != null && prevState === RESPONDER_ACTIVE_LONG_PRESS_START;\n\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n\n            this._deactivate(event);\n          }\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event) {\n    var _this$_config5 = this._config,\n        onPressChange = _this$_config5.onPressChange,\n        onPressStart = _this$_config5.onPressStart;\n    var touch = getTouchFromResponderEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY\n    };\n\n    if (onPressStart != null) {\n      onPressStart(event);\n    }\n\n    if (onPressChange != null) {\n      onPressChange(true);\n    }\n  }\n\n  _deactivate(event) {\n    var _this$_config6 = this._config,\n        onPressChange = _this$_config6.onPressChange,\n        onPressEnd = _this$_config6.onPressEnd;\n\n    function end() {\n      if (onPressEnd != null) {\n        onPressEnd(event);\n      }\n\n      if (onPressChange != null) {\n        onPressChange(false);\n      }\n    }\n\n    var delayPressEnd = normalizeDelay(this._config.delayPressEnd);\n\n    if (delayPressEnd > 0) {\n      this._pressOutDelayTimeout = setTimeout(() => {\n        end();\n      }, delayPressEnd);\n    } else {\n      end();\n    }\n  }\n\n  _handleLongPress(event) {\n    if (this._touchState === RESPONDER_ACTIVE_PRESS_START || this._touchState === RESPONDER_ACTIVE_LONG_PRESS_START) {\n      this._receiveSignal(LONG_PRESS_DETECTED, event);\n    }\n  }\n\n  _cancelLongPressDelayTimeout() {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout() {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout() {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n\n}\n\nfunction normalizeDelay(delay, min, fallback) {\n  if (min === void 0) {\n    min = 0;\n  }\n\n  if (fallback === void 0) {\n    fallback = 0;\n  }\n\n  return Math.max(min, delay !== null && delay !== void 0 ? delay : fallback);\n}\n\nfunction getTouchFromResponderEvent(event) {\n  var _event$nativeEvent = event.nativeEvent,\n      changedTouches = _event$nativeEvent.changedTouches,\n      touches = _event$nativeEvent.touches;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n\n  return event.nativeEvent;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}