{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\"];\nimport * as React from 'react';\nexport var CHILD_STATE = Symbol('CHILD_STATE');\nexport default function useRouteCache(routes) {\n  var cache = React.useMemo(function () {\n    return {\n      current: new Map()\n    };\n  }, []);\n\n  if (process.env.NODE_ENV === 'production') {\n    return routes;\n  }\n\n  cache.current = routes.reduce(function (acc, route) {\n    var previous = cache.current.get(route);\n\n    if (previous) {\n      acc.set(route, previous);\n    } else {\n      var state = route.state,\n          proxy = _objectWithoutProperties(route, _excluded);\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}","map":{"version":3,"sources":["useRouteCache.tsx"],"names":["React","CHILD_STATE","Symbol","useRouteCache","routes","cache","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","state","proxy","Object","defineProperty","enumerable","value","Array","from","values"],"mappings":";;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAWA,OAAO,IAAMC,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;AAMP,eAAe,SAASC,aAAT,CACbC,MADa,EAEb;EAEA,IAAMC,KAAK,GAAGL,KAAK,CAACM,OAANN,CAAc;IAAA,OAAO;MAAEO,OAAO,EAAE,IAAIC,GAAJ;IAAX,CAAP;EAAA,CAAdR,EAA4D,EAA5DA,CAAd;;EAEA,IAAIS,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;IAEzC,OAAOL,MAAP;EACF;;EAEAC,KAAK,CAACE,OAANF,GAAgBD,MAAM,CAACQ,MAAPR,CAAc,UAACS,GAAD,EAAMC,KAAN,EAAgB;IAC5C,IAAMC,QAAQ,GAAGV,KAAK,CAACE,OAANF,CAAcW,GAAdX,CAAkBS,KAAlBT,CAAjB;;IAEA,IAAIU,QAAJ,EAAc;MAEZF,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeE,QAAfF;IACD,CAHD,MAGO;MACL,IAAQK,KAAR,GAA4BJ,KAA5B,CAAQI,KAAR;MAAA,IAAkBC,KAAlB,4BAA4BL,KAA5B;;MAEAM,MAAM,CAACC,cAAPD,CAAsBD,KAAtBC,EAA6BnB,WAA7BmB,EAA0C;QACxCE,UAAU,EAAE,KAD4B;QAExCC,KAAK,EAAEL;MAFiC,CAA1CE;MAKAP,GAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeM,KAAfN;IACF;;IAEA,OAAOA,GAAP;EACD,CAlBeT,EAkBb,IAAII,GAAJ,EAlBaJ,CAAhBC;EAoBA,OAAOmB,KAAK,CAACC,IAAND,CAAWnB,KAAK,CAACE,OAANF,CAAcqB,MAAdrB,EAAXmB,CAAP;AACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache(routes) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({\n    current: new Map()\n  }), []);\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const {\n        state,\n        ...proxy\n      } = route;\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state\n      });\n      acc.set(route, proxy);\n    }\n    return acc;\n  }, new Map());\n  return Array.from(cache.current.values());\n}\n//# sourceMappingURL=useRouteCache.js.map"]},"metadata":{},"sourceType":"module"}