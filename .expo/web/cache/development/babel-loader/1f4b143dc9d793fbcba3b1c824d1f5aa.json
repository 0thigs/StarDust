{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from \"./createMemoryHistory\";\nimport ServerContext from \"./ServerContext\";\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n\n  var callback = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        if (handling) {\n          queue.unshift(callback);\n          return;\n        }\n\n        handling = true;\n        yield cb();\n      } finally {\n        handling = false;\n\n        if (queue.length) {\n          var last = queue.pop();\n          last === null || last === void 0 ? void 0 : last();\n        }\n      }\n    });\n\n    return function callback() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return callback;\n};\n\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  var independent = _ref.independent,\n      _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      config = _ref.config,\n      _ref$getStateFromPath = _ref.getStateFromPath,\n      getStateFromPath = _ref$getStateFromPath === void 0 ? getStateFromPathDefault : _ref$getStateFromPath,\n      _ref$getPathFromState = _ref.getPathFromState,\n      getPathFromState = _ref$getPathFromState === void 0 ? getPathFromStateDefault : _ref$getPathFromState,\n      _ref$getActionFromSta = _ref.getActionFromState,\n      getActionFromState = _ref$getActionFromSta === void 0 ? getActionFromStateDefault : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    var handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  var _React$useState = React.useState(createMemoryHistory),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n\n    if (enabledRef.current) {\n      var _ref3;\n\n      var _location = (_ref3 = server === null || server === void 0 ? void 0 : server.location) != null ? _ref3 : typeof window !== 'undefined' ? window.location : undefined;\n\n      var path = _location ? _location.pathname + _location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n\n      var navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          var focusedRoute = findFocusedRoute(stateForPath);\n\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      var state = ref.current.getRootState();\n\n      if (state) {\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n\n    var onStateChange = function () {\n      var _ref4 = _asyncToGenerator(function* () {\n        var navigation = ref.current;\n\n        if (!navigation || !enabled) {\n          return;\n        }\n\n        var previousState = previousStateRef.current;\n        var state = navigation.getRootState();\n\n        if (!state) {\n          return;\n        }\n\n        var pendingPath = pendingPopStatePathRef.current;\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n        previousStateRef.current = state;\n        pendingPopStatePathRef.current = undefined;\n\n        var _findMatchingState = findMatchingState(previousState, state),\n            _findMatchingState2 = _slicedToArray(_findMatchingState, 2),\n            previousFocusedState = _findMatchingState2[0],\n            focusedState = _findMatchingState2[1];\n\n        if (previousFocusedState && focusedState && path !== pendingPath) {\n          var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n          if (historyDelta > 0) {\n            history.push({\n              path: path,\n              state: state\n            });\n          } else if (historyDelta < 0) {\n            var nextIndex = history.backIndex({\n              path: path\n            });\n            var currentIndex = history.index;\n\n            try {\n              if (nextIndex !== -1 && nextIndex < currentIndex) {\n                yield history.go(nextIndex - currentIndex);\n              } else {\n                yield history.go(historyDelta);\n              }\n\n              history.replace({\n                path: path,\n                state: state\n              });\n            } catch (e) {}\n          } else {\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        } else {\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      });\n\n      return function onStateChange() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","React","createMemoryHistory","ServerContext","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","unshift","last","pop","linkingHandlers","useLinking","ref","independent","enabled","config","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"mappings":";;AAAA,SACEA,gBADF,EAEEC,kBAAkB,IAAIC,yBAFxB,EAGEC,gBAAgB,IAAIC,uBAHtB,EAIEC,gBAAgB,IAAIC,uBAJtB,QAQO,wBARP;AASA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,mBAAP;AACA,OAAOC,aAAP;;AASA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,CADwB,EAExBC,CAFwB,EAGW;EACnC,IAAID,CAAC,KAAKE,SAANF,IAAmBC,CAAC,KAAKC,SAAzBF,IAAsCA,CAAC,CAACG,GAAFH,KAAUC,CAAC,CAACE,GAAtD,EAA2D;IACzD,OAAO,CAACD,SAAD,EAAYA,SAAZ,CAAP;EACF;;EAGA,IAAME,cAAc,GAAGJ,CAAC,CAACK,OAAFL,GAAYA,CAAC,CAACK,OAAFL,CAAUM,MAAtBN,GAA+BA,CAAC,CAACO,MAAFP,CAASM,MAA/D;EACA,IAAME,cAAc,GAAGP,CAAC,CAACI,OAAFJ,GAAYA,CAAC,CAACI,OAAFJ,CAAUK,MAAtBL,GAA+BA,CAAC,CAACM,MAAFN,CAASK,MAA/D;EAEA,IAAMG,MAAM,GAAGT,CAAC,CAACO,MAAFP,CAASA,CAAC,CAACU,KAAXV,CAAf;EACA,IAAMW,MAAM,GAAGV,CAAC,CAACM,MAAFN,CAASA,CAAC,CAACS,KAAXT,CAAf;EAEA,IAAMW,WAAW,GAAGH,MAAM,CAACI,KAA3B;EACA,IAAMC,WAAW,GAAGH,MAAM,CAACE,KAA3B;;EAOA,IACET,cAAc,KAAKI,cAAnBJ,IACAK,MAAM,CAACN,GAAPM,KAAeE,MAAM,CAACR,GADtBC,IAEAQ,WAAW,KAAKV,SAFhBE,IAGAU,WAAW,KAAKZ,SAHhBE,IAIAQ,WAAW,CAACT,GAAZS,KAAoBE,WAAW,CAACX,GALlC,EAME;IACA,OAAO,CAACH,CAAD,EAAIC,CAAJ,CAAP;EACF;;EAEA,OAAOF,iBAAiB,CAACa,WAAD,EAAcE,WAAd,CAAxB;AACD,CAlCD;;AAuCA,IAAMC,MAAM,GAAIC,SAAVD,MAAUC,CAAAA,EAAuB,EAAK;EAE1C,IAAIC,QAAQ,GAAG,KAAf;EACA,IAAIC,KAA8B,GAAG,EAArC;;EAEA,IAAMC,QAAQ;IAAA,8BAAG,aAAY;MAC3B,IAAI;QACF,IAAIF,QAAJ,EAAc;UAGZC,KAAK,CAACE,OAANF,CAAcC,QAAdD;UACA;QACF;;QAEAD,QAAQ,GAAG,IAAXA;QAEA,MAAMD,EAAE,EAAR;MACD,CAXD,SAWU;QACRC,QAAQ,GAAG,KAAXA;;QAEA,IAAIC,KAAK,CAACZ,MAAV,EAAkB;UAEhB,IAAMe,IAAI,GAAGH,KAAK,CAACI,GAANJ,EAAb;UAEAG,IAAI,KAAA,IAAJA,IAAAA,IAAI,KAAA,KAAA,CAAJA,GAAI,KAAA,CAAJA,GAAAA,IAAI,EAAJA;QACF;MACF;IACD,CAtBa;;IAAA,gBAARF,QAAQ;MAAA;IAAA;EAAA,GAAd;;EAwBA,OAAOA,QAAP;AACD,CA9BD;;AAgCA,IAAII,eAAyB,GAAG,EAAhC;AAMA,eAAe,SAASC,UAAT,CACbC,GADa,EAC8C,IAD9C,EAUb;EARA,IACEC,WADF,GAOU,IAPV,CACEA,WADF;EAAA,mBAOU,IAPV,CAEEC,OAFF;EAAA,IAEEA,OAFF,6BAEY,IAFZ;EAAA,IAGEC,MAHF,GAOU,IAPV,CAGEA,MAHF;EAAA,4BAOU,IAPV,CAIEnC,gBAJF;EAAA,IAIEA,gBAJF,sCAIqBC,uBAJrB;EAAA,4BAOU,IAPV,CAKEH,gBALF;EAAA,IAKEA,gBALF,sCAKqBC,uBALrB;EAAA,4BAOU,IAPV,CAMEH,kBANF;EAAA,IAMEA,kBANF,sCAMuBC,yBANvB;EASAM,KAAK,CAACiC,SAANjC,CAAgB,YAAM;IACpB,IAAIkC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;MACzC,OAAO5B,SAAP;IACF;;IAEA,IAAIwB,WAAJ,EAAiB;MACf,OAAOxB,SAAP;IACF;;IAEA,IAAIyB,OAAO,KAAK,KAAZA,IAAqBJ,eAAe,CAACjB,MAAzC,EAAiD;MAC/C2B,OAAO,CAACC,KAARD,CACE,CACE,6KADF,EAEE,uFAFF,EAGE,4DAHF,EAKGE,IALH,CAKQ,IALR,EAMGC,IANH,EADFH;IASF;;IAEA,IAAMI,OAAO,GAAGC,MAAM,EAAtB;;IAEA,IAAIX,OAAO,KAAK,KAAhB,EAAuB;MACrBJ,eAAe,CAACgB,IAAhBhB,CAAqBc,OAArBd;IACF;;IAEA,OAAO,YAAM;MACX,IAAMb,KAAK,GAAGa,eAAe,CAACiB,OAAhBjB,CAAwBc,OAAxBd,CAAd;;MAEA,IAAIb,KAAK,GAAG,CAAC,CAAb,EAAgB;QACda,eAAe,CAACkB,MAAhBlB,CAAuBb,KAAvBa,EAA8B,CAA9BA;MACF;IACD,CAND;EAOD,CAlCD3B,EAkCG,CAAC+B,OAAD,EAAUD,WAAV,CAlCH9B;;EAoCA,sBAAkBA,KAAK,CAAC8C,QAAN9C,CAAeC,mBAAfD,CAAlB;EAAA;EAAA,IAAOS,OAAP;;EAKA,IAAMsC,UAAU,GAAG/C,KAAK,CAACgD,MAANhD,CAAa+B,OAAb/B,CAAnB;EACA,IAAMiD,SAAS,GAAGjD,KAAK,CAACgD,MAANhD,CAAagC,MAAbhC,CAAlB;EACA,IAAMkD,mBAAmB,GAAGlD,KAAK,CAACgD,MAANhD,CAAaH,gBAAbG,CAA5B;EACA,IAAMmD,mBAAmB,GAAGnD,KAAK,CAACgD,MAANhD,CAAaL,gBAAbK,CAA5B;EACA,IAAMoD,qBAAqB,GAAGpD,KAAK,CAACgD,MAANhD,CAAaP,kBAAbO,CAA9B;EAEAA,KAAK,CAACiC,SAANjC,CAAgB,YAAM;IACpB+C,UAAU,CAACM,OAAXN,GAAqBhB,OAArBgB;IACAE,SAAS,CAACI,OAAVJ,GAAoBjB,MAApBiB;IACAC,mBAAmB,CAACG,OAApBH,GAA8BrD,gBAA9BqD;IACAC,mBAAmB,CAACE,OAApBF,GAA8BxD,gBAA9BwD;IACAC,qBAAqB,CAACC,OAAtBD,GAAgC3D,kBAAhC2D;EACD,CANDpD;EAQA,IAAMsD,MAAM,GAAGtD,KAAK,CAACuD,UAANvD,CAAiBE,aAAjBF,CAAf;EAEA,IAAMwD,eAAe,GAAGxD,KAAK,CAACyD,WAANzD,CAAkB,YAAM;IAC9C,IAAI0D,KAAJ;;IAEA,IAAIX,UAAU,CAACM,OAAf,EAAwB;MAAA;;MACtB,IAAMM,SAAQ,YACZ,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAEA,QADI,oBAEX,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAACD,QAAvC,GAAkDrD,SAFrD;;MAIA,IAAMuD,IAAI,GAAGF,SAAQ,GAAGA,SAAQ,CAACG,QAATH,GAAoBA,SAAQ,CAACI,MAAhC,GAAyCzD,SAA9D;;MAEA,IAAIuD,IAAJ,EAAU;QACRH,KAAK,GAAGR,mBAAmB,CAACG,OAApBH,CAA4BW,IAA5BX,EAAkCD,SAAS,CAACI,OAA5CH,CAARQ;MACF;IACF;;IAEA,IAAMM,QAAQ,GAAG;MACfC,IADe,gBACVC,WADU,EAC8C;QAC3D,OAAOC,OAAO,CAACC,OAARD,CAAgBD,WAAW,GAAGA,WAAW,CAACR,KAAD,CAAd,GAAwBA,KAAnDS,CAAP;MACD,CAHc;MAIfE,KAJe,oBAIP;QACN,OAAOL,QAAP;MACF;IANe,CAAjB;IASA,OAAOA,QAAP;EAED,CA1BuBhE,EA0BrB,EA1BqBA,CAAxB;EA4BA,IAAMsE,gBAAgB,GAAGtE,KAAK,CAACgD,MAANhD,CAAiCM,SAAjCN,CAAzB;EACA,IAAMuE,gBAAgB,GAAGvE,KAAK,CAACgD,MAANhD,CAA0CM,SAA1CN,CAAzB;EACA,IAAMwE,sBAAsB,GAAGxE,KAAK,CAACgD,MAANhD,CAAiCM,SAAjCN,CAA/B;EAEAA,KAAK,CAACiC,SAANjC,CAAgB,YAAM;IACpBsE,gBAAgB,CAACjB,OAAjBiB,GAA2B7D,OAAO,CAACK,KAAnCwD;IAEA,OAAO7D,OAAO,CAACgE,MAARhE,CAAe,YAAM;MAAA;;MAC1B,IAAMiE,UAAU,GAAG7C,GAAG,CAACwB,OAAvB;;MAEA,IAAI,CAACqB,UAAD,IAAe,CAAC3C,OAApB,EAA6B;QAC3B;MACF;;MAEA,IAAM8B,IAAI,GAAGF,QAAQ,CAACG,QAATH,GAAoBA,QAAQ,CAACI,MAA1C;MACA,IAAMjD,KAAK,GAAGL,OAAO,CAACK,KAAtB;MAEA,IAAM6D,aAAa,4BAAGL,gBAAgB,CAACjB,OAApB,oCAA+B,CAAlD;MAEAiB,gBAAgB,CAACjB,OAAjBiB,GAA2BxD,KAA3BwD;MACAE,sBAAsB,CAACnB,OAAvBmB,GAAiCX,IAAjCW;MAKA,IAAMI,MAAM,GAAGnE,OAAO,CAACoE,GAARpE,CAAYK,KAAZL,CAAf;;MAEA,IAAI,CAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAEoD,IAAR,MAAiBA,IAAjB,IAAyBe,MAAM,KAAA,IAA/B,IAAyBA,MAAM,KAAA,KAAA,CAA/B,IAAyBA,MAAM,CAAE3D,KAArC,EAA4C;QAC1CyD,UAAU,CAACI,SAAXJ,CAAqBE,MAAM,CAAC3D,KAA5ByD;QACA;MACF;;MAEA,IAAMzD,KAAK,GAAGiC,mBAAmB,CAACG,OAApBH,CAA4BW,IAA5BX,EAAkCD,SAAS,CAACI,OAA5CH,CAAd;;MAIA,IAAIjC,KAAJ,EAAW;QAGT,IAAM8D,SAAS,GAAGL,UAAU,CAACM,YAAXN,EAAlB;;QAEA,IAAIzD,KAAK,CAACN,MAANM,CAAagE,IAAbhE,CAAmBiE,UAAAA,CAAC;UAAA,OAAK,EAACH,SAAS,KAAA,IAATA,IAAAA,SAAS,KAAA,KAAA,CAATA,IAAAA,SAAS,CAAEI,UAAXJ,CAAsBK,QAAtBL,CAA+BG,CAAC,CAACG,IAAjCN,CAAD,CAAL;QAAA,CAApB9D,CAAJ,EAAuE;UACrEoB,OAAO,CAACiD,IAARjD,CACE,0SADFA;UAGA;QACF;;QAEA,IAAIvB,KAAK,GAAG6D,aAAZ,EAA2B;UACzB,IAAMY,MAAM,GAAGnC,qBAAqB,CAACC,OAAtBD,CACbnC,KADamC,EAEbH,SAAS,CAACI,OAFGD,CAAf;;UAKA,IAAImC,MAAM,KAAKjF,SAAf,EAA0B;YACxB,IAAI;cACFoE,UAAU,CAACc,QAAXd,CAAoBa,MAApBb;YACD,CAFD,CAEE,OAAOe,CAAP,EAAU;cAGVpD,OAAO,CAACiD,IAARjD,wDACuDwB,IADvDxB,YAEI,OAAOoD,CAAP,KAAa,QAAb,IAAyBA,CAAC,IAAI,IAA9B,IAAsC,aAAaA,CAAnD,GAEIA,CAAC,CAACC,OAFN,GAGID,CALRpD;YAQF;UACD,CAfD,MAeO;YACLqC,UAAU,CAACI,SAAXJ,CAAqBzD,KAArByD;UACF;QACD,CAxBD,MAwBO;UACLA,UAAU,CAACI,SAAXJ,CAAqBzD,KAArByD;QACF;MACD,CAvCD,MAuCO;QAELA,UAAU,CAACI,SAAXJ,CAAqBzD,KAArByD;MACF;IACD,CAxEMjE,CAAP;EAyED,CA5EDT,EA4EG,CAAC+B,OAAD,EAAUtB,OAAV,EAAmBoB,GAAnB,CA5EH7B;EA8EAA,KAAK,CAACiC,SAANjC,CAAgB,YAAM;IAAA,IAAA,YAAA;;IACpB,IAAI,CAAC+B,OAAL,EAAc;MACZ;IACF;;IAEA,IAAM4D,eAAe,GAAG,SAAlBA,eAAkB,CACtBC,KADsB,EAEtB3E,KAFsB,EAGX;MAGX,IAAI2E,KAAK,KAAA,IAALA,IAAAA,KAAK,KAAA,KAAA,CAALA,IAAAA,KAAK,CAAE/B,IAAX,EAAiB;QACf,IAAMgC,YAAY,GAAG3C,mBAAmB,CAACG,OAApBH,CACnB0C,KAAK,CAAC/B,IADaX,EAEnBD,SAAS,CAACI,OAFSH,CAArB;;QAKA,IAAI2C,YAAJ,EAAkB;UAChB,IAAMC,YAAY,GAAGtG,gBAAgB,CAACqG,YAAD,CAArC;;UAEA,IACEC,YAAY,IACZA,YAAY,CAACT,IAAbS,KAAsBF,KAAK,CAACP,IAD5BS,IAEA/F,OAAO,CAAC+F,YAAY,CAACC,MAAd,EAAsBH,KAAK,CAACG,MAA5B,CAHT,EAIE;YACA,OAAOH,KAAK,CAAC/B,IAAb;UACF;QACF;MACF;;MAEA,OAAOV,mBAAmB,CAACE,OAApBF,CAA4BlC,KAA5BkC,EAAmCF,SAAS,CAACI,OAA7CF,CAAP;IACD,CA1BD;;IA4BA,IAAItB,GAAG,CAACwB,OAAR,EAAiB;MAGf,IAAMpC,KAAK,GAAGY,GAAG,CAACwB,OAAJxB,CAAYmD,YAAZnD,EAAd;;MAEA,IAAIZ,KAAJ,EAAW;QACT,IAAM2E,KAAK,GAAGpG,gBAAgB,CAACyB,KAAD,CAA9B;QACA,IAAM4C,IAAI,GAAG8B,eAAe,CAACC,KAAD,EAAQ3E,KAAR,CAA5B;;QAEA,IAAIsD,gBAAgB,CAAClB,OAAjBkB,KAA6BjE,SAAjC,EAA4C;UAC1CiE,gBAAgB,CAAClB,OAAjBkB,GAA2BtD,KAA3BsD;QACF;;QAEA9D,OAAO,CAACuF,OAARvF,CAAgB;UAAEoD,IAAI,EAAJA,IAAF;UAAQ5C,KAAAA,EAAAA;QAAR,CAAhBR;MACF;IACF;;IAEA,IAAMwF,aAAa;MAAA,8BAAG,aAAY;QAChC,IAAMvB,UAAU,GAAG7C,GAAG,CAACwB,OAAvB;;QAEA,IAAI,CAACqB,UAAD,IAAe,CAAC3C,OAApB,EAA6B;UAC3B;QACF;;QAEA,IAAMmE,aAAa,GAAG3B,gBAAgB,CAAClB,OAAvC;QACA,IAAMpC,KAAK,GAAGyD,UAAU,CAACM,YAAXN,EAAd;;QAGA,IAAI,CAACzD,KAAL,EAAY;UACV;QACF;;QAEA,IAAMkF,WAAW,GAAG3B,sBAAsB,CAACnB,OAA3C;QACA,IAAMuC,KAAK,GAAGpG,gBAAgB,CAACyB,KAAD,CAA9B;QACA,IAAM4C,IAAI,GAAG8B,eAAe,CAACC,KAAD,EAAQ3E,KAAR,CAA5B;QAEAsD,gBAAgB,CAAClB,OAAjBkB,GAA2BtD,KAA3BsD;QACAC,sBAAsB,CAACnB,OAAvBmB,GAAiClE,SAAjCkE;;QAMA,yBAA6CrE,iBAAiB,CAC5D+F,aAD4D,EAE5DjF,KAF4D,CAA9D;QAAA;QAAA,IAAOmF,oBAAP;QAAA,IAA6BC,YAA7B;;QAKA,IACED,oBAAoB,IACpBC,YADAD,IAIAvC,IAAI,KAAKsC,WALX,EAME;UACA,IAAMG,YAAY,GAChB,CAACD,YAAY,CAAC5F,OAAb4F,GACGA,YAAY,CAAC5F,OAAb4F,CAAqB3F,MADxB2F,GAEGA,YAAY,CAAC1F,MAAb0F,CAAoB3F,MAFxB,KAGC0F,oBAAoB,CAAC3F,OAArB2F,GACGA,oBAAoB,CAAC3F,OAArB2F,CAA6B1F,MADhC0F,GAEGA,oBAAoB,CAACzF,MAArByF,CAA4B1F,MALhC,CADF;;UAQA,IAAI4F,YAAY,GAAG,CAAnB,EAAsB;YAGpB7F,OAAO,CAACkC,IAARlC,CAAa;cAAEoD,IAAI,EAAJA,IAAF;cAAQ5C,KAAAA,EAAAA;YAAR,CAAbR;UACD,CAJD,MAIO,IAAI6F,YAAY,GAAG,CAAnB,EAAsB;YAG3B,IAAMC,SAAS,GAAG9F,OAAO,CAAC+F,SAAR/F,CAAkB;cAAEoD,IAAAA,EAAAA;YAAF,CAAlBpD,CAAlB;YACA,IAAMgG,YAAY,GAAGhG,OAAO,CAACK,KAA7B;;YAEA,IAAI;cACF,IAAIyF,SAAS,KAAK,CAAC,CAAfA,IAAoBA,SAAS,GAAGE,YAApC,EAAkD;gBAEhD,MAAMhG,OAAO,CAACiG,EAARjG,CAAW8F,SAAS,GAAGE,YAAvBhG,CAAN;cACD,CAHD,MAGO;gBAIL,MAAMA,OAAO,CAACiG,EAARjG,CAAW6F,YAAX7F,CAAN;cACF;;cAGAA,OAAO,CAACuF,OAARvF,CAAgB;gBAAEoD,IAAI,EAAJA,IAAF;gBAAQ5C,KAAAA,EAAAA;cAAR,CAAhBR;YACD,CAbD,CAaE,OAAOgF,CAAP,EAAU,CACV;UAEH,CAtBM,MAsBA;YAELhF,OAAO,CAACuF,OAARvF,CAAgB;cAAEoD,IAAI,EAAJA,IAAF;cAAQ5C,KAAAA,EAAAA;YAAR,CAAhBR;UACF;QACD,CA7CD,MA6CO;UAGLA,OAAO,CAACuF,OAARvF,CAAgB;YAAEoD,IAAI,EAAJA,IAAF;YAAQ5C,KAAAA,EAAAA;UAAR,CAAhBR;QACF;MACD,CAjFkB;;MAAA,gBAAbwF,aAAa;QAAA;MAAA;IAAA,GAAnB;;IAsFA,OAAA,CAAA,YAAA,GAAOpE,GAAG,CAACwB,OAAX,MAAkB,IAAlB,IAAkB,YAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAOxB,YAAAA,CAAa8E,WAAb9E,CAAyB,OAAzBA,EAAkCV,MAAM,CAAC8E,aAAD,CAAxCpE,CAAP;EACD,CAzID7B;EA2IA,OAAO;IACLwD,eAAAA,EAAAA;EADK,CAAP;AAGF","sourceRoot":"../../src","sourcesContent":["import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n  return callback;\n};\nlet linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  let {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref;\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    const handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      const location = (server === null || server === void 0 ? void 0 : server.location) ?? (typeof window !== 'undefined' ? window.location : undefined);\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = previousIndexRef.current ?? 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ?\n              // @ts-expect-error: we're already checking for this\n              e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    const getPathForRoute = (route, state) => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route !== null && route !== void 0 && route.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState &&\n      // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}\n//# sourceMappingURL=useLinking.js.map"]},"metadata":{},"sourceType":"module"}