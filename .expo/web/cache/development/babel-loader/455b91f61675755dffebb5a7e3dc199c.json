{"ast":null,"code":"import * as React from 'react';\nexport default function useKeyedChildListeners() {\n  var _React$useRef = React.useRef(Object.assign(Object.create(null), {\n    getState: {},\n    beforeRemove: {}\n  })),\n      keyedListeners = _React$useRef.current;\n\n  var addKeyedListener = React.useCallback(function (type, key, listener) {\n    keyedListeners[type][key] = listener;\n    return function () {\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners: keyedListeners,\n    addKeyedListener: addKeyedListener\n  };\n}","map":{"version":3,"sources":["useKeyedChildListeners.tsx"],"names":["React","useKeyedChildListeners","current","keyedListeners","useRef","Object","assign","create","getState","beforeRemove","addKeyedListener","useCallback","type","key","listener","undefined"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,eAAe,SAASC,sBAAT,GAAkC;EAC/C,oBAAoCD,KAAK,CAACI,MAANJ,CAMlCK,MAAM,CAACC,MAAPD,CAAcA,MAAM,CAACE,MAAPF,CAAc,IAAdA,CAAdA,EAAmC;IACjCG,QAAQ,EAAE,EADuB;IAEjCC,YAAY,EAAE;EAFmB,CAAnCJ,CANkCL,CAApC;EAAA,IAAiBG,cAAjB,iBAAQD,OAAR;;EAYA,IAAMQ,gBAAgB,GAAGV,KAAK,CAACW,WAANX,CACvB,UACEY,IADF,EAEEC,GAFF,EAGEC,QAHF,EAIK;IAEHX,cAAc,CAACS,IAAD,CAAdT,CAAqBU,GAArBV,IAA4BW,QAA5BX;IAEA,OAAO,YAAM;MAEXA,cAAc,CAACS,IAAD,CAAdT,CAAqBU,GAArBV,IAA4BY,SAA5BZ;IACD,CAHD;EAID,CAbsBH,EAcvB,CAACG,cAAD,CAduBH,CAAzB;EAiBA,OAAO;IACLG,cAAc,EAAdA,cADK;IAELO,gBAAAA,EAAAA;EAFK,CAAP;AAIF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const {\n    current: keyedListeners\n  } = React.useRef(Object.assign(Object.create(null), {\n    getState: {},\n    beforeRemove: {}\n  }));\n  const addKeyedListener = React.useCallback((type, key, listener) => {\n    // @ts-expect-error: according to ref stated above you can use `key` to index type\n    keyedListeners[type][key] = listener;\n    return () => {\n      // @ts-expect-error: according to ref stated above you can use `key` to index type\n      keyedListeners[type][key] = undefined;\n    };\n  }, [keyedListeners]);\n  return {\n    keyedListeners,\n    addKeyedListener\n  };\n}\n//# sourceMappingURL=useKeyedChildListeners.js.map"]},"metadata":{},"sourceType":"module"}