{"ast":null,"code":"var slice = Array.prototype.slice;\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText;\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex];\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      }\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        var marker = rules.shift();\n        rules.sort();\n        rules.unshift(marker);\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue);\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group);\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        };\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      }\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText);\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nvar groupPattern = /[\"']/g;\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(groupPattern)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar selectorPattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(selectorPattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"names":["slice","Array","prototype","createOrderedCSSStyleSheet","sheet","groups","selectors","group","call","cssRules","forEach","cssRule","i","cssText","indexOf","decodeGroupRule","start","rules","selectorText","getSelectorText","push","sheetInsert","text","orderedGroups","getOrderedGroups","groupIndex","nextGroupIndex","nextGroup","position","length","isInserted","insertRuleAt","groupNumber","previousStart","OrderedCSSStyleSheet","getTextContent","map","marker","shift","sort","unshift","join","insert","groupValue","Number","markerRule","encodeGroupRule","pop","groupPattern","split","obj","Object","keys","a","b","selectorPattern","selector","trim","replace","root","insertRule","e"],"sources":["/home/user/Documentos/code/JavaScript/ProjetosReactNative/StarDust/node_modules/react-native-web/dist/exports/StyleSheet/dom/createOrderedCSSStyleSheet.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar slice = Array.prototype.slice;\n/**\n * Order-based insertion of CSS.\n *\n * Each rule is associated with a numerically defined group.\n * Groups are ordered within the style sheet according to their number, with the\n * lowest first.\n *\n * Groups are implemented using marker rules. The selector of the first rule of\n * each group is used only to encode the group number for hydration. An\n * alternative implementation could rely on CSSMediaRule, allowing groups to be\n * treated as a sub-sheet, but the Edge implementation of CSSMediaRule is\n * broken.\n * https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule\n * https://gist.github.com/necolas/aa0c37846ad6bd3b05b727b959e82674\n */\n\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n  /**\n   * Hydrate approximate record from any existing rules in the sheet.\n   */\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach((cssRule, i) => {\n      var cssText = cssRule.cssText; // Create record of existing selectors and rules\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex]; // Insert rule before the next group, or at the end of the stylesheet\n\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      // Set the starting index of the new group\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      } // Increment the starting index of all subsequent groups\n\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start || 0;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    /**\n     * The textContent of the style sheet.\n     */\n    getTextContent() {\n      return getOrderedGroups(groups).map(group => {\n        var rules = groups[group].rules; // Sorting provides deterministic order of styles in group for\n        // build-time extraction of the style sheet.\n\n        var marker = rules.shift();\n        rules.sort();\n        rules.unshift(marker);\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n\n    /**\n     * Insert a rule into the style sheet\n     */\n    insert(cssText, groupValue) {\n      var group = Number(groupValue); // Create a new group.\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group); // Create the internal record.\n\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        }; // Update CSSOM.\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      } // selectorText is more reliable than cssText for insertion checks. The\n      // browser excludes vendor-prefixed properties and rewrites certain values\n      // making cssText more likely to be different from what was inserted.\n\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        // Update the internal records.\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText); // Update CSSOM.\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            // Revert internal record change if a rule was rejected (e.g.,\n            // unrecognized pseudo-selector)\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n\n  };\n  return OrderedCSSStyleSheet;\n}\n/**\n * Helper functions\n */\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nvar groupPattern = /[\"']/g;\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(groupPattern)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort((a, b) => a > b ? 1 : -1);\n}\n\nvar selectorPattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(selectorPattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    // $FlowFixMe: Flow is missing CSSOM types needed to type 'root'.\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    // JSDOM doesn't support `CSSSMediaRule#insertRule`.\n    // Also ignore errors that occur from attempting to insert vendor-prefixed selectors.\n    return false;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}