{"ast":null,"code":"import { CHILD_STATE } from \"./useRouteCache\";\nexport default function getFocusedRouteNameFromRoute(route) {\n  var _route$CHILD_STATE, _state$index;\n\n  var state = (_route$CHILD_STATE = route[CHILD_STATE]) != null ? _route$CHILD_STATE : route.state;\n  var params = route.params;\n  var routeName = state ? state.routes[(_state$index = state.index) != null ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name : typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"sources":["getFocusedRouteNameFromRoute.tsx"],"names":["CHILD_STATE","getFocusedRouteNameFromRoute","route","state","params","routeName","routes","index","type","length","name","screen","undefined"],"mappings":"AAEA,SAASA,WAAT;AAEA,eAAe,SAASC,4BAAT,CACbC,KADa,EAEO;EAAA;;EAEpB,IAAMC,KAAK,yBAAGD,KAAK,CAACF,WAAD,CAAR,iCAAyBE,KAAK,CAACC,KAA1C;EACA,IAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;EAEA,IAAMC,SAAS,GAAGF,KAAK,GAEnBA,KAAK,CAACG,MAANH,iBAGEA,KAAK,CAACI,KAHRJ,2BAIK,OAAOA,KAAK,CAACK,IAAb,KAAsB,QAAtB,IAAkCL,KAAK,CAACK,IAANL,KAAe,OAAjD,GACG,CADH,GAEGA,KAAK,CAACG,MAANH,CAAaM,MAAbN,GAAsB,CAN9BA,EAOEO,IATiB,GAWrB,QAAON,MAAM,KAAA,IAANA,IAAAA,MAAM,KAAA,KAAA,CAANA,GAAM,KAAA,CAANA,GAAAA,MAAM,CAAEO,MAAf,MAA0B,QAA1B,GACEP,MAAM,CAACO,MADT,GAEEC,SAbJ;EAeA,OAAOP,SAAP;AACF","sourceRoot":"../../src","sourcesContent":["import { CHILD_STATE } from './useRouteCache';\nexport default function getFocusedRouteNameFromRoute(route) {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params;\n  const routeName = state ?\n  // Get the currently active route name in the nested navigator\n  state.routes[\n  // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n  // The type property will only exist for rehydrated state and not for state from deep link\n  state.index ?? (typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1)].name :\n  // If state doesn't exist, we need to default to `screen` param if available\n  typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}\n//# sourceMappingURL=getFocusedRouteNameFromRoute.js.map"]},"metadata":{},"sourceType":"module"}