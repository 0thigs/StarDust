{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar formatToList = function formatToList(items) {\n  return items.map(function (key) {\n    return \"- \" + key;\n  }).join('\\n');\n};\n\nexport default function validatePathConfig(config) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var validKeys = ['initialRouteName', 'screens'];\n\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n\n  var invalidKeys = Object.keys(config).filter(function (key) {\n    return !validKeys.includes(key);\n  });\n\n  if (invalidKeys.length) {\n    throw new Error(\"Found invalid properties in the configuration:\\n\" + formatToList(invalidKeys) + \"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\" + formatToList(validKeys) + \"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n  }\n\n  if (config.screens) {\n    Object.entries(config.screens).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_","value"],"mappings":";;AAAA,IAAMA,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,KAAe;EAAA,OACnCA,KAAK,CAACC,GAAND,CAAWE,UAAAA,GAAG;IAAA,cAAUA,GAAV;EAAA,CAAdF,EAA+BG,IAA/BH,CAAoC,IAApCA,CADmC;AAAA,CAArC;;AAGA,eAAe,SAASI,kBAAT,CAA4BC,MAA5B,EAAsD;EAAA,IAAbC,IAAI,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAG,IAAM;EACnE,IAAMC,SAAS,GAAG,CAAC,kBAAD,EAAqB,SAArB,CAAlB;;EAEA,IAAI,CAACD,IAAL,EAAW;IACTC,SAAS,CAACC,IAAVD,CAAe,MAAfA,EAAuB,OAAvBA,EAAgC,WAAhCA,EAA6C,OAA7CA;EACF;;EAEA,IAAME,WAAW,GAAGC,MAAM,CAACC,IAAPD,CAAYL,MAAZK,EAAoBE,MAApBF,CACjBR,UAAAA,GAAG;IAAA,OAAK,CAACK,SAAS,CAACM,QAAVN,CAAmBL,GAAnBK,CAAN;EAAA,CADcG,CAApB;;EAIA,IAAID,WAAW,CAACK,MAAhB,EAAwB;IACtB,MAAM,IAAIC,KAAJ,sDAC+ChB,YAAY,CAC7DU,WAD6D,CAD3D,0HAGkHV,YAAY,CAChIQ,SADgI,CAH9H,4HAAN;EAOF;;EAEA,IAAIF,MAAM,CAACW,OAAX,EAAoB;IAClBN,MAAM,CAACO,OAAPP,CAAeL,MAAM,CAACW,OAAtBN,EAA+BQ,OAA/BR,CAAuC,UAAA,IAAA,EAAgB;MAAf,2BAAU,IAAV;MAAA,IAACS,CAAD;MAAA,IAAIC,KAAJ;;MACtC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7BhB,kBAAkB,CAACgB,KAAD,EAAQ,KAAR,CAAlBhB;MACF;IACD,CAJDM;EAKF;AACF","sourceRoot":"../../src","sourcesContent":["const formatToList = items => items.map(key => `- ${key}`).join('\\n');\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n//# sourceMappingURL=validatePathConfig.js.map"]},"metadata":{},"sourceType":"module"}