{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n\n        return _index > -1 ? _index : 0;\n      }\n\n      return 0;\n    },\n\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n          state = _ref2.state;\n      interrupt();\n      var id = nanoid();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var _ref4;\n\n      var _window$history$state2;\n\n      var path = _ref3.path,\n          state = _ref3.state;\n      interrupt();\n      var id = (_ref4 = (_window$history$state2 = window.history.state) === null || _window$history$state2 === void 0 ? void 0 : _window$history$state2.id) != null ? _ref4 : nanoid();\n      var pathWithHash = path;\n\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        pathWithHash = pathWithHash + location.hash;\n        items = [{\n          path: pathWithHash,\n          state: state,\n          id: id\n        }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + location.hash;\n        }\n\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n\n      window.history.replaceState({\n        id: id\n      }, '', pathWithHash);\n    },\n    go: function go(n) {\n      interrupt();\n      var nextIndex = index + n;\n      var lastItemIndex = items.length - 1;\n\n      if (n < 0 && !items[nextIndex]) {\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        var onPopState = function onPopState() {\n          var _window$history$state3;\n\n          var id = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","pathWithHash","location","hash","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending = [];\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n  const history = {\n    get index() {\n      var _window$history$state;\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n      return 0;\n    },\n    get(index) {\n      return items[index];\n    },\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref;\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n    replace(_ref3) {\n      var _window$history$state2;\n      let {\n        path,\n        state\n      } = _ref3;\n      interrupt();\n      const id = ((_window$history$state2 = window.history.state) === null || _window$history$state2 === void 0 ? void 0 : _window$history$state2.id) ?? nanoid();\n\n      // Need to keep the hash part of the path if there was no previous history entry\n      // or the previous history entry had the same path\n      let pathWithHash = path;\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        pathWithHash = pathWithHash + location.hash;\n        items = [{\n          path: pathWithHash,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + location.hash;\n        }\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n      window.history.replaceState({\n        id\n      }, '', pathWithHash);\n    },\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        const onPopState = () => {\n          var _window$history$state3;\n          const id = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id;\n          const currentIndex = items.findIndex(item => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n  };\n  return history;\n}\n//# sourceMappingURL=createMemoryHistory.js.map"]},"metadata":{},"sourceType":"module"}