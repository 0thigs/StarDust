{"ast":null,"code":"import * as React from 'react';\nimport useNavigation from \"./useNavigation\";\nexport default function useFocusEffect(effect) {\n  var navigation = useNavigation();\n\n  if (arguments[1] !== undefined) {\n    var message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n\n  React.useEffect(function () {\n    var isFocused = false;\n    var cleanup;\n\n    var callback = function callback() {\n      var destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        var _message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          _message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          _message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          _message += \" You returned '\" + JSON.stringify(destroy) + \"'.\";\n        }\n\n        console.error(_message);\n      }\n    };\n\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    var unsubscribeFocus = navigation.addListener('focus', function () {\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n    var unsubscribeBlur = navigation.addListener('blur', function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return function () {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}","map":{"version":3,"sources":["useFocusEffect.tsx"],"names":["React","useNavigation","useFocusEffect","effect","navigation","arguments","undefined","message","console","error","useEffect","isFocused","cleanup","callback","destroy","process","env","NODE_ENV","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,aAAP;AAWA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAgD;EAC7D,IAAMC,UAAU,GAAGH,aAAa,EAAhC;;EAEA,IAAII,SAAS,CAAC,CAAD,CAATA,KAAiBC,SAArB,EAAgC;IAC9B,IAAMC,OAAO,GACX,yFACA,8EADA,GAEA,mBAFA,GAGA,+BAHA,GAIA,yBAJA,GAKA,sBALA,GAMA,QANA,GAOA,oEARF;IAUAC,OAAO,CAACC,KAARD,CAAcD,OAAdC;EACF;;EAEAR,KAAK,CAACU,SAANV,CAAgB,YAAM;IACpB,IAAIW,SAAS,GAAG,KAAhB;IACA,IAAIC,OAAJ;;IAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;MACrB,IAAMC,OAAO,GAAGX,MAAM,EAAtB;;MAEA,IAAIW,OAAO,KAAKR,SAAZQ,IAAyB,OAAOA,OAAP,KAAmB,UAAhD,EAA4D;QAC1D,OAAOA,OAAP;MACF;;MAEA,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;QACzC,IAAIR,QAAO,GACT,6FADF;;QAGA,IAAIO,OAAO,KAAK,IAAhB,EAAsB;UACpBP,QAAO,IACL,kGADFA;QAED,CAHD,MAGO,IAAI,OAAQO,OAAO,CAASI,IAAxB,KAAiC,UAArC,EAAiD;UACtDX,QAAO,IACL,0FACA,uDADA,GAEA,8BAFA,GAGA,mBAHA,GAIA,+BAJA,GAKA,oCALA,GAMA,+BANA,GAOA,uDAPA,GAQA,gBARA,GASA,WATA,GAUA,oBAVA,GAWA,kBAXA,GAYA,QAZA,GAaA,oEAdFA;QAeD,CAhBM,MAgBA;UACLA,QAAO,wBAAsBY,IAAI,CAACC,SAALD,CAAeL,OAAfK,CAAtB,OAAPZ;QACF;;QAEAC,OAAO,CAACC,KAARD,CAAcD,QAAdC;MACF;IACD,CApCD;;IAuCA,IAAIJ,UAAU,CAACO,SAAXP,EAAJ,EAA4B;MAC1BQ,OAAO,GAAGC,QAAQ,EAAlBD;MACAD,SAAS,GAAG,IAAZA;IACF;;IAEA,IAAMU,gBAAgB,GAAGjB,UAAU,CAACkB,WAAXlB,CAAuB,OAAvBA,EAAgC,YAAM;MAG7D,IAAIO,SAAJ,EAAe;QACb;MACF;;MAEA,IAAIC,OAAO,KAAKN,SAAhB,EAA2B;QACzBM,OAAO;MACT;;MAEAA,OAAO,GAAGC,QAAQ,EAAlBD;MACAD,SAAS,GAAG,IAAZA;IACD,CAbwBP,CAAzB;IAeA,IAAMmB,eAAe,GAAGnB,UAAU,CAACkB,WAAXlB,CAAuB,MAAvBA,EAA+B,YAAM;MAC3D,IAAIQ,OAAO,KAAKN,SAAhB,EAA2B;QACzBM,OAAO;MACT;;MAEAA,OAAO,GAAGN,SAAVM;MACAD,SAAS,GAAG,KAAZA;IACD,CAPuBP,CAAxB;IASA,OAAO,YAAM;MACX,IAAIQ,OAAO,KAAKN,SAAhB,EAA2B;QACzBM,OAAO;MACT;;MAEAS,gBAAgB;MAChBE,eAAe;IAChB,CAPD;EAQD,CAhFDvB,EAgFG,CAACG,MAAD,EAASC,UAAT,CAhFHJ;AAiFF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect) {\n  const navigation = useNavigation();\n  if (arguments[1] !== undefined) {\n    const message = \"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \" + \"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\" + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    // Your code here\\n' + '  }, [depA, depB])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n    console.error(message);\n  }\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup;\n    const callback = () => {\n      const destroy = effect();\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        let message = 'An effect function must not return anything besides a function, which is used for clean-up.';\n        if (destroy === null) {\n          message += \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof destroy.then === 'function') {\n          message += \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" + 'Instead, write the async function inside your effect ' + 'and call it immediately:\\n\\n' + 'useFocusEffect(\\n' + '  React.useCallback(() => {\\n' + '    async function fetchData() {\\n' + '      // You can await here\\n' + '      const response = await MyAPI.getData(someId);\\n' + '      // ...\\n' + '    }\\n\\n' + '    fetchData();\\n' + '  }, [someId])\\n' + ');\\n\\n' + 'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned '${JSON.stringify(destroy)}'.`;\n        }\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = callback();\n      isFocused = true;\n    });\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      cleanup = undefined;\n      isFocused = false;\n    });\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n//# sourceMappingURL=useFocusEffect.js.map"]},"metadata":{},"sourceType":"module"}