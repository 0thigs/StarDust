{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nvar UNINTIALIZED_STATE = {};\nexport default function useSyncState(initialState) {\n  var stateRef = React.useRef(UNINTIALIZED_STATE);\n  var isSchedulingRef = React.useRef(false);\n  var isMountedRef = React.useRef(true);\n  React.useEffect(function () {\n    isMountedRef.current = true;\n    return function () {\n      isMountedRef.current = false;\n    };\n  }, []);\n\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;\n  }\n\n  var _React$useState = React.useState(stateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      trackingState = _React$useState2[0],\n      setTrackingState = _React$useState2[1];\n\n  var getState = React.useCallback(function () {\n    return stateRef.current;\n  }, []);\n  var setState = React.useCallback(function (state) {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n\n    stateRef.current = state;\n\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  var scheduleUpdate = React.useCallback(function (callback) {\n    isSchedulingRef.current = true;\n\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  var flushUpdates = React.useCallback(function () {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    setTrackingState(stateRef.current);\n  }, []);\n\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n\n  var state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAMC,kBAAkB,GAAG,EAA3B;AAKA,eAAe,SAASC,YAAT,CAAyBC,YAAzB,EAAuD;EACpE,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAANL,CAAgBC,kBAAhBD,CAAjB;EACA,IAAMM,eAAe,GAAGN,KAAK,CAACK,MAANL,CAAa,KAAbA,CAAxB;EACA,IAAMO,YAAY,GAAGP,KAAK,CAACK,MAANL,CAAa,IAAbA,CAArB;EAEAA,KAAK,CAACQ,SAANR,CAAgB,YAAM;IACpBO,YAAY,CAACE,OAAbF,GAAuB,IAAvBA;IAEA,OAAO,YAAM;MACXA,YAAY,CAACE,OAAbF,GAAuB,KAAvBA;IACD,CAFD;EAGD,CANDP,EAMG,EANHA;;EAQA,IAAII,QAAQ,CAACK,OAATL,KAAqBH,kBAAzB,EAA6C;IAC3CG,QAAQ,CAACK,OAATL,GAEE,OAAOD,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,EAAjD,GAAsDA,YAFxDC;EAGF;;EAEA,sBAA0CJ,KAAK,CAACY,QAANZ,CAAeI,QAAQ,CAACK,OAAxBT,CAA1C;EAAA;EAAA,IAAOU,aAAP;EAAA,IAAsBC,gBAAtB;;EAEA,IAAME,QAAQ,GAAGb,KAAK,CAACc,WAANd,CAAkB;IAAA,OAAMI,QAAQ,CAACK,OAAf;EAAA,CAAlBT,EAA0C,EAA1CA,CAAjB;EAEA,IAAMe,QAAQ,GAAGf,KAAK,CAACc,WAANd,CAAmBgB,UAAAA,KAAQ,EAAK;IAC/C,IAAIA,KAAK,KAAKZ,QAAQ,CAACK,OAAnBO,IAA8B,CAACT,YAAY,CAACE,OAAhD,EAAyD;MACvD;IACF;;IAEAL,QAAQ,CAACK,OAATL,GAAmBY,KAAnBZ;;IAEA,IAAI,CAACE,eAAe,CAACG,OAArB,EAA8B;MAC5BE,gBAAgB,CAACK,KAAD,CAAhBL;IACF;EACD,CAVgBX,EAUd,EAVcA,CAAjB;EAYA,IAAMiB,cAAc,GAAGjB,KAAK,CAACc,WAANd,CAAmBkB,UAAAA,QAAoB,EAAK;IACjEZ,eAAe,CAACG,OAAhBH,GAA0B,IAA1BA;;IAEA,IAAI;MACFY,QAAQ;IACT,CAFD,SAEU;MACRZ,eAAe,CAACG,OAAhBH,GAA0B,KAA1BA;IACF;EACD,CARsBN,EAQpB,EARoBA,CAAvB;EAUA,IAAMmB,YAAY,GAAGnB,KAAK,CAACc,WAANd,CAAkB,YAAM;IAC3C,IAAI,CAACO,YAAY,CAACE,OAAlB,EAA2B;MACzB;IACF;;IAIAE,gBAAgB,CAACP,QAAQ,CAACK,OAAV,CAAhBE;EACD,CARoBX,EAQlB,EARkBA,CAArB;;EAYA,IAAIU,aAAa,KAAKN,QAAQ,CAACK,OAA/B,EAAwC;IACtCE,gBAAgB,CAACP,QAAQ,CAACK,OAAV,CAAhBE;EACF;;EAEA,IAAMK,KAAK,GAAGZ,QAAQ,CAACK,OAAvB;EAEAT,KAAK,CAACoB,aAANpB,CAAoBgB,KAApBhB;EAEA,OAAO,CAACgB,KAAD,EAAQH,QAAR,EAAkBE,QAAlB,EAA4BE,cAA5B,EAA4CE,YAA5C,CAAP;AACF","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n    // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}\n//# sourceMappingURL=useSyncState.js.map"]},"metadata":{},"sourceType":"module"}