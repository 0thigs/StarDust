{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from \"./NavigationHelpersContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport PreventRemoveContext from \"./PreventRemoveContext\";\n\nvar transformPreventedRoutes = function transformPreventedRoutes(preventedRoutesMap) {\n  var preventedRoutesToTransform = _toConsumableArray(preventedRoutesMap.values());\n\n  var preventedRoutes = preventedRoutesToTransform.reduce(function (acc, _ref) {\n    var _acc$routeKey;\n\n    var routeKey = _ref.routeKey,\n        preventRemove = _ref.preventRemove;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\nexport default function PreventRemoveProvider(_ref2) {\n  var children = _ref2.children;\n\n  var _React$useState = React.useState(function () {\n    return nanoid();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      parentId = _React$useState2[0];\n\n  var _React$useState3 = React.useState(new Map()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      preventedRoutesMap = _React$useState4[0],\n      setPreventedRoutesMap = _React$useState4[1];\n\n  var navigation = React.useContext(NavigationHelpersContext);\n  var route = React.useContext(NavigationRouteContext);\n  var preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  var setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  var setPreventRemove = useLatestCallback(function (id, routeKey, preventRemove) {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(function (route) {\n      return route.key !== routeKey;\n    }))) {\n      throw new Error(\"Couldn't find a route with the key \" + routeKey + \". Is your component inside NavigationContent?\");\n    }\n\n    setPreventedRoutesMap(function (prevPrevented) {\n      var _prevPrevented$get, _prevPrevented$get2;\n\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n\n      var nextPrevented = new Map(prevPrevented);\n\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey: routeKey,\n          preventRemove: preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n\n      return nextPrevented;\n    });\n  });\n\n  var isPrevented = _toConsumableArray(preventedRoutesMap.values()).some(function (_ref3) {\n    var preventRemove = _ref3.preventRemove;\n    return preventRemove;\n  });\n\n  React.useEffect(function () {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      setParentPrevented(parentId, route.key, isPrevented);\n      return function () {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  var value = React.useMemo(function () {\n    return {\n      setPreventRemove: setPreventRemove,\n      preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n    };\n  }, [setPreventRemove, preventedRoutesMap]);\n  return React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}","map":{"version":3,"sources":["PreventRemoveProvider.tsx"],"names":["nanoid","React","useLatestCallback","NavigationHelpersContext","NavigationRouteContext","PreventRemoveContext","transformPreventedRoutes","preventedRoutesMap","preventedRoutesToTransform","values","preventedRoutes","reduce","acc","routeKey","preventRemove","PreventRemoveProvider","children","parentId","useState","setPreventedRoutesMap","Map","navigation","useContext","route","preventRemoveContextValue","setParentPrevented","setPreventRemove","id","getState","routes","every","key","Error","prevPrevented","get","nextPrevented","set","delete","isPrevented","some","useEffect","undefined","value","useMemo"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport NavigationHelpersContext from './NavigationHelpersContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport PreventRemoveContext from './PreventRemoveContext';\n/**\n * Util function to transform map of prevented routes to a simpler object.\n */\nconst transformPreventedRoutes = preventedRoutesMap => {\n  const preventedRoutesToTransform = [...preventedRoutesMap.values()];\n  const preventedRoutes = preventedRoutesToTransform.reduce((acc, _ref) => {\n    var _acc$routeKey;\n    let {\n      routeKey,\n      preventRemove\n    } = _ref;\n    acc[routeKey] = {\n      preventRemove: ((_acc$routeKey = acc[routeKey]) === null || _acc$routeKey === void 0 ? void 0 : _acc$routeKey.preventRemove) || preventRemove\n    };\n    return acc;\n  }, {});\n  return preventedRoutes;\n};\n\n/**\n * Component used for managing which routes have to be prevented from removal in native-stack.\n */\nexport default function PreventRemoveProvider(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const [parentId] = React.useState(() => nanoid());\n  const [preventedRoutesMap, setPreventedRoutesMap] = React.useState(new Map());\n  const navigation = React.useContext(NavigationHelpersContext);\n  const route = React.useContext(NavigationRouteContext);\n  const preventRemoveContextValue = React.useContext(PreventRemoveContext);\n  // take `setPreventRemove` from parent context - if exist it means we're in a nested context\n  const setParentPrevented = preventRemoveContextValue === null || preventRemoveContextValue === void 0 ? void 0 : preventRemoveContextValue.setPreventRemove;\n  const setPreventRemove = useLatestCallback((id, routeKey, preventRemove) => {\n    if (preventRemove && (navigation == null || navigation !== null && navigation !== void 0 && navigation.getState().routes.every(route => route.key !== routeKey))) {\n      throw new Error(`Couldn't find a route with the key ${routeKey}. Is your component inside NavigationContent?`);\n    }\n    setPreventedRoutesMap(prevPrevented => {\n      var _prevPrevented$get, _prevPrevented$get2;\n      // values haven't changed - do nothing\n      if (routeKey === ((_prevPrevented$get = prevPrevented.get(id)) === null || _prevPrevented$get === void 0 ? void 0 : _prevPrevented$get.routeKey) && preventRemove === ((_prevPrevented$get2 = prevPrevented.get(id)) === null || _prevPrevented$get2 === void 0 ? void 0 : _prevPrevented$get2.preventRemove)) {\n        return prevPrevented;\n      }\n      const nextPrevented = new Map(prevPrevented);\n      if (preventRemove) {\n        nextPrevented.set(id, {\n          routeKey,\n          preventRemove\n        });\n      } else {\n        nextPrevented.delete(id);\n      }\n      return nextPrevented;\n    });\n  });\n  const isPrevented = [...preventedRoutesMap.values()].some(_ref3 => {\n    let {\n      preventRemove\n    } = _ref3;\n    return preventRemove;\n  });\n  React.useEffect(() => {\n    if ((route === null || route === void 0 ? void 0 : route.key) !== undefined && setParentPrevented !== undefined) {\n      // when route is defined (and setParentPrevented) it means we're in a nested stack\n      // route.key then will be the route key of parent\n      setParentPrevented(parentId, route.key, isPrevented);\n      return () => {\n        setParentPrevented(parentId, route.key, false);\n      };\n    }\n    return;\n  }, [parentId, isPrevented, route === null || route === void 0 ? void 0 : route.key, setParentPrevented]);\n  const value = React.useMemo(() => ({\n    setPreventRemove,\n    preventedRoutes: transformPreventedRoutes(preventedRoutesMap)\n  }), [setPreventRemove, preventedRoutesMap]);\n  return /*#__PURE__*/React.createElement(PreventRemoveContext.Provider, {\n    value: value\n  }, children);\n}\n//# sourceMappingURL=PreventRemoveProvider.js.map"]},"metadata":{},"sourceType":"module"}