{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPressIn\", \"onPressOut\", \"android_ripple\", \"pressColor\", \"pressOpacity\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nvar AnimatedPressable = Animated.createAnimatedComponent(Pressable);\nvar ANDROID_VERSION_LOLLIPOP = 21;\nvar ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\nexport default function PlatformPressable(_ref) {\n  var onPressIn = _ref.onPressIn,\n      onPressOut = _ref.onPressOut,\n      android_ripple = _ref.android_ripple,\n      pressColor = _ref.pressColor,\n      _ref$pressOpacity = _ref.pressOpacity,\n      pressOpacity = _ref$pressOpacity === void 0 ? 0.3 : _ref$pressOpacity,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      dark = _useTheme.dark;\n\n  var _React$useState = React.useState(function () {\n    return new Animated.Value(1);\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      opacity = _React$useState2[0];\n\n  var animateTo = function animateTo(toValue, duration) {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: toValue,\n      duration: duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true\n    }).start();\n  };\n\n  var handlePressIn = function handlePressIn(e) {\n    animateTo(pressOpacity, 0);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n  };\n\n  var handlePressOut = function handlePressOut(e) {\n    animateTo(1, 200);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n  };\n\n  return React.createElement(AnimatedPressable, _extends({\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? _objectSpread({\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)'\n    }, android_ripple) : undefined,\n    style: [{\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style]\n  }, rest));\n}","map":{"version":3,"sources":["PlatformPressable.tsx"],"names":["useTheme","React","AnimatedPressable","Animated","createAnimatedComponent","Pressable","ANDROID_VERSION_LOLLIPOP","ANDROID_SUPPORTS_RIPPLE","Platform","OS","Version","PlatformPressable","onPressIn","onPressOut","android_ripple","pressColor","pressOpacity","style","rest","dark","opacity","useState","Value","animateTo","toValue","duration","timing","easing","Easing","inOut","quad","useNativeDriver","start","handlePressIn","e","handlePressOut","color","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;;;AAmBA,IAAMC,iBAAiB,GAAGC,QAAQ,CAACC,uBAATD,CAAiCE,SAAjCF,CAA1B;AAEA,IAAMG,wBAAwB,GAAG,EAAjC;AACA,IAAMC,uBAAuB,GAC3BC,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IAA6BA,QAAQ,CAACE,OAATF,IAAoBF,wBADnD;AAMA,eAAe,SAASK,iBAAT,CAA0B,IAA1B,EAQL;EARgC,IACxCC,SADwC,GAQlC,IARkC,CACxCA,SADwC;EAAA,IAExCC,UAFwC,GAQlC,IARkC,CAExCA,UAFwC;EAAA,IAGxCC,cAHwC,GAQlC,IARkC,CAGxCA,cAHwC;EAAA,IAIxCC,UAJwC,GAQlC,IARkC,CAIxCA,UAJwC;EAAA,wBAQlC,IARkC,CAKxCC,YALwC;EAAA,IAKxCA,YALwC,kCAKzB,GALyB;EAAA,IAMxCC,KANwC,GAQlC,IARkC,CAMxCA,KANwC;EAAA,IAOrCC,IAPqC,4BAQlC,IARkC;;EASxC,gBAAiBlB,QAAQ,EAAzB;EAAA,IAAQmB,IAAR,aAAQA,IAAR;;EACA,sBAAkBlB,KAAK,CAACoB,QAANpB,CAAe;IAAA,OAAM,IAAIE,QAAQ,CAACmB,KAAb,CAAmB,CAAnB,CAAN;EAAA,CAAfrB,CAAlB;EAAA;EAAA,IAAOmB,OAAP;;EAEA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAkBC,QAAlB,EAAuC;IACvD,IAAIlB,uBAAJ,EAA6B;MAC3B;IACF;;IAEAJ,QAAQ,CAACuB,MAATvB,CAAgBiB,OAAhBjB,EAAyB;MACvBqB,OAAO,EAAPA,OADuB;MAEvBC,QAAQ,EAARA,QAFuB;MAGvBE,MAAM,EAAEC,MAAM,CAACC,KAAPD,CAAaA,MAAM,CAACE,IAApBF,CAHe;MAIvBG,eAAe,EAAE;IAJM,CAAzB5B,EAKG6B,KALH7B;EAMD,CAXD;;EAaA,IAAM8B,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,CAAwB,EAAK;IAClDX,SAAS,CAACP,YAAD,EAAe,CAAf,CAATO;IACAX,SAAS,KAAA,IAATA,IAAAA,SAAS,KAAA,KAAA,CAATA,GAAS,KAAA,CAATA,GAAAA,SAAS,CAAGsB,CAAH,CAATtB;EACD,CAHD;;EAKA,IAAMuB,cAAc,GAAID,SAAlBC,cAAkBD,CAAAA,CAAwB,EAAK;IACnDX,SAAS,CAAC,CAAD,EAAI,GAAJ,CAATA;IACAV,UAAU,KAAA,IAAVA,IAAAA,UAAU,KAAA,KAAA,CAAVA,GAAU,KAAA,CAAVA,GAAAA,UAAU,CAAGqB,CAAH,CAAVrB;EACD,CAHD;;EAKA,OACE,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,QAAA,CAAA;IAChB,SAAS,EAAEoB,aADK;IAEhB,UAAU,EAAEE,cAFI;IAGhB,cAAc,EACZ5B,uBAAuB;MAEjB6B,KAAK,EACHrB,UAAU,KAAKsB,SAAftB,GACIA,UADJA,GAEII,IAAI,GACJ,0BADI,GAEJ;IAPW,GAQdL,cARc,IAUnBuB,SAdU;IAgBhB,KAAK,EAAE,CAAC;MAAEjB,OAAO,EAAE,CAACb,uBAAD,GAA2Ba,OAA3B,GAAqC;IAAhD,CAAD,EAAsDH,KAAtD;EAhBS,CAAA,EAiBZC,IAjBY,CAAlB,CADF;AAqBF","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Animated, Easing, Platform, Pressable } from 'react-native';\nconst AnimatedPressable = Animated.createAnimatedComponent(Pressable);\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_SUPPORTS_RIPPLE = Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\n/**\n * PlatformPressable provides an abstraction on top of Pressable to handle platform differences.\n */\nexport default function PlatformPressable(_ref) {\n  let {\n    onPressIn,\n    onPressOut,\n    android_ripple,\n    pressColor,\n    pressOpacity = 0.3,\n    style,\n    ...rest\n  } = _ref;\n  const {\n    dark\n  } = useTheme();\n  const [opacity] = React.useState(() => new Animated.Value(1));\n  const animateTo = (toValue, duration) => {\n    if (ANDROID_SUPPORTS_RIPPLE) {\n      return;\n    }\n    Animated.timing(opacity, {\n      toValue,\n      duration,\n      easing: Easing.inOut(Easing.quad),\n      useNativeDriver: true\n    }).start();\n  };\n  const handlePressIn = e => {\n    animateTo(pressOpacity, 0);\n    onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n  };\n  const handlePressOut = e => {\n    animateTo(1, 200);\n    onPressOut === null || onPressOut === void 0 ? void 0 : onPressOut(e);\n  };\n  return /*#__PURE__*/React.createElement(AnimatedPressable, _extends({\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    android_ripple: ANDROID_SUPPORTS_RIPPLE ? {\n      color: pressColor !== undefined ? pressColor : dark ? 'rgba(255, 255, 255, .32)' : 'rgba(0, 0, 0, .32)',\n      ...android_ripple\n    } : undefined,\n    style: [{\n      opacity: !ANDROID_SUPPORTS_RIPPLE ? opacity : 1\n    }, style]\n  }, rest));\n}\n//# sourceMappingURL=PlatformPressable.js.map"]},"metadata":{},"sourceType":"module"}