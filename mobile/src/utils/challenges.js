export const challenges = [
  {
    id: 1,
    starId: 4,
    title: 'Enviar mensagem',
    texts: [
      {
        type: 'default',
        body: 'Parece que finalmente voc√™ encontrou um planeta √† vista! Para veriifcar se h√° vida inteligente, voc√™ pode enviar uma mensagem dizendo: "Ol√°, mundo!". Para fazer isso voc√™ deve escrever um programa que receba essa mensagem e a escreva, sendo a entrada e sa√≠da de dados respectivamente, veja o exemplo',
      },
      {
        type: 'code',
        body: `Entrada: "Ol√°, mundo!"
Saida: "Ol√°, mundo!"`,
      },
      {
        type: 'alert',
        body: 'Lembre-se de manter o comando leia( ) para capturar os dados de entrada',
      },
    ],
    testCases: [
      {
        input: ["'Ol√°, mundo!'"],
        expectedOutput: 'Ol√°, mundo!',
        isLocked: false,
      },
    ],

    code: `
var mensagem = leia()`,
    difficulty: 'easy',
    categories: ['b√°sico'],
  },
  {
    id: 2,
    starId: 8,
    title: 'An√°lise do ambiente',
    texts: [
      {
        type: 'default',
        body: 'Parece que permitiram voc√™ adentrar no planeta Datahon! Entretanto, √© melhor fazer uma an√°lise do ambiente antes de fazer um pouso seguro, o que o seu foguete j√° fez de antem√£o, retornando para voc√™ dados do planeta como nome, idade, temperatura e se tem ar respir√°vel.',
      },
      {
        type: 'default',
        body: 'Sua miss√£o √© escrever qual o tipo de dado de cada um na ordem em que s√£o declarados, veja um exemplo',
      },
      {
        type: 'code',
        body: `var nomeEstrela = "Proxima Centauri"
var temCorAmarela = verdadeiro

escreva("tipo nomeEstrela: " + "texto" + ", tipo nomeEstrela: l√≥gico")

saida: tipo nomeEstrela: texto, tipo temCorAmarela: l√≥gico`,
      },
      {
        type: 'alert',
        body: 'Dica: voc√™ pode colocar o nome dos tipos em vari√°veis e concaten√°-las com os textos, mas lembre-se de respeitar as v√≠rgulas e os espa√ßos',
      },
    ],
    testCases: [
      {
        input: null,
        expectedOutput: `tipo nome: texto, tipo temperatura: n√∫mero, tipo temOxig√™nio: l√≥gico`,
        isLocked: false,
      },
    ],

    code: `
var nome = "Datahon"
var temperatura = 53.5
var temOxigenio = falso

var tipoNome
var tipoTemperatura
var tipoOxigenio

escreva()`,
    difficulty: 'easy',
    categories: ['b√°sico', 'textos', 'n√∫meros'],
  },
  {
    id: 2,
    starId: 8,
    title: 'An√°lise do ambiente',
    texts: [
      {
        type: 'default',
        body: 'Parece que permitiram voc√™ adentrar no planeta Datahon! Entretanto, √© melhor fazer uma an√°lise do ambiente antes de fazer um pouso seguro, o que o seu foguete j√° fez de antem√£o, retornando para voc√™ dados do planeta como nome, idade, temperatura e se tem ar respir√°vel.',
      },
      {
        type: 'default',
        body: 'Sua miss√£o √© escrever qual o tipo de dado de cada um na ordem em que s√£o declarados, veja um exemplo',
      },
      {
        type: 'code',
        body: `var nomeEstrela = "Proxima Centauri"
var temCorAmarela = verdadeiro

escreva("tipo nomeEstrela: " + "texto" + ", tipo nomeEstrela: l√≥gico")

saida: tipo nomeEstrela: texto, tipo temCorAmarela: l√≥gico`,
      },
      {
        type: 'alert',
        body: 'Dica: voc√™ pode colocar o nome dos tipos em vari√°veis e concaten√°-las com os textos, mas lembre-se de respeitar as v√≠rgulas e os espa√ßos',
      },
    ],
    testCases: [
      {
        input: null,
        expectedOutput: `tipo nomeEstrela: texto, tipo nomeEstrela: l√≥gico`,
        isLocked: false,
      },
    ],

    code: `
var nome = "Datahon"
var temperatura = 53.5
var temOxigenio = falso

var tipoNome
var tipoTemperatura
var tipoOxigenio

escreva("l√≥gico")`,
    difficulty: 'easy',
    categories: ['b√°sico', 'textos', 'n√∫meros'],
  },
  {
    id: 12,
    starId: null,
    title: 'Somar energias',
    texts: [
      {
        type: 'default',
        body: 'Em uma gal√°xia muito, muito distante, h√° uma nave espacial que precisa de um sistema para calcular a soma de energia de duas fontes diferentes.',
      },
      {
        type: 'default',
        body: 'Ent√£o, crie uma fun√ß√£o que receba dois valores de energia como argumentos e retorne a soma total de energia',
      },
      {
        type: 'markdown',
        body: `
Saida: "Ol√°, mundo!"`,
      },
      {
        type: 'alert',
        body: 'N√£o se esque√ßa de usar o "retorna" na fun√ß√£o',
      },
    ],
    testCases: [
      {
        input: [3, 2],
        expectedOutput: 5,
        isLocked: false,
      },
      {
        input: [-3, -6],
        expectedOutput: -9,
        isLocked: false,
      },
      {
        input: [7, 3],
        expectedOutput: 3,
        isLocked: false,
      },
    ],

    code: `
function calcularEnergia(energia1, energia2) {

}`,
    difficulty: 'hard',
    categories: ['b√°sico', 'matem√°tica', 'n√∫meros'],
  },
  {
    id: 13,
    starId: null,
    title: 'Pedido de ajuda',
    texts: [
      {
        type: 'default',
        body: 'Voc√™ est√° navegando pelo espa√ßo e de repente seu foguete quebra üò¢. Tudo o que resta fazer √© enviar uma messagem de socorro espa√ßo a fora',
      },
      {
        type: 'default',
        body: 'Logo, sua miss√£o √© criar uma simples fun√ß√£o que retorne "Socorro, preciso de ajuda!"',
      },
      {
        type: 'code',
        body: `Saida: "Ol√°, mundo!"`,
      },
      {
        type: 'alert',
        body: 'N√£o s√£o se esque√ßa de usar o "retorna" na fun√ß√£o e tamb√©m n√£o alterar o nome da fun√ß√£o que colocamos',
      },
      {
        type: 'alert',
        body: 'Lembre-se de prestar aten√ß√£o nas letras mai√∫sculas e min√∫sculas, assim como a pontua√ß√£o',
      },
    ],
    function: 'pedirAjuda()',
    testCases: [
      {
        input: [],
        expectedOutput: 'Socorro, preciso de ajuda!',
        isLocked: false,
      },
    ],
    code: `
function hello() {

}`,
    difficulty: 'easy',
    categories: ['b√°sico', 'textos'],
  },
  {
    id: 14,
    starId: null,
    title: 'Conversor de n√∫meros para crons',
    texts: [
      {
        type: 'default',
        body: 'Voc√™ √© um engenheiro de nave espacial em uma miss√£o para explorar uma gal√°xia distante. A tripula√ß√£o da nave utiliza uma unidade de tempo espacial para medir o tempo, que √© diferente da unidade de tempo terrestre.',
      },
      {
        type: 'default',
        body: 'A unidade de tempo espacial √© chamada de "cron". Um cron √© igual a 60 minutos terrestres. Por exemplo, se a tripula√ß√£o diz que um evento ocorrer√° em 3 crons, isso significa que o evento ocorrer√° em 3 x 60 = 180 minutos terrestres.',
      },
      {
        type: 'default',
        body: 'Voc√™ precisa criar uma fun√ß√£o chamada minutosParaCrons que converta uma quantidade de minutos terrestres em crons.',
      },
      {
        type: 'code',
        body: `
Entrada: 240
Saida: 4

Entrada: 360
Saida: 6`,
      },
      {
        type: 'alert',
        body: 'N√£o s√£o se esque√ßa de usar o "retorna" na fun√ß√£o e tamb√©m n√£o alterar o nome da fun√ß√£o que colocamos',
      },
      {
        type: 'alert',
        body: 'Dica: Lembre-se de que um cron √© igual a 60 minutos terrestres.',
      },
    ],
    function: 'converterMinutosParaCrons()',
    testCases: [
      {
        input: [300],
        expectedOutput: 5,
        isLocked: false,
      },
      {
        input: [180],
        expectedOutput: 3,
        isLocked: false,
      },
      {
        input: [120],
        expectedOutput: 2,
        isLocked: false,
      },
    ],

    code: `
function converterMinutosParaCrons(minutos) {

}`,
    difficulty: 'easy',
    categories: ['b√°sico', 'matem√°tica', 'n√∫meros'],
  },
  {
    id: 14,
    starId: null,
    title: 'Detector de naves bumerangue',
    texts: [
      {
        type: 'default',
        body: 'Em uma gal√°xia muito distante, existe uma frota de naves espaciais que patrulham o espa√ßo em busca de amea√ßas alien√≠genas.',
      },
      {
        type: 'default',
        body: 'O c√≥digo de cada uma dessas naves √© composto por tr√™s n√∫meros de 1 a N e s√£o equipadas com um dispositivo que pode detectar a presen√ßa de outras naves em um raio de alcance.',
      },
      {
        type: 'default',
        body: 'Aqui est√° o desafio: escreva uma fun√ß√£o conteBumerangues que retorne o n√∫mero de vezes que uma nave do tipo "bumerangue" √© detectada em uma determinada patrulha. O c√≥digo de uma nave "bumerangue" possui uma sequ√™ncia de tr√™s n√∫meros consecutivos em que a primeiro e a terceiro s√£o o mesmo, mas o segundo n√∫mero √© diferente.',
      },
      {
        type: 'default',
        body: 'Por exemplo, se o vetor de entrada for [1, 2, 1, 3, 1, 4, 2, 5, 2, 6], a fun√ß√£o deve retornar 2, porque existem duas sequ√™ncias de tr√™s n√∫meros consecutivos em que a primeira e a terceiro n√∫mero s√£o iguais: [1, 2, 1] e [2, 5, 2].',
      },
      {
        type: 'code',
        body: `
Entrada: [3, 7, 3, 2, 1, 5, 1, 2, 2, -2, 2]
Resultado: 3
Explicacao: a partir do vetor de entrada √© poss√≠vel extrair 3 naves bumerangues: [3, 7, 3], [1, 5, 1], [2, -2, 2]

Entrada: [9, 5, 9, 5, 1, 1, 1]
Resultado: 2
Explicacao: a partir do vetor de entrada √© poss√≠vel extrair 2 naves bumerangues: [9, 5, 9], [5, 9, 4]

Entrada: [1, 7, 1, 7, 1, 7, 1]
Resultado: 5
Explicacao: a partir do vetor de entrada √© poss√≠vel extrair 5 naves bumerangues: [1, 7, 1], [7, 1, 7], [1, 7, 1], [7, 1, 7], e [1, 7, 1]`,
      },
      {
        type: 'alert',
        body: 'Observe que [5, 5, 5] (vetor com 3 d√≠gitos identicos) n√£o √© considerado uma nave bumerangue porque o valor do meio √© identico ao primeiro e o terceiro.',
      },
    ],
    function: 'conteNavesBumerangues()',
    testCases: [
      {
        input: [[5, 6, 6, 7, 6, 3, 9]],
        expectedOutput: 1,
        isLocked: false,
      },
      {
        input: [[4, 4, 4, 9, 9, 9, 9]],
        expectedOutput: 0,
        isLocked: true,
      },
      {
        input: [[1, 2, 1, 3, 1, 4, 2, 5, 2, 6]],
        expectedOutput: 3,
        isLocked: true,
      },
    ],

    code: `
function conteNavesBumerangues(numeros) {

}`,
    difficulty: 'hard',
    categories: ['vetores', 'la√ßos'],
  },
  {
    id: 15,
    starId: null,
    title: 'Chuva de asteroides',
    texts: [
      {
        type: 'default',
        body: 'Faz alguns minutos que seu foguete saiu para o espa√ßo, mas voc√™ j√° encontrou um planeta √† vista!.',
      },
      {
        type: 'default',
        body: 'Por√©m, h√° tr√™s asteroides gigantes em sua dire√ß√£o.',
      },
      {
        type: 'Que??',
        body: 'Seu dever √© testar se o escudo protetor do foguete esteja ativo (valor verdadeiro) e que a resist√™ncia (valor 700) dele seja maior que a soma das for√ßas dos tr√™s asteroides (A, B, C).',
      },
      {
        type: 'code',
        body: `
Entrada: 100, 200, 300, verdadeiro
Resultado: verdadeiro
Explicacao: a soma das for√ßas d√° 600 e a resistencia √© 700. Como o escudo est√° ativo (verdadeiro) e essa soma √© menor que 700, logo o resultado √© verdadeiro

Entrada: 500, 500, 500, verdadeiro
Resultado: falso
Explicacao: soma √© 1500 e a resit√™ncia √© 700, logo o resultado j√° √© falso

Entrada: 50, 100, 150, falso
Resultado: falso
Explicacao: soma √© 300 e a resit√™ncia √© 700, por√©m o escudo n√£o est√° ativo, ent√£o o resultado √© falso`,
      },
      {
        type: 'alert',
        body: 'Dica: coloque a soma das for√ßas em uma vari√°vel soma e depois compare se ela √© maior ou n√£o que a resist√™ncia.',
      },
      {
        type: 'alert',
        body: 'N√£o se esque√ßa de comparar tamb√©m se o escudo est√° ativo.',
      },
    ],
    function: null,
    testCases: [
      {
        input: [100, 100, 100, 'verdadeiro'],
        expectedOutput: 'verdadeiro',
        isLocked: false,
      },
      {
        input: [300, 400, 800, 'falso'],
        expectedOutput: 'falso',
        isLocked: false,
      },
      {
        input: [100, 500, 100, 'verdadeiro'],
        expectedOutput: 'falso',
        isLocked: false,
      },
    ],

    code: `
var asteroideA = leia();
var asteroideB = leia();
var asteroideC = leia();

var escudoAtivo = leia();

var resitencia = 700`,
    difficulty: 'easy',
    categories: ['matem√°tica', 'b√°sico', 'n√∫meros'],
  },
  {
    id: 16,
    starId: null,
    title: 'Quantos planetas habitados?',
    texts: [
      {
        type: 'default',
        body: 'Em uma gal√°xia distante, existem v√°rias naves espaciais que est√£o explorando novos mundos.',
      },
      {
        type: 'default',
        body: 'Cada nave tem sensores que coletam dados sobre a presen√ßa de diferentes formas de vida nos planetas visitados.',
      },
      {
        type: 'default',
        body: 'Os sensores s√£o controlados por um sistema de intelig√™ncia artificial que detecta a presen√ßa ou aus√™ncia de vida com base em diferentes fatores.',
      },
      {
        type: 'default',
        body: 'Voc√™ tem uma func√£o que recebe um vetor de valores l√≥gicos coletados pelos sensores de v√°rias naves espaciais, representando a presen√ßa ou aus√™ncia de vida em diferentes planetas.',
      },
      {
        type: 'default',
        body: 'Seu dasafio √©: fazer com que a fun√ß√£o deve retorne o n√∫mero de valores "verdadeiro" no vetor.',
      },
      {
        type: 'code',
        body: `
Entrada: [verdadeiro, falso, falso, verdadeiro, falso]
Resultado: 2

Entrada: [falso, falso, falso, falso]
Resultado: 0

Entrada: []
Resultado: 2`,
      },
      {
        type: 'alert',
        body: 'A fun√ß√£o deve retornar 0 se o vetor for vazio.',
      },
      {
        type: 'alert',
        body: 'N√£o se preocupe, todos os valores dos vetores s√£o do tipo l√≥gico',
      },
    ],
    functionName: 'quantosPlanetasHabitados',
    testCases: [
      {
        input: [['verdadeiro', 'falso', 'verdadeiro', 'verdadeiro', 'falso']],
        expectedOutput: 3,
        isLocked: false,
      },
      {
        input: [['falso', 'falso', 'falso']],
        expectedOutput: 0,
        isLocked: false,
      },
      {
        input: [['verdadeiro', 'verdadeiro', 'verdadeiro', 'verdadeiro']],
        expectedOutput: 4,
        isLocked: false,
      },
    ],

    code: `
function quantosPlanetasHabitados(planetas) {
    
}`,
    difficulty: 'easy',
  },
];

[
  {
    starId: null,
    title: 'Retorne o primeiro planeta destino',
    texts: [
      {
        type: 'default',
        body: 'Voc√™ √© um comandante espacial em uma miss√£o para explorar o universo em busca de planetas habit√°veis.',
      },
      {
        type: 'default',
        body: 'Para ajud√°-lo em sua miss√£o, sua equipe de cientistas coletou dados de v√°rios planetas e armazenou-os em um vetor.',
      },
      {
        type: 'default',
        body: 'Sua tarefa √© retornar o primeiro elemento desse vetor, que ser√° o pr√≥ximo destino de sua equipe de explora√ß√£o.',
      },
      {
        type: 'code',
        body: `Entrada: ["Tatooine", "Endor", "Naboo", "Alderaan"]
Resultado: Tatooine`,
      },
      {
        type: 'alert',
        body: 'Lembre-se sobre os √≠ndices de vetores',
      },
      {
        type: 'alert',
        body: 'N√£o s√£o se esque√ßa de usar o "retorna" na fun√ß√£o e tamb√©m n√£o alterar o nome da fun√ß√£o que colocamos',
      },
    ],
    function: 'pegarPrimeiroPlaneta',
    testCases: [
      {
        input: [['Marte', 'V√™nus', 'Terra', 'J√∫piter']],
        expectedOutput: 'Marte',
        isLocked: false,
      },
      {
        input: [['Pandora', 'Hoth', 'Terra', 'Dagobah']],
        expectedOutput: 'Pandora',
        isLocked: false,
      },
      {
        input: [['Krypton', 'Tatooine', 'Asgard', 'Gallifrey']],
        expectedOutput: 22.5,
        isLocked: false,
      },
    ],

    code: `
funcao pegarPrimeiroPlaneta(planetas) {
    
}`,
    difficulty: 'easy',
    categories: ['b√°sico', 'geometria', 'matem√°tica', 'n√∫meros'],
  },
];
