export const theories = [
  {
    starId: 1,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ol√°, seja bem-vindo. Primeiramente, para come√ßarmos essa jornada √© necess√°rio deixar claro o conceito de l√≥gica e algoritmos, pois esses conceitos ser√£o de vital import√¢ncia para o entendimento de assuntos mais avan√ßados, ent√£o vamos l√°! üöÄ.',
      },
      {
        type: 'default',
        title: 'Come√ßando pelo come√ßo',
        body: 'Sempre que decidimos fazer qualquer atividade em nosso dia a dia, acabamos seguindo uma sequ√™ncia l√≥gica.',
      },
      {
        type: 'default',
        title: null,
        body: 'Na maior parte do tempo, fazemos isso de maneira t√£o natural que nem nos damos conta, mas quando percebemos, conseguimos enxergar passos que levaram ao resultado final.',
      },
      {
        type: 'default',
        title: 'Ou seja...',
        body: 'Uma sequ√™ncia l√≥gica nada mais s√£o que passos executados at√© atingir um determinado objetivo.',
      },
      {
        type: 'default',
        title: 'L√≥gica est√° em todo lugar',
        body: 'Imagine que voc√™ √© aspirante a explorador espacial e deseja desbravar os confins do espa√ßo long√≠nquo com seu foguete. O problema √© que voc√™ n√£o tem equipamento para isso e muito menos um foguete :(',
      },
      {
        type: 'alert',
        body: 'A l√≥gica de programa√ß√£o √© semelhante a isso, mas em vez de solucionar a quest√£o de como fazer uma explora√ß√£o espacial, voc√™ est√° resolvendo um problema em um programa de computador. Para tanto, voc√™ precisa pensar de forma l√≥gica e organizada para criar uma sequ√™ncia de passos que resolva esse problema.',
      },
      {
        type: 'default',
        title: 'A√≠ que entra os algoritmos',
        body: 'Um algoritmo √© como um roteiro para um programa de computador. Ele √© uma sequ√™ncia de passos que o programa deve seguir para alcan√ßar um objetivo espec√≠fico. Como aspirante a explorador espacial, voc√™ pode pensar em um algoritmo como uma lista de tarefas que voc√™ precisa para resolver o primeiro problema que voc√™ se depara.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, se o seu objetivo √© arrumar equipamento adequado para a viagem espacial, o seu algoritmo pode ter os seguintes passos:',
      },
      {
        type: 'code',
        body: `algoritmo arrumar um foguete
    
    Inicio
  
  Invadir um centro espacial;
  Encontrar um foguete;
  Entrar no foguete enquanto ningu√©m estiver olhando;
  Conferir se n√£o h√° combust√≠vel suficiente;
  Conferir a quantidade de suprimentos;
  Conferir quantidade de oxig√™nio;
  Se n√£o tiver = sair e roubar mais
  senao ligar o foguete;
  Esperar foquete entrar em √≥rbita;
  Relaxar e curtir a viagem;
    
    Fim`,
      },
      {
        type: 'default',
        title: 'Mas √© s√≥ isso?',
        body: 'Obviamente, h√° v√°rias formas de chegar nesse mesmo resultado, como tamb√©m pode existir mais passos antes de outros passos. Contudo, o objetivo sempre vai ser esse: pensar logicamente para estipular uma sequ√™ncia de passos para a resolu√ß√£o de um problema, o que damos o nome de l√≥gica de programa√ß√£o dentro do contexto da computa√ß√£o, enquanto a sequ√™ncia em si desses eventos, damos o nome de algoritmo.',
      },
      {
        type: 'alert',
        body: 'A diferen√ßa √© que qualquer sequ√™ncia l√≥gica de passos pode ser considerado um algoritmo, como uma receita de bolo ou um assalto a um centro espacial. J√° em programa√ß√£o, os algoritmos s√£o escritos para criar programas, mas sempre obedecendo uma s√©rie de regras estabelecidas por cada linguagem de programa√ß√£o, o que √© o que a gente chama de sintaxe.',
      },
      {
        type: 'default',
        title: 'Por que aprender L√≥gica de Programa√ß√£o?',
        body: 'Aprender l√≥gica de programa√ß√£o √© importante porque permite que voc√™ resolva problemas de maneira mais eficiente e organizada, ajuda na solu√ß√£o de tarefas complexas e facilita a cria√ß√£o de programas que automatizam tarefas e processos. Al√©m disso, √© uma habilidade altamente valorizada no mercado de trabalho.',
      },
      {
        type: 'default',
        title: 'Como funciona a L√≥gica de Programa√ß√£o na pr√°tica?',
        body: 'Como voc√™ j√° percebeu, a L√≥gica de Programa√ß√£o funciona atrav√©s de algoritmos, ou seja, por meio de passos l√≥gicos e bem definidos que deve ser seguidos para resolver um problema. Esses passos s√£o escritos em um c√≥digo que √© interpretado pelo computador para que ele possa executar a tarefa desejada.',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ aprendeu o b√°sico de l√≥gica e algoritmos, vamos testar seus conhecimentos at√© ent√£o adquiridos üöÄ.',
      },
    ],
  },
  {
    starId: 2,
    texts: [
      {
        type: 'default',
        title: 'Introdu√ß√£o',
        body: 'Agora que voc√™ finalmente est√° no espa√ßo, imagino que voc√™ queira explorar novos planetas e talvez econtrar novas vidas alien√≠genas.',
      },
      {
        type: 'default',
        title: 'Introdu√ß√£o',
        body: 'Para isso voc√™ vai ter que instruir seu foguete escrevendo c√≥digos.',
      },
      {
        type: 'alert',
        body: 'Uma linguagem de programa√ß√£o normalmente possui uma sintaxe pr√≥pria, que √© o conjunto de regras que determina quais combina√ß√µes de s√≠mbolos e palavras-chaves podem ser utilizadas para fazer com que o programa fa√ßa algo.',
      },
      {
        type: 'default',
        title: 'Qual linguagem usar?',
        body: 'Para nossa sorte, o foguete entende uma linguagem especial chamada Del√©gua. Ela possui uma sintaxe f√°cil e intuitiva em portugu√™s, o que facilita bastante.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, para fazer com que o foguete imprima no painel: "explorar o espa√ßo √© legal", basta fazer isso',
      },
      {
        type: 'code',
        body: `escreva("explorar o espa√ßo √© legal")
  
  saida: explorar o espa√ßo √© legal`,
      },
      {
        type: 'default',
        title: null,
        body: 'Simples e f√°cil, mas caso voc√™ queria que o foguete leia e receba informa√ß√µes suas, voc√™ pode usar o comando leia:',
      },
      {
        type: 'code',
        body: `var seuNome = leia()`,
      },
      {
        type: 'default',
        title: 'O que diabos √© var?',
        body: 'Para receber dados, naturalmente voc√™ tem que colocar em algum lugar, que no caso sempre vai ser em algo que chamamos de vari√°vel.',
      },
      {
        type: 'default',
        title: 'Mas o que diabos s√£o vari√°veis?',
        body: 'vari√°veis nada mais s√£o do que espa√ßos na mem√≥ria de um programa, onde voc√™ pode armazenar um tipo de dado, elas tem esse nome porque elas podem variar, ou seja, receber outros valores no decorrer do programa.',
      },
      {
        type: 'alert',
        body: 'Voc√™ n√£o precisa entender tudo de vari√°veis agora, pois usaremos elas mais para frente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora √© s√≥ fazer o programa exibir o dado dentro da vari√°vel.',
      },
      {
        type: 'code',
        body: `var seuNome = leia()
  escreva(seuNome)
  
  entrada: "Jo√£o"
  saida: "Jo√£o"`,
      },
      {
        type: 'default',
        title: null,
        body: 'Legal, mas na hora de escrever um c√≥digo consistente, voc√™ precisa tomar alguns cuidados:',
      },
      {
        type: 'list',
        body: '1 - √â preciso respeitar sempre a sintaxe definida pela linguagem, por exemplo, caso voc√™ tivesse colocado EXIBA ao inv√©s de ESCREVA, deixado de usar os par√™nteses ou as aspas para exibir textos, o c√≥digo daria erro. ',
      },
      {
        type: 'list',
        body: '2 - Voc√™ deve entender a fun√ß√£o, quando e porqu√™ usar cada comando, por exemplo, para escrever dados externos na tela, eu preciso usar o comando leia, pois ele tem a serve para ler informa√ß√µes que vem de fora do programa, para a√≠ ent√£o usar o comando escreva.',
      },
      {
        type: 'list',
        body: '3 - √â crucial compreender que o fluxo de um programa √© sempre de cima para baixo, ou seja, n√£o faz sentido eu tentat ler uma informa√ß√£o com leia depois de exibi-la na tela com escreva',
      },
      {
        type: 'alert',
        body: 'leia e escreva s√£o considerados comandos de entrada e sa√≠da respectivamente, justamente porque com o leia voc√™ est√° entrando com dados, enquanto com o escreva voc√™ est√° fazendo dados sa√≠rem para serem exibidos digamos assim.',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ um pouco mais sobre programas e pseudoc√≥digos t√° na hora revisar tudo isso, preparado(a)?.',
      },
    ],
  },
  {
    starId: 3,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ok, parace que voc√™ n√£o encontrou nenhum nada de interessante no espa√ßo ainda, justamente porque seu foguete n√£o sabe quem o est√° pilotando.',
      },
      {
        type: 'default',
        title: 'E agora?',
        body: 'Para resolver esse problema voc√™ tem que escrever um programa que exiba seu nome para ele, e para isso voc√™ ter√° que usar os comandos leia e escreva explicados anteriormente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, como voc√™ j√° sabe, √© necess√°rio armazenar seu nome em uma vari√°vel no c√≥digo para ent√£o escrev√™-lo.',
      },
      {
        type: 'default',
        title: 'Explica o que s√£o vari√°veis logo!',
        body: 'Vari√°veis s√£o espa√ßos reservados na mem√≥ria de um programa para algum tipo de dado, pronto.',
      },
      {
        type: 'default',
        title: 'Como usar essa tais de vari√°veis?',
        body: 'Para us√°-las de fato √© necess√°rio declarar elas para o programa que ela existe, escrevendo o comando var, seguido do nome da vari√°vel que voc√™ deseja que ela tenha, exemplo:',
      },
      {
        type: 'code',
        body: `var nomeCompleto`,
      },
      {
        type: 'default',
        title: 'Como colocar dados nelas?',
        body: 'Simples, basta colocar o sinal de "=" depois da vari√°vel e em seguida o dado que voc√™ deseja.',
      },
      {
        type: 'code',
        body: `var nome = "Kau√™ Cabess"
  var idade = 90`,
      },
      {
        type: 'default',
        title: null,
        body: 'Neste exemplo, estamos criando duas vari√°veis, uma chamada "nome" que armazenar√° o valor "Kau√™ Cabess" e outra chamada "idade" que armazenar√° o valor 90.',
      },
      {
        type: 'alert',
        body: 'Al√©m disso, voc√™ tamb√©m pode atribuir o valor de uma vari√°vel a outra, utilizando o seguinte formato:.',
      },
      {
        type: 'code',
        body: `
  var nome = "Kau√™ Cabess"
  var nomeCompleto = nome
  
  escreva(nomeCompleto)
  
  saida: Kau√™ Cabess`,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora observe um exemplo completo utilizando tudo que vimos at√© agora.',
      },
      {
        type: 'code',
        body: `var nome = leia()
  var idade = leia()
  var nomeCompleto = nome
  
  escreva("seu nome completo √© ", nomeCompleto)
  escreva("e sua idade √© ", idade)
  
  entrada: (Fernanda, 90)
  saida: seu nome completo √© Fernanda e sua idade √© 90`,
      },
      {
        type: 'alert',
        body: 'Dica: voc√™ tamb√©m fazer com que o programa escreva um texto e o conte√∫do de uma vari√°vel ao mesmo tempo, basta separ√°-los entre v√≠rgulas, assim como mostrado no exemplo acima.',
      },
      {
        type: 'default',
        title: 'Regras para nomes de vari√°veis',
        body: 'Ao nomear suas vari√°veis, √© importante seguir algumas regras b√°sicas:',
      },
      {
        type: 'list',
        body: '1 - O nome da vari√°vel deve iniciar com uma letra ou sublinhado (_).',
      },
      {
        type: 'list',
        body: '2 - O nome da vari√°vel n√£o pode conter espa√ßos.',
      },
      {
        type: 'list',
        body: '3 - O nome da vari√°vel n√£o pode ser uma palavra reservada da liguagem, ou seja, um nome de um comando por exemplo.',
      },
      {
        type: 'list',
        body: '4 - O nome da vari√°vel deve ser descritivo e f√°cil de entender.',
      },
      {
        type: 'default',
        title: 'Concluindo',
        body: 'A atribui√ß√£o de vari√°veis √© uma parte fundamental da programa√ß√£o, pois permite armazenar valores e acess√°-los ao longo do c√≥digo. Ao seguir as regras e a sintaxe corretas, voc√™ poder√° atribuir valores a suas vari√°veis sem problemas em programas futuros.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que voc√™ aprendeu mais um pouco, que tal praticar tudo o que j√° vimos at√© agora?',
      },
    ],
  },

  {
    starId: 5,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Parece que sua mensagem foi enviada para planeta que voc√™ encontrou, mas voc√™ n√£o obteve nenhuma resposta :(',
      },
      {
        type: 'default',
        title: 'Mas por qu√™?',
        body: 'Isso dever ter acontecido por causa do tipo de dado que voc√™ estava usando.',
      },
      {
        type: 'default',
        title: 'Pera a√≠, tipo de dado?',
        body: 'Isso mesmo! Em programa√ß√£o podemos usar v√°rios tipos de dados diferentes, sendo os mais b√°sicos os do tipo de texto, n√∫mero e l√≥gico.',
      },
      {
        type: 'alert',
        body: 'Por agora, vamos falar sobre o tipo de texto, que √© o que n√≥s mais usamos at√© agora.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, o tipo de texto √© utilizado para representar valores que s√£o texto, d√£! Eles podem ser compostos por uma ou mais letras, como tamb√©m n√∫meros ou s√≠mbolos.',
      },
      {
        type: 'default',
        title: 'Declara√ß√£o de dado do tipo texto',
        body: 'Para fazer com que o programa entenda que uma informa√ß√£o √© do tipo texto, basta coloc√°-lo entre aspas, podendo ser simples (\'\') ou duplas ("") assim como n√≥s j√° fizemos antes:',
      },
      {
        type: 'code',
        body: `var mensagem = "Ol√°, mundo!"`,
      },
      {
        type: 'default',
        title: 'T√° mas e o que mais?',
        body: 'Al√©m disso, √© poss√≠vel unir textos por meio do operador +, a√ß√£o que chamamos de concatena√ß√£o:',
      },
      {
        type: 'code',
        body: `escreva('Eu encontrei um ' + 'planeta')
  
  Resultado: Eu encontrei um planeta
              `,
      },
      {
        type: 'alert',
        body: 'Voc√™ tamb√©m pode concatenar conte√∫dos de texto que est√£o em vari√°veis. Veja o exemplo',
      },
      {
        type: 'code',
        body: `var nomePlaneta = "Datathon"
  escreva('Eu encontrei um' + 'planeta' + ' e ele se chama ' + nomePlaneta)
  
  Resultado: Eu encontrei um planeta e ele se chama Datahon`,
      },
      {
        type: 'default',
        title: null,
        body: 'Voc√™ tamb√©m pode usar o que chamamos de interpola√ß√£o, que √© quando um texto possui em seu conte√∫do algo como ${minha_variavel}, e se minha_vari√°vel foi definida anteriormente, o novo texto ter√° o valor de minha_variavel.',
      },
      {
        type: 'code',
        body: `var nomePlaneta = "Datahon"
  escreva("esse planeta \$\{nomePlaneta\} n√£o parece ser amig√°vel")
  
  Resultado: Esse planeta Datahon n√£o parece ser amig√°vel`,
      },
      {
        type: 'alert',
        body: 'Observe que para interpolar uma vari√°vel ela precisa estar em ${} sen√£o n√£o ir√° funcionar!',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ conchece mais sobre o tipo texto, que tal refor√ßar isso com algumas quest√µes?',
      },
    ],
  },
  {
    starId: 6,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Muito bom, j√° que eles n√£o entendem mensagem do tipo texto, s√≥ resta tentar com o tipo num√©rico.',
      },
      {
        type: 'default',
        title: 'Tipo inteiro',
        body: 'Os n√∫meros em um programa podem ser inteiros e reais. Primeiramente, vamos falar sobre o tipo inteiro. Ele diz respeito aos n√∫meros sem parte decimal ou fracion√°ria, como -5, 0, 1, 2, 3, entre outros.',
      },
      {
        type: 'default',
        title: 'Declarando inteiros',
        body: 'Podemos declarar uma vari√°vel com um tipo n√∫mero inteiro dessa forma:',
      },
      {
        type: 'code',
        body: `var identificador: 2370`,
      },
      {
        type: 'alert',
        body: 'Perceba que diferentemente do tipo texto, √© preciso que o valor num√©rico n√£o esteja entre aspas.',
      },
      {
        type: 'default',
        title: 'Reais',
        body: 'Al√©m dos inteiro h√° os n√∫meros reais, tamb√©m conhecidos como n√∫meros de ponto flutuante, que nada mais s√£o do que n√∫meros com parte decimal, veja:',
      },
      {
        type: 'code',
        body: `var serie = 8.5`,
      },
      {
        type: 'default',
        title: 'N√∫meros e textos',
        body: 'Cuidado ao tentar concatenar n√∫meros e textos que s√£o n√∫meros, acontece algo n√£o t√£o surpreendente: n√∫mero se torna um texto e acaba sendo juntado com n√∫mero que j√° era texto, mas n√£o havendo uma soma.',
      },
      {
        type: 'code',
        body: `
  var identificador = "2370"
  var serie = 8.5
  escreva("o RG do meu foguete √© " + identificador + 70)
  
  resultado: o RG do meu foguete √© 237070
     `,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que que deu 23708.5 ao inv√©s de 2378.5, justamente porque o n√∫mero foi convertido para texto para a√≠ sim ser concatenado com outro texto.',
      },
      {
        type: 'default',
        title: 'Convers√£o de n√∫meros',
        body: 'Tamb√©m √© poss√≠vel converter um n√∫mero inteiro para real, basta que o resultado de uma opera√ß√£o com um inteiro (uma divis√£o, por exemplo) resulte em um tipo real. O contr√°rio tamb√©m √© poss√≠vel.',
      },
      {
        type: 'code',
        body: `
  var codigo = 467 / 2
  escreva("Enviar c√≥digo: ", codigo)
  
  resultado: Enviar c√≥digo: 233.5
     `,
      },
      {
        type: 'alert',
        body: 'Contudo, vamos falar sobre opera√ß√µes aritm√©ticas mais tarde para n√£o estragar a surpresa.)',
      },

      {
        type: 'list',
        body: 'Agora vamos testar o que voc√™ aprendeu sobre tipos num√©ricos!',
      },
    ],
  },
  {
    starId: 7,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Parece que sua mensagem foi enviada e finalmente foi entendida üéâ! Contudo, eles enviaram uma resposta e √© do tipo diferente do que j√° foi visto antes.',
      },
      {
        type: 'default',
        title: 'E qual √©?',
        body: 'Tipo l√≥gico que n√£o s√£o nada mais do que valores que armazenam uma √∫nica op√ß√£o entre apenas duas possibilidades poss√≠veis: verdadeiro ou falso.',
      },
      {
        type: 'default',
        title: 'Declara√ß√£o do tipo l√≥gico',
        body: 'Para declarar um tipo de dado l√≥gico, basta atribuir um valor verdadeiro ou um valor falso logo depois da vari√°vel:',
      },
      {
        type: 'code',
        body: `
  var respostaEnviada = verdadeiro
  var eInimigo = falso
              `,
      },
      {
        type: 'default',
        title: 'Declara√ß√£o do tipo l√≥gico',
        body: 'No exemplo acima, a primeira vari√°vel indica se a resposta foi enviada (verdadeiro) ou n√£o foi envidada (false). A segunda vari√°vel indica se quem enviou √© amigo (verdadeiro) ou inimigo (falso):',
      },
      {
        type: 'alert',
        body: 'Perceba que o nome dessas vari√°veis s√£o compostas por palavras diferentes, mas sem ser separadas por espa√ßo. ',
      },
      {
        type: 'alert',
        body: 'At√© a√≠ tudo bem, mas veja que todas as palavras est√£o em mai√∫sculas exceto a primeira. Esse padr√£o se chama camelCase por lembrar as costas de um camelo e √© bem comum na hora de escrever nomes de vari√°veis.',
      },
      {
        type: 'alert',
        body: 'Usando dados l√≥gicos, √© poss√≠vel usar esse valores para trabalhar com os operadores l√≥gicos, como "e" e "ou", como tamb√©m com estruturas condicionais, mas vamos deixar isso para outra hora.',
      },
      {
        type: 'default',
        title: 'O que eu fa√ßo com essa resposta enviada?',
        body: 'O planeta pro√≠be a entrada de pessoas com armas, ent√£o √© bom deixar claro que voc√™ n√£o tem nenhuma:',
      },
      {
        type: 'code',
        body: `
  var armas = nulo
          `,
      },
      {
        type: 'default',
        title: 'O que diabos √© esse nulo?',
        body: 'Esqueci de dizer, mas existe um tipo de dado especial chamado nulo que basicamente quer dizer que a vari√°vel n√£o tem nenhum valor. Isso quer dizer tamb√©m que nulo √© atribu√≠do automaticamente a uma vari√°vel quando ela √© declarada sem um valor atribu√≠do a ela.',
      },
      {
        type: 'code',
        body: `var espaco
  escreva(espaco)
  
//  Resultado: nulo`,
      },
      {
        type: 'alert',
        body: 'Mais para frente veremos que nulo pode ser usado como um valor falso.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que voc√™ aprendeu um pouco mais sobre valores l√≥gicos que tal praticar um pouco mais?',
      },
    ],
  },
  {
    starId: 8,
    texts: [
      {
        type: 'default',
        title: 'Miss√£o cumprida!',
        body: 'Sim! Pelo visto o ambiente do planeta √© habit√°vel üéâ! Contudo, voc√™ ainda tem uma quest√£o pendente.',
      },
      {
        type: 'default',
        title: 'E qual seria?',
        body: 'Voc√™ precisa verificar o custo vida, pois n√£o d√° para viver em um planeta sem analisar os gastos n√©?',
      },
      {
        type: 'default',
        title: 'E como fa√ßo isso?',
        body: 'Por sorte seu foguete √© equipado com tecnologia de ponta que faz c√°lculos usando operadores aritm√©ticos.',
      },
      {
        type: 'default',
        title: 'Pera a√≠, operadores aritm√©ticos? Tipo somar e subtrair?',
        body: 'Sim!! n√£o s√≥ aritm√©ticos, mas tamb√©m l√≥gicos e relacionais!',
      },
      {
        type: 'alert',
        body: 'Por√©m, por enquanto vamos apenas usar os aritm√©ticos para efetuar opera√ß√µes mais simples.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, j√° √© uma boa hora de reabastecer o foguete com combust√≠vel, ou seja, precisamos adicionar combust√≠vel atual com combust√≠vel novo.',
      },
      {
        type: 'default',
        title: 'Adi√ß√£o (+)',
        body: 'E para isso n√≥s usamos o operador "+" de adi√ß√£o, o mesmo usado para concatenar textos.',
      },
      {
        type: 'code',
        body: `
var combustivel = 100;
var combustivelAtual = 200;
var totalCombustivel = combustivel + combustivelAtual;
escreva("A nave agora tem " + totalCombustivel + "  gal√µes de combust√≠vel");

// Resultado: A nave agora tem 300 gal√µes de combust√≠vel.`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Subtra√ß√£o (-)',
        body: 'Al√©m de reabastecer, o pr√≥prio foquete consegue calcular o quanto de supriementos vc j√° consumiu at√© agora, utilizando simplesmente o operador de subtra√ß√£o "-".',
      },
      {
        type: 'code',
        body: `
var suprimentosConsumidos = 250;
var suprimentosAtual = 300;
var suprimentosRestante = suprimentosAtual - suprimentosConsumidos;
escreva("Voc√™ possui " + suprimentosRestante " suprimentos");

// Resultado: Voc√™ possui 50 suprimentos`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Parece que voc√™ n√£o tem muitos suprimentos agora n√£o √© mesmo?',
      },
      {
        type: 'default',
        title: 'Nem tudo est√° perdido.',
        body: 'Por sua sorte (de novo) seu foguete est√° preparado com uma m√°quina de produzir suprimentos.',
      },
      {
        type: 'default',
        title: 'Mas nem tudo s√£o flores',
        body: 'A m√°quina de fazer suprimentos produz apenas 1 suprimento por dia. Logo, para fazer o c√°lculo da quantidade de suprimentos que voc√™ teria em um m√™s √© necess√°rio fazer uma opera√ß√£o de multiplica√ß√£o.',
      },
      {
        type: 'default',
        title: 'Multiplica√ß√£o (*)',
        body: 'Voc√™ n√£o leu errado. Para fazer um c√°lculo de multiplica√ß√£o, usamos o operador "*" em vez de "x"',
      },
      {
        type: 'code',
        body: `
var suprimento = 1;
var diasMes = 30;
var suprimentosMes = suprimento * diasMes;
escreva("Em um m√™s voc√™ ter√° " + suprimentosMes + " suprimentos");

//  Resultado: Em um m√™s voc√™ ter√° 30 suprimentos`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Ser√° que √© o suficiente?',
        body: 'Parece muito para voc√™? Ok, mas agora √© necess√°rio calcular a quantidade de suprimentos que voc√™ consome por m√™s. Normalmente, vejo que seu consumo √© 90 suprimentos ao m√™s, ent√£o basta dividir 90 por 30.',
      },
      {
        type: 'default',
        title: 'Divis√£o (/)',
        body: 'A√≠ temos mais uma caso diferenciado: em vez de usar o operador "√∑" que voc√™ provavelmente j√° se acustumou a utilizar, √© necess√°rio usar a barra "/". Veja o exemplo:',
      },
      {
        type: 'code',
        body: `
var suprimentosMes = 90;
var diasMes = 30;
var suprimentosDia = suprimentosMes / diasMes;
escreva("Voc√™ consome " + suprimentosDia + " por dia");

//  Resultado: Voc√™ consome 3 suprimentos por dia`,
        isRunnable: true,
      },
      {
        type: 'default',
        body: 'Obviamente, voc√™ tamb√©m pode usar m√∫ltiplos operadores, diferentes ou n√£o, ao mesmo tempo em uma √∫nica linha.',
      },
      {
        type: 'alert',
        body: 'Cuidado! Os operadores obedecem a ordem de preced√™ncia da matem√°tica, ou seja, opera√ß√µes de multiplica√ß√£o ou divis√£o s√£o executadas antes de adi√ß√£o ou subtra√ß√£o!',
      },
      {
        type: 'default',
        body: 'Por exemplo, ao querer calcular 5 + 5 * 5, o resultado n√£o vai ser 50, mas sim 30!',
      },
      {
        type: 'code',
        body: `
escreva(5 + 5 * 5);

//  Resultado: 30`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas ent√£o o que eu fa√ßo?',
        body: 'Assim como na matem√°tica, voc√™ deve colocar entre par√™nteses as express√µes que deseja que sejam calculadas primeiro.',
      },
      {
        type: 'code',
        body: `
escreva((5 + 5) * 5);

//  Resultado: 50`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja um exemplo usando v√°rios operadores:',
      },
      {
        type: 'code',
        body: `
var diasMes = 30;
var suprimentosDia = 1;
var suprimentosAtual = 300;
var consumoTotal = suprimentosAtual - 250 + 1 * diasMes - 3 * diasMes;
escreva('no final do m√™s voc√™ ter√° ' + consumoTotal + ' de suprimentos');

//  Resultado: no final do m√™s voc√™ ter√° -10 de suprimentos`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'N√£o √© preciso ser o mestre da matem√°tica pra perceber que voc√™ n√£o ter√° quantides de suprimento para sobreviver nesse planeta, n√£o √© mesmo?',
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso, suponho que voc√™ precise achar vida alien√≠gena para obter outros tipos de suprimentos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, ainda h√° quest√£o de quanto de energia existe dispon√≠vel para os dois motores presentes no foguete, pois por algum motivo a propor√ß√£o n√£o est√° igual.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Para o foguete funcionar direito, seus dois motores precisam dividir a energia de forma equivalente, caso contr√°rio as chances dele explodir com voc√™ dentro aumentam bastante :)',
      },
      {
        type: 'default',
        title: null,
        body: 'No momento atual h√° dispon√≠vel 10125 de energia. Para saber se √© poss√≠vel distribuir a energia igualmente para os dois motores, basta verificar se esse n√∫mero √© divis√≠vel por 2.',
      },
      {
        type: 'default',
        title: 'M√≥dulo (%)',
        body: 'Para isso, podemos usar um operador especial chamado "m√≥dulo", que serve para calcular ao resto da divis√£o entre 2 n√∫meros usando o s√≠mbolo de porcentagem (%).',
      },
      {
        type: 'code',
        body: `
var energiaAtual = 10125;
var resto = 10125 % 2;
escreva('o resto √© igual a ' + resto);

//  Resultado: o resto √© igual a 1`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Explica√ß√£o',
        body: '10125 dividido por 2 √© igual 5062 e sobra 1, ou seja, a propor√ß√£o n√£o ser√° igual para os dois motores üò¢.',
      },
    ],
  },
  {
    starId: 9,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'C√° estamos, e tudo o que resta a fazer √© cair fora desse planeta.',
      },
      {
        type: 'default',
        title: '#Partiu',
        body: 'No entanto, √© preciso verificar se tudo est√° ok para fazer uma partida segura e manter uma viagem no espa√ßo.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Por exemplo, √© importante averiguar se a quantidade de combust√≠vel atualmente dispon√≠vel √© maior que a quantidade necessa√°ria para fazer decolagem.',
      },
      {
        type: 'default',
        title: 'E como fazer isso?',
        body: '√â a√≠ que entra em cena os operadores relacionais! Eles servem justamente para fazer uma compara√ß√£o (rela√ß√£o) entre dois valores.',
      },
      {
        type: 'list',
        title: 'Operador de maior que (>)',
        body: 'Por exemplo, caso queira verificar se um n√∫mero √© maior que outro, voc√™ pode utilizar o operador "maior que" representado pelo s√≠mbolo ">", como voc√™ deve saber.',
      },
      {
        type: 'code',
        body: `
var combAtual = 100;
var combExigido = 5;
escreva(combAtual > combExigido);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o resultado da compara√ß√£o entre dois valores √© um valor do tipo l√≥gico, e isso vai acontecer toda vez voc√™ usar os operadores relacionais.',
      },
      {
        type: 'alert',
        body: 'N√£o se esque√ßa disso, pois isso vai ser bastante importante depois!',
      },
      {
        type: 'default',
        title: null,
        body: 'E √© claro, se existe o operador de maior que, tamb√©m existe o de menor que.',
      },
      {
        type: 'list',
        title: 'Operador de menor que (<)',
        body: 'Por exemplo, se quisermos fazer a mesma compara√ß√£o anterior, s√≥ que verificando se a quantidade de combust√≠vel necess√°ria √© menor que a atual, ter√≠amos que o operador "menor que" (<).',
      },
      {
        type: 'code',
        body: `
var combAtual = 100;
var combExigido = 5;
escreva(combAtual < combExigido);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Note que o resultado agora √© falso justamente porque a quantidade atual √© maior que a exigida.',
      },
      {
        type: 'default',
        title: null,
        body: 'Come√ßamos a decolar! Entretanto, √© preciso checar se a velocidade atual do foguete √© igual ou pelo menos superior que a velocidade de decolagem necess√°ria para sair da atmosfera.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso n√£o d√° para usar operador ">" porque ele s√≥ verifica se √© maior ou n√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'E no nosso caso a velocidade n√£o precisa ser t√£o superior, mas no m√≠nimo igual.',
      },
      {
        type: 'list',
        title: 'Operador maior ou igual a (>=)',
        body: '√â a√≠ que entra em cena o novo operador que verifca se um valor √© igual ou maior que outro valor, e por isso o motivo do s√≠mbolo ">=".',
      },
      {
        type: 'code',
        body: `
var velAtual = 300;
var velExigida = 300;
escreva(velAtual >= velExigida);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'Operador menor ou igual a (>=)',
        body: 'Se o caso fosse checar se um valor √© menor ou igual a outro, utilizar√≠amos o "<=".',
      },
      {
        type: 'code',
        body: `
var velAtual = 300;
var velExigida = 300;
escreva(velAtual <= velExigida);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o resultado √© mesmo que usar o ">=", pois ambos os operadores checam se √© verdadeiro uma de duas condi√ß√µes (se √© maior/menor ou igual).',
      },
      {
        type: 'alert',
        body: 'Note tamb√©m que a gente est√° usando apenas n√∫meros para fazer as compara√ß√µes. Caso us√°ssemos outro tipo de dado, o programa daria erro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Beleza, mas ainda h√° outros quest√µes a serem conferidas.',
      },
      {
        type: 'default',
        title: 'E quais seriam?',
        body: 'Por exemplo, lembra que eu disse que os dois motores do foguete precisam usar a mesma quantidade de energia?',
      },
      {
        type: 'default',
        title: 'Sim!',
        body: 'Ent√£o, √© poss√≠vel fazer isso agora usando o operador de igual, por√©m n√£o o sinal "=", visto que esse serve para atribuir valores a vari√°veis.',
      },
      {
        type: 'list',
        title: 'Operador de igual (==)',
        body: 'Para verificar se um valor √© igual a outro, a gente usa o s√≠mbolo de "==", justamente para diferenciar do operador de "=".',
      },
      {
        type: 'code',
        body: `
var energiaMoto1 = 501;
var energiaMoto2 = 500;
escreva(energiaMoto1 == energiaMoto2);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Como esperado, o resultado √© falso, pois os dois n√£o est√£o usando a mesma quantidade de energia!',
      },
      {
        type: 'default',
        title: null,
        body: 'O resultado seria verdadeiro se estiv√©ssemos verificando se as quantidades s√£o diferentes.',
      },
      {
        type: 'list',
        title: 'Operador de diferente (!=)',
        body: 'Para fazer isso, basta usar o operador de "!=", que checa se dois valores s√£o diferentes.',
      },
      {
        type: 'code',
        body: `
var energiaMoto1 = 501;
var energiaMoto2 = 500;
escreva(energiaMoto1 != energiaMoto2);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora o resultado √© verdadeiro, justamente porque ambos n√£o s√£o iguais.',
      },
      {
        type: 'default',
        title: 'Se √© verdadeiro, ent√£o est√° de boa?',
        body: 'N√ÉO! Independentemente se √© verdadeiro ou n√£o, ainda estamos em uma fria porque o foguete tem chances de explodir j√° que as quantidades de energia est√£o diferentes üò¢.',
      },
    ],
  },
  {
    starId: 10,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ok, a prioridade agora √© concertar os motores do foguete!',
      },
      {
        type: 'default',
        title: null,
        body: 'Estamos no compartimento dos motores, e agora devemos verificar o funcionamento de um por vez.',
      },
      {
        type: 'default',
        title: 'E como fazer isso?',
        body: 'Cada motor possui duas turbinas e elas devem estar girando ao mesmo tempo para ele funcionar corretamente.',
      },
      {
        type: 'default',
        title: 'E... Como fazer isso?',
        body: 'Para conferir se tanto um, quanto o outro est√£o girando, voc√™ pode conferir usando um operador l√≥gico.',
      },
      {
        type: 'default',
        title: 'O que √© um operador l√≥gico?',
        body: 'Operadores l√≥gicos s√£o utilizados para comparar valores do tipo l√≥gico, diferentemente dos relacionais, que s√≥ comparam n√∫meros.',
      },
      {
        type: 'list',
        title: 'Operador (e)',
        body: 'Para testar se dois valores s√£o verdadeiros, voc√™ deve usar o operador "e", que verifica se o primeiro valor √© igual a verdadeiro E se o segundo tamb√©m √© verdadeiro.',
      },
      {
        type: 'code',
        body: `
var girandoTurbina1 = verdadeiro;
var girandoTurbina2 = falso;
escreva(girandoTurbina1 e girandoTurbina2);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'O resultado √© falso, pois apenas a turbina 1 est√° girando e para que resultasse em verdadeiro, ambos os valores deveriam ser igual a verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Pois bem, ao concertar a turbina 1, voc√™ deve verificar novamente, mas dessa vez voc√™ pode colocar o resultado da compara√ß√£o em uma vari√°vel √† parte.',
      },
      {
        type: 'code',
        body: `
var girandoTurbina1 = verdadeiro;
var girandoTurbina2 = verdadeiro;
var turbinasGirando = girandoTurbina1 e girandoTurbina2;
escreva(turbinasGirando);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas √© poss√≠vel isso?',
        body: 'Sim! Lembre-se que esses operadores comparam valores do tipo l√≥gico, ent√£o qualquer express√£o que resulta em um valor l√≥gico pode ser utilizado para comparar outro valor.',
      },
      {
        type: 'default',
        title: 'Explica mais',
        body: 'Por exemplo, voc√™ pode testar se o n√≠vel de combust√≠vel atual est√° acima do m√≠nimo para o funcionamento, ou seja combAtual > combMin.',
      },
      {
        type: 'code',
        body: `
var turbinasGirando = verdadeiro;
var combAtual = 90;
var combMin = 10;
escreva(turbinasGirando e combAtual > combMin);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Explica√ß√£o',
        body: 'Como turbinasGirando √© verdadeiro, assim como combAtual > combMin resulta em verdadeiro, ent√£o o resultado final √© verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Beleza! O motor 1 est√° funcionado corretamente. Agora resta verificar o motor 2',
      },
      {
        type: 'default',
        title: 'O segundo tamb√©m est√° funcionando',
        body: '√â... Parece que as turbinas do motor 2 est√£o girando. Ent√£o, pode haver um problema no tipo de combust√≠vel que est√° sendo consumido pelo motor',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'O motor pode aceitar apenas dois tipos de combust√≠vel: Etherium e Plasmatron.',
      },
      {
        type: 'default',
        title: null,
        body: 'Logo, apenas uma condi√ß√£o precisa ser verdadeira para o motor funcionar.',
      },
      {
        type: 'list',
        title: 'Operador (ou)',
        body: 'Para fazer tal fa√ßanha, √© s√≥ usar o operador "ou", que verifica se o primeiro valor √© igual a verdadeiro OU o segundo √© igual a verdadeiro.',
      },
      {
        type: 'code',
        body: `
var comb = "Quantum";
escreva(comb == "Etherium" ou comb == "Plasmatron");
    
//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Como esperado, o combust√≠vel consumido por esse motor n√£o √© aceit√°vel',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas agora se trocarmos o combust√≠vel para "Plasmatron"...',
      },
      {
        type: 'code',
        body: `
var comb = "Plasmatron";
escreva(comb == "Etherium" ou comb == "Plasmatron");
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas e o Etherium?',
        body: 'Como voc√™ percebeu, o resultado √© verdadeiro porque apenas uma das duas compara√ß√µes precisa resultar em verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso, o combust√≠vel n√£o √© do tipo "Etherium", mas √© do tipo "Plasmatron", o que tamb√©m √© aceit√°vel.',
      },
      {
        type: 'default',
        title: 'Troca feita com sucesso!',
        body: 'Agora sim o motor 2 est√° funcionando corretamente.',
      },
      {
        type: 'default',
        title: 'Ufa!',
        body: 'Calma a√≠! √â bom verificar antes se agora os dois motores est√£o funcionando corretamente:',
      },
      {
        type: 'code',
        body: `
var motor1Funcionando = verdadeiro;
var motor2Funcionando = verdadeiro;
var tudoOk = !motor1Funcionando e motor2Funcionando
escreva(tudoOk);
    
//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Calma a√≠! Mas as duas vari√°veis s√£o verdadeiro!',
        body: 'Sim! Acontece que h√° um operador extra sendo utilizado.',
      },
      {
        type: 'default',
        title: 'Como assim? Onde?',
        body: 'Perceba que antes da vari√°vel motor1Funcionando h√° um ponto de exclama√ß√£o. E sua similaridade com o operador "!=" n√£o √© coincid√™ncia.',
      },
      {
        type: 'list',
        title: 'Operador de nega√ß√£o (!)',
        body: 'Esse operador serve para inverter valores do tipo l√≥gico. Ou seja, se colocado antes de um valor, ele inverte o seu valor l√≥gico.',
      },
      {
        type: 'default',
        title: 'S√©rio?',
        body: 'Sim! Por exemplo, se o valor inicial for falso, ele ser√° invertido para verdadeiro, e vice-versa.',
      },
      {
        type: 'code',
        body: `
escreva(!falso);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi!',
        body: 'Ent√£o basta tirar esse operador de nega√ß√£o.',
      },
      {
        type: 'code',
        body: `
var motor1Funcionando = verdadeiro;
var motor2Funcionando = verdadeiro;
var tudoOk = motor1Funcionando e motor2Funcionando
escreva(tudoOk);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
    ],
  },
  {
    starId: 11,
    texts: [
      {
        type: 'default',
        title: 'S√£o e salvo',
        body: 'Muito bem!! voc√™ se salvou da chuva de asteroides gigantes üéâ!.',
      },
      {
        type: 'default',
        body: 'Agora, resta visitar o novo planeta que voc√™ descobriu, e por sorte ele √© totalmente amig√°vel!',
      },
      {
        type: 'default',
        title: 'Pera a√≠! Como voc√™ sabe disso?',
        body: 'Simples, o foguete entende estruturas condicionais sempre que a situa√ß√£o pede.',
      },
      {
        type: 'default',
        title: 'Que? Estruturas condicionais?',
        body: 'Sim! Estruturas condicionais s√£o recursos da programa√ß√£o que permitem que um trecho de c√≥digo seja executado apenas se uma determinada condi√ß√£o for verdadeira.',
      },
      {
        type: 'alert',
        body: 'H√° 3 maneiras de criar uma instru√ß√£o condicional:\n 1 - se\n 2 - sen√£o\n 3 - sen√£o se.\n Por enquanto, vamos come√ßar pelo b√°sico',
      },
      {
        type: 'list',
        title: 'Estrutura condicional simples (se)',
        body: 'A forma mais b√°sica √© escrever "se" e depois a condi√ß√£o que deve ser verificada entre par√™nteses. Em seguida voc√™ abre e fecha chaves ({}) e coloca o c√≥digo que voc√™ deseja que seja executado.',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro;

se (planetaAmigavel) {
    escreva(planetaAmigavel)
}
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal!',
        body: 'Perceba que a condi√ß√£o (tudo escrito em par√™nteses), deve resultar em verdadeiro para que o c√≥digo entre chaves seja executado.',
      },
      {
        type: 'default',
        title: 'Mas se n√£o for?',
        body: 'Simples: o programa ignora tudo que est√° entre chaves do se e executa todo o resto do c√≥digo ap√≥s ele.',
      },
      {
        type: 'code',
        body: `
var souBonito = falso;

se (souBonito) {
    escreva(souBonito)
}
    
//  Resultado: sem resultado`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'S√≥ isso?',
        body: 'N√≥s podemos usar tudo que vimos anteriormente que conseguem resultar em valores l√≥gicos dentro da condi√ß√£o do se.',
      },
      {
        type: 'code',
        body: `
var poder = 8000 * 1000;

se (poder > 8000) {
    escreva('Seu poder √© mais de 8 mil!')
}
    
//  Resultado: Seu poder √© mais de 8 mil!`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi!',
        body: 'Bacana, mas acho que j√° √© hora de voc√™ entender o que √© escopo de vari√°vel.',
      },
      {
        type: 'default',
        title: 'Essopo?',
        body: 'N√£o, escopo. No geral, o escopo √© a regi√£o do c√≥digo em que uma vari√°vel pode ser acessada dentro do programa.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Em programa√ß√£o, normalmente existem dois tipos de escopo de vari√°vel: global e local.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'As vari√°veis globais s√£o aquelas que s√£o declaradas fora de qualquer tipo de instru√ß√£o (se, para, funcao e por a√≠ vai).',
      },
      {
        type: 'default',
        title: 'Como assim? Para? Fun√ß√£o?',
        body: 'No momento se concentre apenas a na instru√ß√£o "se" que estamos estudando agora.',
      },
      {
        type: 'default',
        title: 'Ok.',
        body: 'Por exemplo, caso tentemos acessar uma vari√°vel declarada dentro de "se", o c√≥digo resultar√° em "vari√°vel indefinida"',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro; /* vari√°vel global */

se (verdadeiro) {
    var planetaNome = "Ifthenia"; /* vari√°vel local */
    }
    
    escreva(planetaNome);
//  Resultado: ERRO: Vari√°vel n√£o definida: 'planetaNome'`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'O "/* */" √© outra forma de colar coment√°rios dentro do c√≥digo',
      },
      {
        type: 'default',
        title: 'Nossa...',
        body: 'O erro no c√≥digo acima ocorre, pois planetaNome √© uma vari√°vel local porque ela foi declarada dentro da instru√ß√£o se.',
      },
      {
        type: 'default',
        title: 'Ent√£o √© s√≥ colocar para fora do se?',
        body: 'Sim! A√≠ voc√™ tranformaria ela em uma vari√°vel de escopo global, assim como a vari√°vel planetaAmigavel.',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro; /* vari√°vel global */
var planetaNome = "Ifthenia"; /* vari√°vel global */

se (verdadeiro) {
}
escreva(planetaNome);
escreva(planetaAmigavel);
    
//  Resultado: Ifthenia verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Humm...',
        body: '√â como se os escopos fossem dois universos paralelos: Pode haver uma vari√°vel local com o mesmo nome de uma global, por√©m elas ainda v√£o ser comportar de maneira diferente.',
      },
      {
        type: 'code',
        body: `
var planetaNome = "Ifthenia"; /* vari√°vel global */

se (verdadeiro) {
    var planetaNome = "Elsethenia" /* vari√°vel local */
}
escreva(planetaNome);

//  Resultado: Ifthenia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi tudo!',
        body: 'Legal! Ent√£o, que tal praticar um pouco?',
      },
    ],
  },
  {
    starId: 12,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'J√° que voc√™ est√° indo em dire√ß√£o ao planeta, √© bom regular a velocidade do foguete para fazer um pouso seguro.',
      },
      {
        type: 'default',
        title: 'Como fazer isso?',
        body: 'A velocidade atual do foguete √© 50, caso a for√ßa da gravidade seja maior que 10, a velocidade dever√° diminuir em 20, caso contr√°rio precisar√° aumentar em 20.',
      },
      {
        type: 'code',
        body: `
var velFoguete = 50;
var gravidade = 11;

se (gravidade > 10) {
  velFoguete -= 20;
}

se (gravidade < 10) {
  velFoguete += 20;
}
 
escreva(velFoguete);
// Resultado: 30`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Perceba que usei += e -= para alterar o valor de velFoguete. Isso √© a mesma coisa que escrever: velFoguete = velFoguete + 20 e velFoguete = velFoguete - 20, s√≥ que de um jeito mais curto.',
      },
      {
        type: 'alert',
        body: 'Esse operador especial √© chamado de operador de atribui√ß√£o aritm√©tica, ou seja, ele pode ser usado para fazer qualquer uma das quatros opera√ß√µes aritm√©ticas (+=, -=, *=, /=)',
      },
      {
        type: 'default',
        title: null,
        body: 'Voltando ao c√≥digo, voc√™ pode achar ele cumpre o seu papel perfeitamente, o que de fato √© verdade.',
      },
      {
        type: 'default',
        title: 'Mas, ent√£o?',
        body: 'Acontece que geralmente ap√≥s terminar a escrita um c√≥digo, haver√° sempre a oportunidade de melhor√°-lo, tornando-o mais eficiente e limpo.',
      },
      {
        type: 'default',
        title: null,
        body: "Neste caso, em vez de usar dois 'se', √© poss√≠vel usar outra estrutura, chamada se-sen√£o, veja s√≥:",
      },
      {
        type: 'code',
        body: `
var velFoguete = 50;
var gravidade = 11;

se (gravidade > 10) {
  velFoguete -= 20;
} senao {
  velFoguete += 20;
}

escreva(velFoguete);
// Resultado: 70
`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: null,
        body: 'Como o nome implica, caso a primeira condi√ß√£o n√£o seja verdadeira, apenas o c√≥digo contido em senao √© executado.',
      },
      {
        type: 'list',
        title: null,
        body: 'Ou seja, se for verdadeiro fa√ßa algo, sen√£o fa√ßa outra coisa.',
      },
      {
        type: 'default',
        title: 'Entendi',
        body: 'Agora que a velocidade est√° regulada, √© preciso verificar se o ar √© respir√°vel ou n√£o.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Basta checar se a atmosfera tem n√≠veis de oxig√™nio adequado e se t√™m aus√™ncia de gases t√≥xicos',
      },
      {
        type: 'code',
        body: `
var oxigenioLevel = 20; /* n√≠vel de oxig√™nio */
var nitrogenioLevel = 78; /* n√≠vel de nitrog√™nio */
var outrosGasesLevel = 2; /* n√≠veis de outros gases */

se (
    oxigenioLevel >= 19 e 
    oxigenioLevel <= 23 e 
    nitrogenioLevel >= 75 e 
    nitrogenioLevel <= 81 e 
    outrosGasesLevel <= 5
    ) {
  escreva("A atmosfera √© respir√°vel!");
} senao {
  escreva("A atmosfera n√£o √© respir√°vel!");
}

// Resultado: A atmosfera √© repir√°vel!`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Acho que voc√™ j√° deve ter percebido, mas como visto no c√≥digo acima, √© poss√≠vel usar mais de um operador l√≥gico para formar uma condi√ß√£o, como tamb√©m escrever uma condi√ß√£o debaixo da outra, que o programa ser√° executado normalmente.',
      },
      {
        type: 'default',
        title: 'Sim',
        body: 'Agora com a confirma√ß√£o de que a atmosfera √© respir√°vel, podemos aterrissar no planeta de forma segura, mas n√£o antes de praticar o que vimos.',
      },
    ],
  },
  {
    starId: 13,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Enfim, pousamos com seguran√ßa!',
      },
      {
        type: 'default',
        title: 'Ufa!',
        body: 'Parece que v√°rias pessoas desse planeta j√° come√ßaram a rodear o foguete.',
      },
      {
        type: 'default',
        title: 'O que fazer?',
        body: '√â bom dizer oi para eles, mas como eles n√£o falam a nossa l√≠ngua, ser√° preciso usar um tradutor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por padr√£o ele traduz 2 l√≠nguas estrangeiras: Xanxiriano e Krynnishiano. Por√©m, caso n√£o seja nenhuma das duas, o tradutor procurar√° outro idioma em seu banco de dados',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer um programa disso, utilizaremos a terceira varia√ß√£o da estrutura condicional: sen√£o-se.',
      },
      {
        type: 'default',
        title: 'Mas n√£o j√° vimos isso antes?',
        body: 'N√£o confunda com um simples sen√£o. Neste caso, o sen√£o-se (escrito no c√≥digo como senao se) sempre vir√° depois do primeiro se e antes de sen√£o (caso tenha):',
      },
      {
        type: 'code',
        body: `
var idioma = 'Vortaxiano'

se (idioma = 'Xanxiriano') {
  escreva("Traduzir de Xanxiriano");
} senao se (idioma = 'Krynnishiano') {
  escreva("Traduzir de Krynnishiano");
} senao {
  escreva("Traduzir de outro idioma");
}

// Resultado: Traduzir de outro idioma`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o senao se funciona como um se normal, exigindo que passemos uma condi√ß√£o, que caso seja verdadeira, seu bloco de c√≥digo ser√° executado em vez o do senao.',
      },
      {
        type: 'default',
        title: 'Legal',
        body: 'Al√©m disso, a estrutura sen√£o-se tamb√©m √© conhecido como "se aninhado", justamente porque podemos colocar v√°rios senao se dentro de uma estrura condicional.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso ser√° convenientemente √∫til, pois para voc√™ abrir a sa√≠da do foguete, voc√™ precisar√° de uma senha correta.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'A senha √© composta por 4 n√∫meros, e dependendo da combina√ß√£o pode abrir um compartimento diferente do foguete, veja s√≥:',
      },
      {
        type: 'code',
        body: `
var senha = 9713;

se (senha = 2222) {
  escreva("Abrir cozinha");
} senao se (senha = 4567) {
  escreva("Abrir banheiro");
} senao se (senha = 7568) {
  escreva("Abrir quarto de dormir");
} senao se (senha = 5781) {
  escreva("Abrir sala de controle");
}
...
} senao
  escreva("Senha n√£o existe");
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Existe uma forma mais f√°cil de fazer isso usando outro tipo de estrutura, mas podemos falar sobre ela depois.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por enquanto quero que voc√™ perceba que agora podemos construir estruturas complexas, colando se dentro de se.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, voc√™ pode quere desconfiar se os alien√≠genas l√° fora s√£o verdadeiramente amig√°veis',
      },
      {
        type: 'default',
        title: null,
        body: 'Neste caso, podemos usar uma condi√ß√£o dentro de outra condi√ß√£o:',
      },
      {
        type: 'code',
        body: `
var povoAmigavel = verdadeiro;
var povoArmado = falso;
        
se (povoAmigavel == falso) {
    se (povoArmado == verdadeiro) {
        escreva('Fugir para longe')
    } senao {
        escreva('Cair na porrada')
    }
} senao {
    escreva('Tentar conversar') 
}

// Resultado: Tentar conversar`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Lembre-se: caso a condi√ß√£o de um se (se, sen√£o ou sen√£o se) for verdadeiro, todo o bloco de c√≥digo presente nele ser√° executado, sejam outras estruturas condicionais ou n√£o. Caso seja de fato executado, o computador sai do se e depois executa tudo que est√° fora dele.',
      },
    ],
  },
  {
    starId: 14,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Pela conversa que estamos tendo com esse povo, parece que n√£o est√£o muito felizes de termos acabado de pousar em um jardim importante para eles.',
      },
      {
        type: 'default',
        title: 'Mas e agora?',
        body: 'Eles querem nos levar para seu rei para termos uma conversa, ent√£o resta obedecer.',
      },
      {
        type: 'default',
        title: 'Vish...',
        body: 'Chegando ao pal√°cio, o rei aparece furioso, e logo encarrega-se de pedir que escolhemos uma entre 4 p√≠lulas (verde, amarelo, azul e vermelho).',
      },
      {
        type: 'default',
        title: 'Do que se trata disso?',
        body: 'Envolve escolher o tipo de morte que desejamos ter üò®.',
      },
      {
        type: 'default',
        title: 'Putz',
        body: 'Podemos fazer um programa a partir disso, colocando a cor da p√≠lula escolhida em uma vari√°vel e verificando qual tipo de morte ela corresponde.',
      },
      {
        type: 'code',
        body: `
var cor = 'verde';
var morte = '';

se (cor == 'azul') {
  morte = 'Morrer asfixiado';
} senao se (cor == 'amarelo') {
  morte = 'Morrer de dor de cabe√ßa';
} senao se (cor == 'verde') {
  morte = 'Morrer de diarreia';
} senao se (cor == 'vermelho') {
  morte = 'morrer de ataque card√≠aco';
} senao {
  morte = 'N√£o morrer';
}

escreva(morte);
// Resultado: Morrer de diarreia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que √© bem parecido com o programa de verificar a senha correta para abrir a sa√≠da do foguete.',
      },
      {
        type: 'default',
        title: 'Verdade',
        body: 'Tanto nesse caso quanto no outro √© melhor usar outro tipo de estrutura condicional, que √© chamado de "Escolha caso"',
      },
      {
        type: 'default',
        title: 'Queee?',
        body: 'Essa √© uma estrutura condicional bastante diferenciada. Nela, em vez de usar instru√ß√µes que j√° vimos ("se", "senao se" e "se"), devemos utilizar apenas 3, que s√£o completamente diferentes: "escolha", "caso", "padrao"',
      },
      {
        type: 'default',
        title: 'N√£o entendi',
        body: 'Preste aten√ß√£o, a estrutura escolha caso permite que voc√™ execute diferentes blocos de c√≥digo com base no valor de algo.',
      },
      {
        type: 'default',
        title: 'Ok',
        body: 'Esse valor de algo √© avaliado uma vez e, em seguida, √© comparado com cada um dos casos no bloco escolha, veja:',
      },
      {
        type: 'code',
        body: `
var cor = 'verde';
var morte = '';

escolha (cor) {
  caso 'azul': 
    morte = 'Morrer asfixiado';
  caso 'amarelo': 
    morte = 'Morrer de dor de cabe√ßa';
  caso 'verde': 
    morte = 'Morrer de diarreia';
  caso 'vermelho': 
    morte = 'Morrer de ataque card√≠aco';
  padrao:
    morte = 'N√£o morrer';
}

escreva(morte);
// Resultado: Morrer de diarreia`,
        isRunnable: true,
      },
      {
        type: 'list',
        body: 'O resultado √© o mesmo que antes. O valor de cor entre par√™ntese √© comparado com os valores de cada caso dentro do bloco escolha.',
      },
      {
        type: 'list',
        body: 'Se corresponder com um, ent√£o ser√° executado tudo que estiver dentro do bloco deste caso, n√£o precisando mais comparar com os casos restantes, ou seja, o programa para de executar o "escolha caso" a partir do momento em que √© encontrado um caso conrrespondente.',
      },
      {
        type: 'list',
        body: 'Agora se o valor de cor n√£o corresponder a nenhum caso, ent√£o ser√° executado o que estiver no bloco "padrao", ou seja, se o valor de cor n√£o for igual a nenhum caso espec√≠fico, execute o que for padr√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, √© claro que n√£o queremos morrer de diarreia, ent√£o sa√≠mos correndo em dire√ß√£o ao foguete para fujirmos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Os guardas est√£o na nossa cola, resta entrar em uma caverna para despist√°-los.',
      },
      {
        type: 'default',
        title: null,
        body: 'Dentro da caverna √© poss√≠vel ver portais abrindo e fechando.',
      },
      {
        type: 'default',
        title: null,
        body: 'Eu ouvi falar que se voc√™ entrar em um portal roxo voc√™ pode parar em um lugar fant√°stico, mas caso seja vermelho ou azul, ele te pode levar a um limbo sem fim, e se for de qualquer outra cor ele n√£o leva para lugar nenhum.',
      },
      {
        type: 'default',
        title: 'S√©rio?',
        body: 'Sim, ent√£o essa √© mais uma situa√ß√£o para usarmos a estrutura de escolha caso',
      },
      {
        type: 'code',
        body: `
var cor = 'roxo';
var destino = '';

escolha (cor) {
  caso 'azul': 
  caso 'vermelho': 
    destino = 'Limbo';
  caso 'roxo': 
    destino = 'Lugar fant√°stico';
  padrao:
    destino = 'nenhum';
}

escreva(destino);
// Resultado: Lugar fant√°stico`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'N√£o expliquei antes, por√©m dois ou mais casos podem ter o mesmo bloco, isto √©, podem excutar um mesmo bloco de c√≥digo.',
      },
      {
        type: 'alert',
        body: 'Ou seja, nesta situa√ß√£o se um portal for tanto azul ou vermelho, o destino ser√° o limbo',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas como encontramos um portal roxo, resta entrar nele e ver o que nos aguarda.',
      },
    ],
  },
  {
    starId: 15,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ufa, parace que aqueles aliens estranhos foram para outra dire√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Contudo, agora estamos em um planeta completamente desconhecido.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para come√ßar tentar descobrir, podemos fazer uma varredura do local em que estamos, coletando amostras do solo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Toda vez que o fogute coleta uma amostra, podemos fazer um programa que incremente 1 a uma variavel do tipo n√∫mero com o nome "totalAmostras".',
      },
      {
        type: 'code',
        body: `
var totalAmostras = 0;
totalAmostras++;

escreva(totalAmostras)

// Resultado: 1`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Eu n√£o te contei, mas esse √© outro operador especial, chamado "operador de incremento" (++), que se colocado ap√≥s uma vari√°vel do tipo n√∫mero ele acrescenta 1 ao seu valor atual.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, o foguete possui 10 lotes dispon√≠veis para armazenar amostras. Ent√£o, devemos incrementar a vari√°vel totalAmostras 10 vezes.',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Pronto',
        body: '√â claro que existe uma maneira muuuuuuito mais f√°cil de fazer isso.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Usando estrutura de repeti√ß√£o, ou para os mais √≠ntimos, la√ßo de repeti√ß√£o ou apenas la√ßo.',
      },
      {
        type: 'default',
        title: 'La√ßo?',
        body: 'Sim!! Os la√ßos s√£o usados para executar um conjunto de instru√ß√µes v√°rias vezes. Isso ajuda a reduzir o c√≥digo e evitar repeti√ß√µes desnecess√°rias.',
      },
      {
        type: 'default',
        title: 'Interessante',
        body: 'Existem 3 maneiras de usar la√ßos, mas considerando esse nosso caso, iremos utilizar a instru√ß√£o "para"',
      },
      {
        type: 'list',
        title: 'Para',
        body: 'A instru√ß√£o "para" √© o tipo de la√ßo mais comum, e √© usado para executar um bloco de c√≥digo por um n√∫mero espec√≠fico de vezes. Para escrev√™-la, a sintaxe √© a seguinte:',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'N√£o entendi nada',
        body: 'Vamos por partes: todo la√ßo "para" tem que ter 3 par√¢metros, que s√£o as express√µes separadas por ponto e v√≠rgula e que est√£o entre par√™nteses ap√≥s a palavra para.',
      },
      {
        type: 'list',
        title: 'Inicializa√ß√£o',
        body: 'A primeira √© a inicializa√ß√£o, que √© a primeira coisa a ser executada antes do "para" fazer o seu trabalho de fato.',
      },
      {
        type: 'alert',
        body: 'A inicializa√ß√£o serve para iniciar a vari√°vel de controle do la√ßo, que explicarei mais sobre depois.',
      },
      {
        type: 'list',
        title: 'Condi√ß√£o',
        body: 'A segunda √© a condi√ß√£o, que √© a express√£o l√≥gica avaliada no in√≠cio de cada itera√ß√£o do la√ßo. Se a condi√ß√£o for verdadeira, o bloco de c√≥digo dentro do la√ßo √© executado; caso contr√°rio, o la√ßo √© encerrado.',
      },
      {
        type: 'alert',
        body: 'Itera√ß√£o do la√ßo refere-se quantas vezes o bloco de c√≥digo ser√° executado, ou seja, 10 itera√ß√µes significam 10 repeti√ß√µes.',
      },
      {
        type: 'list',
        title: 'Express√£o final',
        body: 'A √∫ltima √© a Express√£o final, que √© a instru√ß√£o executada no final de cada itera√ß√£o do la√ßo. Geralmente √© usada para atualizar a vari√°vel de controle citada anteriormente.',
      },
      {
        type: 'alert',
        body: 'A vari√°vel de controle √© uma vari√°vel que √© utilizada para determinar quando a execu√ß√£o do la√ßo ir√° parar. Geralmente, o valor dela √© atualizada a cada itera√ß√£o e esse novo valor √© usada na condi√ß√£o do la√ßo antes que uma nova execu√ß√£o seja feita.',
      },
      {
        type: 'default',
        title: 'Express√£o final',
        body: 'Agora voltando ao c√≥digo que acabamos de fazer:',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso espec√≠fico, na inicializa√ß√£o do "para" declaramos uma vari√°vel contador iniciando com 0 e ela far√° o papel de controlar o la√ßo.',
      },
      {
        type: 'default',
        title: null,
        body: 'A condi√ß√£o ser√° verificar se o valor de contador √© menor que o valor de totalLotes, que √© 10.',
      },
      {
        type: 'default',
        title: null,
        body: 'Na express√£o final o contador ser√° incrementado em 1 a cada itera√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: ' No bloco de c√≥digo, definimos que a vari√°vel totalAmostras tamb√©m dever ser incrementada em 1 a cada itera√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Dessa forma, se a vari√°vel totalAmostras for igual ou maior que totalLotes, o para √© encerrado, totalizando 10 itera√ß√µes, ou seja, o valor de totalAmostras foi icrementada em 1 por 10 vezes seguidas.',
      },
      {
        type: 'default',
        title: 'Acho que comecei a entender',
        body: '√â claro que podemos colocar qualquer c√≥digo v√°lido dentro do bloco do "para", inclusive outras estruturas.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Por exemplo, se quisermos que ao coletar 5 amostras seja escrito "J√° coletei 5 amostras", podemos colocar uma estrutura condicional dentro do para.',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    se (contador == 5) {
        escreva("J√° coletei 5 amostras")
    }
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: J√° coletei 5 amostras 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal!',
        body: 'Tamb√©m podemos colocar la√ßo dentro de outro la√ßo, mas podemos falar sobre isso em outra hora.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que j√° temos amostras coletadas, podemos ver o que nesse novo planeta pode nos surpreender.',
      },
    ],
  },
  {
    starId: 16,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Com as amostras coletadas, resta analis√°-las.',
      },
      {
        type: 'default',
        title: 'Ok',
        body: 'Contudo, para o foguete fazer √† an√°lise ele precisa abrir conex√£o com o analisador. Al√©m disso, a conex√£o em si precisa estar ativa enquanto ocorre a an√°lise.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer o programa a partir disso podemos usar outro tipo de la√ßo, conhecido como "enquanto"',
      },
      {
        type: 'default',
        title: null,
        body: 'Para escrever esse la√ßo ser√° mais facil que o "para".',
      },
      {
        type: 'list',
        title: 'enquanto',
        body: 'O "enquanto" apenas precisa da condi√ß√£o, que enquanto for verdadeira ser√° executado o seu bloco de c√≥digo repetidas vezes.',
      },
      {
        type: 'default',
        title: 'Por que?',
        body: 'No nosso caso, como temos no total 10 amostras, sempre que uma for analisada, ser√° subtra√≠do 1 do total.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva){
    totalAmostras--;
}

escreva(totalAmostras)`,
        isRunnable: false,
      },
      {
        type: 'alert',
        body: 'Perceba que foi utilizado outro operador especial, no caso o operador de decremento, ou seja, ao contrario do de incremento, ele subtrai 1 do valor atual de uma variavel. ',
      },
      {
        type: 'default',
        title: null,
        body: 'Como dito a instru√ß√£o enquanto executar√° tudo que estiver no seu bloco enquanto sua condi√ß√£o for verdadeira.',
      },
      {
        type: 'default',
        title: 'Eu vi',
        body: 'Por√©m, neste caso a execu√ß√£o nunca terminar√°, pois a vari√°vel conexaoAtiva sempre sera verdadeira at√© o fim do programa.',
      },
      {
        type: 'default',
        title: null,
        body: 'Chamamos isso de la√ßo infinito, o que sempre deve ser evitado em qualquer programa. Para evitar isso podemos modificar a condi√ß√£o, de modo que haja uma vari√°vel de controle.',
      },
      {
        type: 'default',
        title: null,
        body: 'Neste caso, podemos colocar a variavel totalAmosras na condi√ß√£o, dizendo que enquanto ela for maior que zero continua executando o bloco.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva e totalAmostras > 0) {
    totalAmostras--;
}                        
 
escreva(totalAmostras)
// Resultado: 0`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Assim, a partir do momento em que totalAmostras for igual a zero, o enquanto √© encerrado. ',
      },
      {
        type: 'default',
        title: null,
        body: '√â possivel tambem for√ßar o enquanto parar de executar. Para isso, √© preciso usar uma instru√ß√£o especial chamada pausa.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso queiramos que apenas cinco amostras sejam analisadas, podemos colocar o pausa quando a vari√°vel totalAmostras for igual a esse valor:',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva e totalAmostras > 0) {
    se (totalAmostras == 5) {
      pausa;
    }
    totalAmostras--;
}                        
 
escreva(totalAmostras)
// Resultado: 5`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal',
        body: '√â claro que isso tamb√©m funciona para outros tipos de la√ßo, como o para.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, √© totalmente poss√≠vel realizar o que acabamos de fazer, usando um simples para.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

para (; totalAmostras > 0 e conexaoAtiva; totalAmostras--) {
    se (totalAmostras == 5) {
        pausa;
    }
}                        

escreva(totalAmostras)
// Resultado: 5`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Veja que n√£o h√° inicializa√ß√£o nesse para, pois a vari√°vel de controle, no caso totalAmostras, foi declarada fora dele, e ao inv√©s de incremet√°-la na express√£o final, estamos decrementando-a.',
      },
      {
        type: 'default',
        title: 'Mas quando usar para ou enquanto',
        body: 'Muito bem, usamos o enquanto apenas em situa√ß√µes que n√£o sabemos quantas repeti√ß√µes o la√ßo ir√° ter, e o para quando j√° sabemos disso.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso n√£o soub√©ssemos se a conex√£o est√° ativa ou n√£o, ter√≠amos que usar apenas o la√ßo enquanto, pois como a vari√°vel conexaoAtiva tem valor l√≥gico, n√£o teria como mudar o valor dela a cada itera√ß√£o na express√£o final do la√ßo para.',
      },
      {
        type: 'default',
        title: 'Entendi',
        body: 'Agora com as amostras devidamente analisadas, j√° temos a reposta de qual planeta estamos.',
      },
    ],
  },
  {
    starId: 17,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Tenho m√°s not√≠cias. De acordo com a an√°lise das amostras, estamos em um planeta com o n√∫cleo bastante inst√°vel.',
      },
      {
        type: 'default',
        title: 'E?',
        body: 'Acontece que esse planeta n√£o tem mais vida longa, o que quer dizer que √© bom sairmos desse lugar imediatamente!',
      },
      {
        type: 'default',
        title: null,
        body: 'Para come√ßar, podemos aumentar a pot√™ncia dos motores at√© chegarem ao m√°ximo da sua capacidade limite.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso, podemos criar um programa que, enquanto os motores n√£o chegarem ao seu limte (100), continuaremos a aumentar sua pot√™ncia em 10.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, ao come√ßar aumentar a pot√™ncia, √© ligado a vetoinha para evitar superaquecimento, mas apenas depois que a pot√™ncia √© aumentada por pelo menos uma vez.',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que s√≥ podemos parar de aumentar a pot√™ncia apenas depois que a ventoinha for desligada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o temos uma situa√ß√£o complicada.',
      },
      {
        type: 'code',
        body: `var potencia = 20; 
var limite = 100;
var ventoinhaLigada = falso;

enquanto (ventoinhaLigada) {
    potencia += 10;
    se (potencia == limite) {
        ventoinhaLigada = falso;
    } senao {
        ventoinhaLigada = verdadeiro;
    }
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Percebeu que a conta n√£o fecha? O processo de aumentar a pot√™ncia s√≥ para quando ventoinhaLigada for verdadeiro, mas o valor dela, que come√ßa em falso, s√≥ muda a partir do momento em que eu come√ßo aumentar a pot√™ncia ü§®.',
      },
      {
        type: 'default',
        title: 'Putz...',
        body: 'Para resolver esse problema podemos usar o terceiro tipo de la√ßo: o "faca enquanto"',
      },
      {
        type: 'list',
        title: 'Fa√ßa enquanto',
        body: 'O "faca enquanto" √© um la√ßo que permite executar um bloco de c√≥digo pelo menos uma vez e depois repetir a execu√ß√£o do bloco enquanto uma condi√ß√£o especificada for verdadeira.',
      },
      {
        type: 'default',
        title: 'Hmm...',
        body: 'No nosso caso vai cair com uma luva, pois a condi√ß√£o do la√ßo √© verificada apenas ap√≥s seu bloco de c√≥digo ser executado pelo menos uma vez, permitindo que a condi√ß√£o (ventoinhaLigada) seja falsa em um primeiro momento, veja:',
      },
      {
        type: 'code',
        body: `var potencia = 20; 
var limite = 100;
var ventoinhaLigada = falso;

faca {
    potencia += 10;
    se (potencia == 100) {
        ventoinhaLigada = falso;
    } senao {
        ventoinhaLigada = verdadeiro;
    }
} enquanto (ventoinhaLigada)

escreva(potencia);
// Resultado: 100`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Ent√£o essa √© a diferen√ßa entre "enquanto" e "faca enquanto": o "faca enquanto" garante que o bloco de c√≥digo seja executado pelo menos uma vez, mesmo se a condi√ß√£o do la√ßo inicialmente for falsa, o que pode ser bastante √∫ltil em algumas situa√ß√µes como essa agora.',
      },
      {
        type: 'alert',
        body: 'Em contrapartida, o "enquanto" n√£o executa o bloco de c√≥digo se a condi√ß√£o especificada for falsa desde o in√≠cio.',
      },
      {
        type: 'default',
        title: '√â cada uma meu',
        body: 'Est√° tudo muito bonito, mas ainda temos que cair fora desse planeta.',
      },
      {
        type: 'default',
        title: null,
        body: 'A medida que subimos, estamos aumentando de velocidade e diminuindo a dist√¢ncia at√© o espa√ßo.',
      },
      {
        type: 'code',
        body: `var velocidade = 0; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;

enquanto (distanciaAteEspaco > 0) {
    velocidade++;
    distanciaAteEspaco--;
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m no momento que conseguirmos sairmos da atmosfera, temos que estabilizar a velocidade em um valor fixo para entrar em √≥rbita do planeta e ent√£o acelerar denovo para pegar mais impulso para ir ainda mais longe.',
      },
      {
        type: 'default',
        title: null,
        body: 'Sabe como resolver isso?',
      },
      {
        type: 'default',
        title: 'Usando se senao?',
        body: 'Pode ser uma boa, mas tem um jeito mais elegante de fazer isso em um la√ßo.',
      },
      {
        type: 'default',
        title: 'De que jeito?',
        body: 'Usando outra instru√ß√£o especial: o "continua"',
      },
      {
        type: 'list',
        title: 'Continua',
        body: 'O "continua" √© uma instru√ß√£o usada dentro de la√ßos, como o "pause", s√≥ que ele permite pular a intera√ß√£o atual e ir para a pr√≥xima imediatamente.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Quando o "continua" √© executado dentro de um la√ßo, o c√≥digo abaixo da instru√ß√£o n√£o √© executado e a pr√≥xima itera√ß√£o do la√ßo √© iniciada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso pode ser √∫til em situa√ß√µes em que voc√™ deseja que parte de um bloco de c√≥digo seja ignorada em uma determinada situa√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, no nosso caso queremos que a vari√°vel velocidade pare de ser incrementada enquanto estivermos em √≥rbita do planeta, o que ocorre enquanto distanciaAteEspaco for menor ou igual 1000 e comprimentoDaOrbita for maior que 0',
      },
      {
        type: 'code',
        body: `var velocidade = 50; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;

enquanto (distanciaAteEspaco > 0) {
  se (distanciaAteEspaco <= 1000 e comprimentoDaOrbita > 0) {
      comprimentoDaOrbita--
      continua;
  }
  velocidade++;
  distanciaAteEspaco--;
}

escreva("distanciaAteAtmosfera: " + distanciaAteAtmosfera);
escreva("comprimentoDaOrbita: " + comprimentoDaOrbita);
escreva("velocidade: " + velocidade);
/* Resultado: 
distanciaAteAtmosfera: 0
comprimentoDaOrbita: 0
velocidade: 1500
*/
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Dessa forma, sempre que distanciaAteEspaco e comprimentoDaOrbita for maior que 500, tudo o que estiver ap√≥s isso, no caso velocidade++; e distanciaAteEspaco--; n√£o √© executado.',
      },
      {
        type: 'default',
        title: null,
        body: 'E a partir do momento em que a condi√ß√£o do se n√£o for mais verdadeira, a segunda parte mencionada do bloco (velocidade++; e distanciaAteEspaco--;) volta a ser executada.',
      },
      {
        type: 'default',
        title: 'Complicado isso',
        body: 'Vou colocar uma vari√°vel "vezes" para ajudar voc√™ a entender melhor o que est√° acontecendo.',
      },
      {
        type: 'code',
        body: `var velocidade = 50; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;
var vezes = 0;

enquanto (distanciaAteEspaco > 0) {
  vezes++;
  se (distanciaAteEspaco <= 1000 e comprimentoDaOrbita > 0) {
      comprimentoDaOrbita--
      continua;
  }
  velocidade++;
  distanciaAteEspaco--;
}

escreva("distanciaAteAtmosfera: " + distanciaAteAtmosfera);
escreva("comprimentoDaOrbita: " + comprimentoDaOrbita);
escreva("velocidade: " + velocidade);
escreva("vezes: " + vezes);
/* Resultado: 
distanciaAteAtmosfera: 0
comprimentoDaOrbita: 0
velocidade: 1500
vezes: 2000
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que a vari√°vel vezes indica que o enquanto foi executada 2000 vezes, por√©m a velocidade s√≥ foi aumentada em 1500 vezes.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ou seja, nas vezes em que "continua" foi executado, velocidade++ n√£o foi, justamente porque essa instru√ß√£o fez com que o la√ßo come√ßasse outra itera√ß√£o antes que ela fosse incrementada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, resumidamente, o "continua" serve para pular uma repeti√ß√£o do la√ßo em um dado ponto do seu bloco de c√≥digo.',
      },
      {
        type: 'default',
        title: 'Acho que entendi, talvez...',
        body: 'Com o tempo voc√™ pega o jeito, agora √© hora de se concentra na fuga.',
      },
    ],
  },
  {
    starId: 18,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Agora que j√° encontramos v√°rios planetas para explorar, podemos configurar para a rota o mais pr√≥ximo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas ainda mais importante que isso √© verificar se os suprimentos do foguete est√£o tudo ok.',
      },
      {
        type: 'default',
        title: 'Como fazer isso',
        body: 'Primeiro, vejamos o que temos de comida no momento.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas o que √© isso na vari√°vel alimentos?',
        body: 'Isso nada mais √© do que um vetor.',
      },
      {
        type: 'list',
        title: 'Vetores',
        body: 'Vetores s√£o uma cole√ß√£o ordenada de valores, onde cada valor √© identificado por um √≠ndice. Em outras palavras, um vetor √© um conjunto de elementos que podem ser acessados ‚Äã‚Äãpor sua posi√ß√£o num√©rica dentro do vetor.',
      },
      {
        type: 'default',
        title: 'Acesso por posi√ß√£o num√©rica?',
        body: 'Sim! Por exemplo, caso queiramos pegar a ma√ß√£ da vari√°vel "alimentos" devemos fazer da seguinte forma:',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[0])
  
// Resultado: ma√ß√£`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Como dito, para acessar qualquer elemento dentro de uma vari√°vel que √© um vetor, temos que colocar entre colchetes ([]) ao lado da vri√°vel o n√∫mero do seu √≠ndice, isto √©, sua posi√ß√£o na lista de elementos conforme a ordem normal com dire√ß√£o de esquerda para direita.',
      },
      {
        type: 'alert',
        body: 'Veja que foi escrito apenas ma√ß√£, em vez de todos os alimentos, visto que estamos acessando apenas o primeiro elemento, o que poss√≠vel por meio do n√∫mero que corresponde a sua posi√ß√£o no vetor, no caso, o zero.',
      },
      {
        type: 'default',
        title: 'Mas por que zero',
        body: 'Isso porque a posicao dos elementos sempre come√ßa pelo zero, ou seja, se voc√™ quisesse pegar o segundo elemento de qualquer vetor, ter√≠amos que colocar 1 entre colchetes.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[1])
  
// Resultado: batata`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Dica: √â poss√≠vel acessar o √∫ltimo elemento de qualquer vetor, independentemente quantos elementos ele tenha. Para isso, basta colocar 1 negativo (-1)',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[-1])
  
// Resultado: geleia`,
        isRunnable: true,
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4, 5, 6, 7]
 
escreva(alimentos[-1])
  
// Resultado: 7`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas por que um negativo?',
        body: 'Isso porque se voc√™ colocar n√∫meros negativos como √≠ndice, voc√™ estar√° invertendo a ordem de dire√ß√£o normal de acesso (esquerda para direita) para direita a esquerda.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso coloc√°ssemos -2 como √≠ndice, estar√≠amos pegando o pen√∫ltimo elemento de um vetor.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[-2])
  
// Resultado: bife`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar, como eu fa√ßo para adicionar um novo elemento ao vetor.',
      },
      {
        type: 'default',
        title: 'o que eu posso fazer para adicionar um novo elemento ao vetor?',
        body: 'Para fazer isso, basta colocar o elemento na posi√ß√£o que queremos que ele tenha dentro do vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Como no momento temos 4 alimentos, podemos colocar uma goiabada na quinta posi√ß√£o desse vetor, ent√£o colocar√≠amos qual √≠ndice?',
      },
      {
        type: 'default',
        title: '5?',
        body: 'N√£o! Lembre-se os √≠ndices/posi√ß√µes de um vetor sempre come√ßam do 0, logo o quinto √≠ndice corresponde a 4',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
alimentos[4] = 'goiabada'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia, goiabada`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Cuidado, dependendo da posi√ß√£o em que voc√™ colocar o novo elemento, poder√° haver espa√ßos vazios no vetor.',
      },
      {
        type: 'alert',
        body: 'Por exemplo, se tiv√©ssemos colocado a goiabada no √≠ndice 7, as posi√ß√µes 4, 5 e 6 ficariam vagas.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
alimentos[7] = 'goiabada'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia, , , , goiabada`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Caso isso aconte√ßa, podemos substituir essas pos√≠√ß√µes por alimentos de verdade.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar denovo, como eu fa√ßo para substituir um elemento de um vetor?',
      },
      {
        type: 'default',
        title: 'como eu fa√ßo para substituir um elemento de um vetor?',
        body: 'Da mesma forma que colocamos novos elementos em um vetor. Caso j√° exista algum elemento na posi√ß√£o que especificarmos, esse elemento ser√° substitu√≠do pelo novo.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
alimentos[2] = 'iogurte'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, iogurte, geleia`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Existem outras formas de acrescentar novos elementos a um vetor, mas por agora j√° estamos bem em conhecimento novo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar denovo, como eu fa√ßo para remover um elemento de um vetor?',
      },
      {
        type: 'default',
        title: 'Como eu fa√ßo para remover um elemento de um vetor?',
        body: 'Como disse, j√° estamos bem em conhecimento novo, at√© a pr√≥xima.',
      },
    ],
  },
];
