export const theories = [
  {
    starId: 1,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ol√°, seja bem-vindo. Primeiramente, para come√ßarmos essa jornada √© necess√°rio deixar claro o conceito de l√≥gica e algoritmos, pois esses conceitos ser√£o de vital import√¢ncia para o entendimento de assuntos mais avan√ßados, ent√£o vamos l√°! üöÄ.',
      },
      {
        type: 'default',
        title: 'Come√ßando pelo come√ßo',
        body: 'Sempre que decidimos fazer qualquer atividade em nosso dia a dia, acabamos seguindo uma sequ√™ncia l√≥gica.',
      },
      {
        type: 'default',
        title: null,
        body: 'Na maior parte do tempo, fazemos isso de maneira t√£o natural que nem nos damos conta, mas quando percebemos, conseguimos enxergar passos que levaram ao resultado final.',
      },
      {
        type: 'default',
        title: 'Ou seja...',
        body: 'Uma sequ√™ncia l√≥gica nada mais s√£o que passos executados at√© atingir um determinado objetivo.',
      },
      {
        type: 'default',
        title: 'L√≥gica est√° em todo lugar',
        body: 'Imagine que voc√™ √© aspirante a explorador espacial e deseja desbravar os confins do espa√ßo long√≠nquo com seu foguete. O problema √© que voc√™ n√£o tem equipamento para isso e muito menos um foguete :(',
      },
      {
        type: 'alert',
        body: 'A l√≥gica de programa√ß√£o √© semelhante a isso, mas em vez de solucionar a quest√£o de como fazer uma explora√ß√£o espacial, voc√™ est√° resolvendo um problema em um programa de computador. Para tanto, voc√™ precisa pensar de forma l√≥gica e organizada para criar uma sequ√™ncia de passos que resolva esse problema.',
      },
      {
        type: 'default',
        title: 'A√≠ que entra os algoritmos',
        body: 'Um algoritmo √© como um roteiro para um programa de computador. Ele √© uma sequ√™ncia de passos que o programa deve seguir para alcan√ßar um objetivo espec√≠fico. Como aspirante a explorador espacial, voc√™ pode pensar em um algoritmo como uma lista de tarefas que voc√™ precisa para resolver o primeiro problema que voc√™ se depara.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, se o seu objetivo √© arrumar equipamento adequado para a viagem espacial, o seu algoritmo pode ter os seguintes passos:',
      },
      {
        type: 'code',
        body: `algoritmo arrumar um foguete
    
    Inicio
  
  Invadir um centro espacial;
  Encontrar um foguete;
  Entrar no foguete enquanto ningu√©m estiver olhando;
  Conferir se n√£o h√° combust√≠vel suficiente;
  Conferir a quantidade de suprimentos;
  Conferir quantidade de oxig√™nio;
  Se n√£o tiver = sair e roubar mais
  senao ligar o foguete;
  Esperar foquete entrar em √≥rbita;
  Relaxar e curtir a viagem;
    
    Fim`,
      },
      {
        type: 'default',
        title: 'Mas √© s√≥ isso?',
        body: 'Obviamente, h√° v√°rias formas de chegar nesse mesmo resultado, como tamb√©m pode existir mais passos antes de outros passos. Contudo, o objetivo sempre vai ser esse: pensar logicamente para estipular uma sequ√™ncia de passos para a resolu√ß√£o de um problema, o que damos o nome de l√≥gica de programa√ß√£o dentro do contexto da computa√ß√£o, enquanto a sequ√™ncia em si desses eventos, damos o nome de algoritmo.',
      },
      {
        type: 'alert',
        body: 'A diferen√ßa √© que qualquer sequ√™ncia l√≥gica de passos pode ser considerado um algoritmo, como uma receita de bolo ou um assalto a um centro espacial. J√° em programa√ß√£o, os algoritmos s√£o escritos para criar programas, mas sempre obedecendo uma s√©rie de regras estabelecidas por cada linguagem de programa√ß√£o, o que √© o que a gente chama de sintaxe.',
      },
      {
        type: 'default',
        title: 'Por que aprender L√≥gica de Programa√ß√£o?',
        body: 'Aprender l√≥gica de programa√ß√£o √© importante porque permite que voc√™ resolva problemas de maneira mais eficiente e organizada, ajuda na solu√ß√£o de tarefas complexas e facilita a cria√ß√£o de programas que automatizam tarefas e processos. Al√©m disso, √© uma habilidade altamente valorizada no mercado de trabalho.',
      },
      {
        type: 'default',
        title: 'Como funciona a L√≥gica de Programa√ß√£o na pr√°tica?',
        body: 'Como voc√™ j√° percebeu, a L√≥gica de Programa√ß√£o funciona atrav√©s de algoritmos, ou seja, por meio de passos l√≥gicos e bem definidos que deve ser seguidos para resolver um problema. Esses passos s√£o escritos em um c√≥digo que √© interpretado pelo computador para que ele possa executar a tarefa desejada.',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ aprendeu o b√°sico de l√≥gica e algoritmos, vamos testar seus conhecimentos at√© ent√£o adquiridos üöÄ.',
      },
    ],
  },
  {
    starId: 2,
    texts: [
      {
        type: 'default',
        title: 'Introdu√ß√£o',
        body: 'Agora que voc√™ finalmente est√° no espa√ßo, imagino que voc√™ queira explorar novos planetas e talvez econtrar novas vidas alien√≠genas.',
      },
      {
        type: 'default',
        title: 'Introdu√ß√£o',
        body: 'Para isso voc√™ vai ter que instruir seu foguete escrevendo c√≥digos.',
      },
      {
        type: 'alert',
        body: 'Uma linguagem de programa√ß√£o normalmente possui uma sintaxe pr√≥pria, que √© o conjunto de regras que determina quais combina√ß√µes de s√≠mbolos e palavras-chaves podem ser utilizadas para fazer com que o programa fa√ßa algo.',
      },
      {
        type: 'default',
        title: 'Qual linguagem usar?',
        body: 'Para nossa sorte, o foguete entende uma linguagem especial chamada Del√©gua. Ela possui uma sintaxe f√°cil e intuitiva em portugu√™s, o que facilita bastante.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, para fazer com que o foguete imprima no painel: "explorar o espa√ßo √© legal", basta fazer isso',
      },
      {
        type: 'code',
        body: `escreva("explorar o espa√ßo √© legal")
  
  saida: explorar o espa√ßo √© legal`,
      },
      {
        type: 'default',
        title: null,
        body: 'Simples e f√°cil, mas caso voc√™ queria que o foguete leia e receba informa√ß√µes suas, voc√™ pode usar o comando leia:',
      },
      {
        type: 'code',
        body: `var seuNome = leia()`,
      },
      {
        type: 'default',
        title: 'O que diabos √© var?',
        body: 'Para receber dados, naturalmente voc√™ tem que colocar em algum lugar, que no caso sempre vai ser em algo que chamamos de vari√°vel.',
      },
      {
        type: 'default',
        title: 'Mas o que diabos s√£o vari√°veis?',
        body: 'vari√°veis nada mais s√£o do que espa√ßos na mem√≥ria de um programa, onde voc√™ pode armazenar um tipo de dado, elas tem esse nome porque elas podem variar, ou seja, receber outros valores no decorrer do programa.',
      },
      {
        type: 'alert',
        body: 'Voc√™ n√£o precisa entender tudo de vari√°veis agora, pois usaremos elas mais para frente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora √© s√≥ fazer o programa exibir o dado dentro da vari√°vel.',
      },
      {
        type: 'code',
        body: `var seuNome = leia()
  escreva(seuNome)
  
  entrada: "Jo√£o"
  saida: "Jo√£o"`,
      },
      {
        type: 'default',
        title: null,
        body: 'Legal, mas na hora de escrever um c√≥digo consistente, voc√™ precisa tomar alguns cuidados:',
      },
      {
        type: 'list',
        body: '1 - √â preciso respeitar sempre a sintaxe definida pela linguagem, por exemplo, caso voc√™ tivesse colocado EXIBA ao inv√©s de ESCREVA, deixado de usar os par√™nteses ou as aspas para exibir textos, o c√≥digo daria erro. ',
      },
      {
        type: 'list',
        body: '2 - Voc√™ deve entender a fun√ß√£o, quando e porqu√™ usar cada comando, por exemplo, para escrever dados externos na tela, eu preciso usar o comando leia, pois ele tem a serve para ler informa√ß√µes que vem de fora do programa, para a√≠ ent√£o usar o comando escreva.',
      },
      {
        type: 'list',
        body: '3 - √â crucial compreender que o fluxo de um programa √© sempre de cima para baixo, ou seja, n√£o faz sentido eu tentat ler uma informa√ß√£o com leia depois de exibi-la na tela com escreva',
      },
      {
        type: 'alert',
        body: 'leia e escreva s√£o considerados comandos de entrada e sa√≠da respectivamente, justamente porque com o leia voc√™ est√° entrando com dados, enquanto com o escreva voc√™ est√° fazendo dados sa√≠rem para serem exibidos digamos assim.',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ um pouco mais sobre programas e pseudoc√≥digos t√° na hora revisar tudo isso, preparado(a)?.',
      },
    ],
  },
  {
    starId: 3,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ok, parace que voc√™ n√£o encontrou nenhum nada de interessante no espa√ßo ainda, justamente porque seu foguete n√£o sabe quem o est√° pilotando.',
      },
      {
        type: 'default',
        title: 'E agora?',
        body: 'Para resolver esse problema voc√™ tem que escrever um programa que exiba seu nome para ele, e para isso voc√™ ter√° que usar os comandos leia e escreva explicados anteriormente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, como voc√™ j√° sabe, √© necess√°rio armazenar seu nome em uma vari√°vel no c√≥digo para ent√£o escrev√™-lo.',
      },
      {
        type: 'default',
        title: 'Explica o que s√£o vari√°veis logo!',
        body: 'Vari√°veis s√£o espa√ßos reservados na mem√≥ria de um programa para algum tipo de dado, pronto.',
      },
      {
        type: 'default',
        title: 'Como usar essa tais de vari√°veis?',
        body: 'Para us√°-las de fato √© necess√°rio declarar elas para o programa que ela existe, escrevendo o comando var, seguido do nome da vari√°vel que voc√™ deseja que ela tenha, exemplo:',
      },
      {
        type: 'code',
        body: `var nomeCompleto`,
      },
      {
        type: 'default',
        title: 'Como colocar dados nelas?',
        body: 'Simples, basta colocar o sinal de "=" depois da vari√°vel e em seguida o dado que voc√™ deseja.',
      },
      {
        type: 'code',
        body: `var nome = "Kau√™ Cabess"
  var idade = 90`,
      },
      {
        type: 'default',
        title: null,
        body: 'Neste exemplo, estamos criando duas vari√°veis, uma chamada "nome" que armazenar√° o valor "Kau√™ Cabess" e outra chamada "idade" que armazenar√° o valor 90.',
      },
      {
        type: 'alert',
        body: 'Al√©m disso, voc√™ tamb√©m pode atribuir o valor de uma vari√°vel a outra, utilizando o seguinte formato:.',
      },
      {
        type: 'code',
        body: `
  var nome = "Kau√™ Cabess"
  var nomeCompleto = nome
  
  escreva(nomeCompleto)
  
  saida: Kau√™ Cabess`,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora observe um exemplo completo utilizando tudo que vimos at√© agora.',
      },
      {
        type: 'code',
        body: `var nome = leia()
  var idade = leia()
  var nomeCompleto = nome
  
  escreva("seu nome completo √© ", nomeCompleto)
  escreva("e sua idade √© ", idade)
  
  entrada: (Fernanda, 90)
  saida: seu nome completo √© Fernanda e sua idade √© 90`,
      },
      {
        type: 'alert',
        body: 'Dica: voc√™ tamb√©m fazer com que o programa escreva um texto e o conte√∫do de uma vari√°vel ao mesmo tempo, basta separ√°-los entre v√≠rgulas, assim como mostrado no exemplo acima.',
      },
      {
        type: 'default',
        title: 'Regras para nomes de vari√°veis',
        body: 'Ao nomear suas vari√°veis, √© importante seguir algumas regras b√°sicas:',
      },
      {
        type: 'list',
        body: '1 - O nome da vari√°vel deve iniciar com uma letra ou sublinhado (_).',
      },
      {
        type: 'list',
        body: '2 - O nome da vari√°vel n√£o pode conter espa√ßos.',
      },
      {
        type: 'list',
        body: '3 - O nome da vari√°vel n√£o pode ser uma palavra reservada da liguagem, ou seja, um nome de um comando por exemplo.',
      },
      {
        type: 'list',
        body: '4 - O nome da vari√°vel deve ser descritivo e f√°cil de entender.',
      },
      {
        type: 'default',
        title: 'Concluindo',
        body: 'A atribui√ß√£o de vari√°veis √© uma parte fundamental da programa√ß√£o, pois permite armazenar valores e acess√°-los ao longo do c√≥digo. Ao seguir as regras e a sintaxe corretas, voc√™ poder√° atribuir valores a suas vari√°veis sem problemas em programas futuros.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que voc√™ aprendeu mais um pouco, que tal praticar tudo o que j√° vimos at√© agora?',
      },
    ],
  },

  {
    starId: 5,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Parece que sua mensagem foi enviada para planeta que voc√™ encontrou, mas voc√™ n√£o obteve nenhuma resposta :(',
      },
      {
        type: 'default',
        title: 'Mas por qu√™?',
        body: 'Isso dever ter acontecido por causa do tipo de dado que voc√™ estava usando.',
      },
      {
        type: 'default',
        title: 'Pera a√≠, tipo de dado?',
        body: 'Isso mesmo! Em programa√ß√£o podemos usar v√°rios tipos de dados diferentes, sendo os mais b√°sicos os do tipo de texto, n√∫mero e l√≥gico.',
      },
      {
        type: 'alert',
        body: 'Por agora, vamos falar sobre o tipo de texto, que √© o que n√≥s mais usamos at√© agora.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, o tipo de texto √© utilizado para representar valores que s√£o texto, d√£! Eles podem ser compostos por uma ou mais letras, como tamb√©m n√∫meros ou s√≠mbolos.',
      },
      {
        type: 'default',
        title: 'Declara√ß√£o de dado do tipo texto',
        body: 'Para fazer com que o programa entenda que uma informa√ß√£o √© do tipo texto, basta coloc√°-lo entre aspas, podendo ser simples (\'\') ou duplas ("") assim como n√≥s j√° fizemos antes:',
      },
      {
        type: 'code',
        body: `var mensagem = "Ol√°, mundo!"`,
      },
      {
        type: 'default',
        title: 'T√° mas e o que mais?',
        body: 'Al√©m disso, √© poss√≠vel unir textos por meio do operador +, a√ß√£o que chamamos de concatena√ß√£o:',
      },
      {
        type: 'code',
        body: `escreva('Eu encontrei um ' + 'planeta')
  
  Resultado: Eu encontrei um planeta
              `,
      },
      {
        type: 'alert',
        body: 'Voc√™ tamb√©m pode concatenar conte√∫dos de texto que est√£o em vari√°veis. Veja o exemplo',
      },
      {
        type: 'code',
        body: `var nomePlaneta = "Datathon"
  escreva('Eu encontrei um' + 'planeta' + ' e ele se chama ' + nomePlaneta)
  
  Resultado: Eu encontrei um planeta e ele se chama Datahon`,
      },
      {
        type: 'default',
        title: null,
        body: 'Voc√™ tamb√©m pode usar o que chamamos de interpola√ß√£o, que √© quando um texto possui em seu conte√∫do algo como ${minha_variavel}, e se minha_vari√°vel foi definida anteriormente, o novo texto ter√° o valor de minha_variavel.',
      },
      {
        type: 'code',
        body: `var nomePlaneta = "Datahon"
  escreva("esse planeta \$\{nomePlaneta\} n√£o parece ser amig√°vel")
  
  Resultado: Esse planeta Datahon n√£o parece ser amig√°vel`,
      },
      {
        type: 'alert',
        body: 'Observe que para interpolar uma vari√°vel ela precisa estar em ${} sen√£o n√£o ir√° funcionar!',
      },
      {
        type: 'list',
        body: 'Agora que voc√™ conchece mais sobre o tipo texto, que tal refor√ßar isso com algumas quest√µes?',
      },
    ],
  },
  {
    starId: 6,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Muito bom, j√° que eles n√£o entendem mensagem do tipo texto, s√≥ resta tentar com o tipo num√©rico.',
      },
      {
        type: 'default',
        title: 'Tipo inteiro',
        body: 'Os n√∫meros em um programa podem ser inteiros e reais. Primeiramente, vamos falar sobre o tipo inteiro. Ele diz respeito aos n√∫meros sem parte decimal ou fracion√°ria, como -5, 0, 1, 2, 3, entre outros.',
      },
      {
        type: 'default',
        title: 'Declarando inteiros',
        body: 'Podemos declarar uma vari√°vel com um tipo n√∫mero inteiro dessa forma:',
      },
      {
        type: 'code',
        body: `var identificador: 2370`,
      },
      {
        type: 'alert',
        body: 'Perceba que diferentemente do tipo texto, √© preciso que o valor num√©rico n√£o esteja entre aspas.',
      },
      {
        type: 'default',
        title: 'Reais',
        body: 'Al√©m dos inteiro h√° os n√∫meros reais, tamb√©m conhecidos como n√∫meros de ponto flutuante, que nada mais s√£o do que n√∫meros com parte decimal, veja:',
      },
      {
        type: 'code',
        body: `var serie = 8.5`,
      },
      {
        type: 'default',
        title: 'N√∫meros e textos',
        body: 'Cuidado ao tentar concatenar n√∫meros e textos que s√£o n√∫meros, acontece algo n√£o t√£o surpreendente: n√∫mero se torna um texto e acaba sendo juntado com n√∫mero que j√° era texto, mas n√£o havendo uma soma.',
      },
      {
        type: 'code',
        body: `
  var identificador = "2370"
  var serie = 8.5
  escreva("o RG do meu foguete √© " + identificador + 70)
  
  resultado: o RG do meu foguete √© 237070
     `,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que que deu 23708.5 ao inv√©s de 2378.5, justamente porque o n√∫mero foi convertido para texto para a√≠ sim ser concatenado com outro texto.',
      },
      {
        type: 'default',
        title: 'Convers√£o de n√∫meros',
        body: 'Tamb√©m √© poss√≠vel converter um n√∫mero inteiro para real, basta que o resultado de uma opera√ß√£o com um inteiro (uma divis√£o, por exemplo) resulte em um tipo real. O contr√°rio tamb√©m √© poss√≠vel.',
      },
      {
        type: 'code',
        body: `
  var codigo = 467 / 2
  escreva("Enviar c√≥digo: ", codigo)
  
  resultado: Enviar c√≥digo: 233.5
     `,
      },
      {
        type: 'alert',
        body: 'Contudo, vamos falar sobre opera√ß√µes aritm√©ticas mais tarde para n√£o estragar a surpresa.)',
      },

      {
        type: 'list',
        body: 'Agora vamos testar o que voc√™ aprendeu sobre tipos num√©ricos!',
      },
    ],
  },
  {
    starId: 7,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Parece que sua mensagem foi enviada e finalmente foi entendida üéâ! Contudo, eles enviaram uma resposta e √© do tipo diferente do que j√° foi visto antes.',
      },
      {
        type: 'default',
        title: 'E qual √©?',
        body: 'Tipo l√≥gico que n√£o s√£o nada mais do que valores que armazenam uma √∫nica op√ß√£o entre apenas duas possibilidades poss√≠veis: verdadeiro ou falso.',
      },
      {
        type: 'default',
        title: 'Declara√ß√£o do tipo l√≥gico',
        body: 'Para declarar um tipo de dado l√≥gico, basta atribuir um valor verdadeiro ou um valor falso logo depois da vari√°vel:',
      },
      {
        type: 'code',
        body: `
  var respostaEnviada = verdadeiro
  var eInimigo = falso
              `,
      },
      {
        type: 'default',
        title: 'Declara√ß√£o do tipo l√≥gico',
        body: 'No exemplo acima, a primeira vari√°vel indica se a resposta foi enviada (verdadeiro) ou n√£o foi envidada (false). A segunda vari√°vel indica se quem enviou √© amigo (verdadeiro) ou inimigo (falso):',
      },
      {
        type: 'alert',
        body: 'Perceba que o nome dessas vari√°veis s√£o compostas por palavras diferentes, mas sem ser separadas por espa√ßo. ',
      },
      {
        type: 'alert',
        body: 'At√© a√≠ tudo bem, mas veja que todas as palavras est√£o em mai√∫sculas exceto a primeira. Esse padr√£o se chama camelCase por lembrar as costas de um camelo e √© bem comum na hora de escrever nomes de vari√°veis.',
      },
      {
        type: 'alert',
        body: 'Usando dados l√≥gicos, √© poss√≠vel usar esse valores para trabalhar com os operadores l√≥gicos, como "e" e "ou", como tamb√©m com estruturas condicionais, mas vamos deixar isso para outra hora.',
      },
      {
        type: 'default',
        title: 'O que eu fa√ßo com essa resposta enviada?',
        body: 'O planeta pro√≠be a entrada de pessoas com armas, ent√£o √© bom deixar claro que voc√™ n√£o tem nenhuma:',
      },
      {
        type: 'code',
        body: `
  var armas = nulo
          `,
      },
      {
        type: 'default',
        title: 'O que diabos √© esse nulo?',
        body: 'Esqueci de dizer, mas existe um tipo de dado especial chamado nulo que basicamente quer dizer que a vari√°vel n√£o tem nenhum valor. Isso quer dizer tamb√©m que nulo √© atribu√≠do automaticamente a uma vari√°vel quando ela √© declarada sem um valor atribu√≠do a ela.',
      },
      {
        type: 'code',
        body: `var espaco
  escreva(espaco)
  
//  Resultado: nulo`,
      },
      {
        type: 'alert',
        body: 'Mais para frente veremos que nulo pode ser usado como um valor falso.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que voc√™ aprendeu um pouco mais sobre valores l√≥gicos que tal praticar um pouco mais?',
      },
    ],
  },
  {
    starId: 8,
    texts: [
      {
        type: 'default',
        title: 'Miss√£o cumprida!',
        body: 'Sim! Pelo visto o ambiente do planeta √© habit√°vel üéâ! Contudo, voc√™ ainda tem uma quest√£o pendente.',
      },
      {
        type: 'default',
        title: 'E qual seria?',
        body: 'Voc√™ precisa verificar o custo vida, pois n√£o d√° para viver em um planeta sem analisar os gastos n√©?',
      },
      {
        type: 'default',
        title: 'E como fa√ßo isso?',
        body: 'Por sorte seu foguete √© equipado com tecnologia de ponta que faz c√°lculos usando operadores aritm√©ticos.',
      },
      {
        type: 'default',
        title: 'Pera a√≠, operadores aritm√©ticos? Tipo somar e subtrair?',
        body: 'Sim!! n√£o s√≥ aritm√©ticos, mas tamb√©m l√≥gicos e relacionais!',
      },
      {
        type: 'alert',
        body: 'Por√©m, por enquanto vamos apenas usar os aritm√©ticos para efetuar opera√ß√µes mais simples.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, j√° √© uma boa hora de reabastecer o foguete com combust√≠vel, ou seja, precisamos adicionar combust√≠vel atual com combust√≠vel novo.',
      },
      {
        type: 'default',
        title: 'Adi√ß√£o (+)',
        body: 'E para isso n√≥s usamos o operador "+" de adi√ß√£o, o mesmo usado para concatenar textos.',
      },
      {
        type: 'code',
        body: `
var combustivel = 100;
var combustivelAtual = 200;
var totalCombustivel = combustivel + combustivelAtual;
escreva("A nave agora tem " + totalCombustivel + "  gal√µes de combust√≠vel");

// Resultado: A nave agora tem 300 gal√µes de combust√≠vel.`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Subtra√ß√£o (-)',
        body: 'Al√©m de reabastecer, o pr√≥prio foquete consegue calcular o quanto de supriementos vc j√° consumiu at√© agora, utilizando simplesmente o operador de subtra√ß√£o "-".',
      },
      {
        type: 'code',
        body: `
var suprimentosConsumidos = 250;
var suprimentosAtual = 300;
var suprimentosRestante = suprimentosAtual - suprimentosConsumidos;
escreva("Voc√™ possui " + suprimentosRestante " suprimentos");

// Resultado: Voc√™ possui 50 suprimentos`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Parece que voc√™ n√£o tem muitos suprimentos agora n√£o √© mesmo?',
      },
      {
        type: 'default',
        title: 'Nem tudo est√° perdido.',
        body: 'Por sua sorte (de novo) seu foguete est√° preparado com uma m√°quina de produzir suprimentos.',
      },
      {
        type: 'default',
        title: 'Mas nem tudo s√£o flores',
        body: 'A m√°quina de fazer suprimentos produz apenas 1 suprimento por dia. Logo, para fazer o c√°lculo da quantidade de suprimentos que voc√™ teria em um m√™s √© necess√°rio fazer uma opera√ß√£o de multiplica√ß√£o.',
      },
      {
        type: 'default',
        title: 'Multiplica√ß√£o (*)',
        body: 'Voc√™ n√£o leu errado. Para fazer um c√°lculo de multiplica√ß√£o, usamos o operador "*" em vez de "x"',
      },
      {
        type: 'code',
        body: `
var suprimento = 1;
var diasMes = 30;
var suprimentosMes = suprimento * diasMes;
escreva("Em um m√™s voc√™ ter√° " + suprimentosMes + " suprimentos");

//  Resultado: Em um m√™s voc√™ ter√° 30 suprimentos`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Ser√° que √© o suficiente?',
        body: 'Parece muito para voc√™? Ok, mas agora √© necess√°rio calcular a quantidade de suprimentos que voc√™ consome por m√™s. Normalmente, vejo que seu consumo √© 90 suprimentos ao m√™s, ent√£o basta dividir 90 por 30.',
      },
      {
        type: 'default',
        title: 'Divis√£o (/)',
        body: 'A√≠ temos mais uma caso diferenciado: em vez de usar o operador "√∑" que voc√™ provavelmente j√° se acustumou a utilizar, √© necess√°rio usar a barra "/". Veja o exemplo:',
      },
      {
        type: 'code',
        body: `
var suprimentosMes = 90;
var diasMes = 30;
var suprimentosDia = suprimentosMes / diasMes;
escreva("Voc√™ consome " + suprimentosDia + " por dia");

//  Resultado: Voc√™ consome 3 suprimentos por dia`,
        isRunnable: true,
      },
      {
        type: 'default',
        body: 'Obviamente, voc√™ tamb√©m pode usar m√∫ltiplos operadores, diferentes ou n√£o, ao mesmo tempo em uma √∫nica linha.',
      },
      {
        type: 'alert',
        body: 'Cuidado! Os operadores obedecem a ordem de preced√™ncia da matem√°tica, ou seja, opera√ß√µes de multiplica√ß√£o ou divis√£o s√£o executadas antes de adi√ß√£o ou subtra√ß√£o!',
      },
      {
        type: 'default',
        body: 'Por exemplo, ao querer calcular 5 + 5 * 5, o resultado n√£o vai ser 50, mas sim 30!',
      },
      {
        type: 'code',
        body: `
escreva(5 + 5 * 5);

//  Resultado: 30`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas ent√£o o que eu fa√ßo?',
        body: 'Assim como na matem√°tica, voc√™ deve colocar entre par√™nteses as express√µes que deseja que sejam calculadas primeiro.',
      },
      {
        type: 'code',
        body: `
escreva((5 + 5) * 5);

//  Resultado: 50`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja um exemplo usando v√°rios operadores:',
      },
      {
        type: 'code',
        body: `
var diasMes = 30;
var suprimentosDia = 1;
var suprimentosAtual = 300;
var consumoTotal = suprimentosAtual - 250 + 1 * diasMes - 3 * diasMes;
escreva('no final do m√™s voc√™ ter√° ' + consumoTotal + ' de suprimentos');

//  Resultado: no final do m√™s voc√™ ter√° -10 de suprimentos`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'N√£o √© preciso ser o mestre da matem√°tica pra perceber que voc√™ n√£o ter√° quantides de suprimento para sobreviver nesse planeta, n√£o √© mesmo?',
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso, suponho que voc√™ precise achar vida alien√≠gena para obter outros tipos de suprimentos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, ainda h√° quest√£o de quanto de energia existe dispon√≠vel para os dois motores presentes no foguete, pois por algum motivo a propor√ß√£o n√£o est√° igual.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Para o foguete funcionar direito, seus dois motores precisam dividir a energia de forma equivalente, caso contr√°rio as chances dele explodir com voc√™ dentro aumentam bastante :)',
      },
      {
        type: 'default',
        title: null,
        body: 'No momento atual h√° dispon√≠vel 10125 de energia. Para saber se √© poss√≠vel distribuir a energia igualmente para os dois motores, basta verificar se esse n√∫mero √© divis√≠vel por 2.',
      },
      {
        type: 'default',
        title: 'M√≥dulo (%)',
        body: 'Para isso, podemos usar um operador especial chamado "m√≥dulo", que serve para calcular ao resto da divis√£o entre 2 n√∫meros usando o s√≠mbolo de porcentagem (%).',
      },
      {
        type: 'code',
        body: `
var energiaAtual = 10125;
var resto = 10125 % 2;
escreva('o resto √© igual a ' + resto);

//  Resultado: o resto √© igual a 1`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Explica√ß√£o',
        body: '10125 dividido por 2 √© igual 5062 e sobra 1, ou seja, a propor√ß√£o n√£o ser√° igual para os dois motores üò¢.',
      },
    ],
  },
  {
    starId: 9,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'C√° estamos, e tudo o que resta a fazer √© cair fora desse planeta.',
      },
      {
        type: 'default',
        title: '#Partiu',
        body: 'No entanto, √© preciso verificar se tudo est√° ok para fazer uma partida segura e manter uma viagem no espa√ßo.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Por exemplo, √© importante averiguar se a quantidade de combust√≠vel atualmente dispon√≠vel √© maior que a quantidade necessa√°ria para fazer decolagem.',
      },
      {
        type: 'default',
        title: 'E como fazer isso?',
        body: '√â a√≠ que entra em cena os operadores relacionais! Eles servem justamente para fazer uma compara√ß√£o (rela√ß√£o) entre dois valores.',
      },
      {
        type: 'list',
        title: 'Operador de maior que (>)',
        body: 'Por exemplo, caso queira verificar se um n√∫mero √© maior que outro, voc√™ pode utilizar o operador "maior que" representado pelo s√≠mbolo ">", como voc√™ deve saber.',
      },
      {
        type: 'code',
        body: `
var combAtual = 100;
var combExigido = 5;
escreva(combAtual > combExigido);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o resultado da compara√ß√£o entre dois valores √© um valor do tipo l√≥gico, e isso vai acontecer toda vez voc√™ usar os operadores relacionais.',
      },
      {
        type: 'alert',
        body: 'N√£o se esque√ßa disso, pois isso vai ser bastante importante depois!',
      },
      {
        type: 'default',
        title: null,
        body: 'E √© claro, se existe o operador de maior que, tamb√©m existe o de menor que.',
      },
      {
        type: 'list',
        title: 'Operador de menor que (<)',
        body: 'Por exemplo, se quisermos fazer a mesma compara√ß√£o anterior, s√≥ que verificando se a quantidade de combust√≠vel necess√°ria √© menor que a atual, ter√≠amos que o operador "menor que" (<).',
      },
      {
        type: 'code',
        body: `
var combAtual = 100;
var combExigido = 5;
escreva(combAtual < combExigido);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Note que o resultado agora √© falso justamente porque a quantidade atual √© maior que a exigida.',
      },
      {
        type: 'default',
        title: null,
        body: 'Come√ßamos a decolar! Entretanto, √© preciso checar se a velocidade atual do foguete √© igual ou pelo menos superior que a velocidade de decolagem necess√°ria para sair da atmosfera.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso n√£o d√° para usar operador ">" porque ele s√≥ verifica se √© maior ou n√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'E no nosso caso a velocidade n√£o precisa ser t√£o superior, mas no m√≠nimo igual.',
      },
      {
        type: 'list',
        title: 'Operador maior ou igual a (>=)',
        body: '√â a√≠ que entra em cena o novo operador que verifca se um valor √© igual ou maior que outro valor, e por isso o motivo do s√≠mbolo ">=".',
      },
      {
        type: 'code',
        body: `
var velAtual = 300;
var velExigida = 300;
escreva(velAtual >= velExigida);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'Operador menor ou igual a (>=)',
        body: 'Se o caso fosse checar se um valor √© menor ou igual a outro, utilizar√≠amos o "<=".',
      },
      {
        type: 'code',
        body: `
var velAtual = 300;
var velExigida = 300;
escreva(velAtual <= velExigida);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o resultado √© mesmo que usar o ">=", pois ambos os operadores checam se √© verdadeiro uma de duas condi√ß√µes (se √© maior/menor ou igual).',
      },
      {
        type: 'alert',
        body: 'Note tamb√©m que a gente est√° usando apenas n√∫meros para fazer as compara√ß√µes. Caso us√°ssemos outro tipo de dado, o programa daria erro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Beleza, mas ainda h√° outros quest√µes a serem conferidas.',
      },
      {
        type: 'default',
        title: 'E quais seriam?',
        body: 'Por exemplo, lembra que eu disse que os dois motores do foguete precisam usar a mesma quantidade de energia?',
      },
      {
        type: 'default',
        title: 'Sim!',
        body: 'Ent√£o, √© poss√≠vel fazer isso agora usando o operador de igual, por√©m n√£o o sinal "=", visto que esse serve para atribuir valores a vari√°veis.',
      },
      {
        type: 'list',
        title: 'Operador de igual (==)',
        body: 'Para verificar se um valor √© igual a outro, a gente usa o s√≠mbolo de "==", justamente para diferenciar do operador de "=".',
      },
      {
        type: 'code',
        body: `
var energiaMoto1 = 501;
var energiaMoto2 = 500;
escreva(energiaMoto1 == energiaMoto2);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Como esperado, o resultado √© falso, pois os dois n√£o est√£o usando a mesma quantidade de energia!',
      },
      {
        type: 'default',
        title: null,
        body: 'O resultado seria verdadeiro se estiv√©ssemos verificando se as quantidades s√£o diferentes.',
      },
      {
        type: 'list',
        title: 'Operador de diferente (!=)',
        body: 'Para fazer isso, basta usar o operador de "!=", que checa se dois valores s√£o diferentes.',
      },
      {
        type: 'code',
        body: `
var energiaMoto1 = 501;
var energiaMoto2 = 500;
escreva(energiaMoto1 != energiaMoto2);

//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora o resultado √© verdadeiro, justamente porque ambos n√£o s√£o iguais.',
      },
      {
        type: 'default',
        title: 'Se √© verdadeiro, ent√£o est√° de boa?',
        body: 'N√ÉO! Independentemente se √© verdadeiro ou n√£o, ainda estamos em uma fria porque o foguete tem chances de explodir j√° que as quantidades de energia est√£o diferentes üò¢.',
      },
    ],
  },
  {
    starId: 10,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ok, a prioridade agora √© concertar os motores do foguete!',
      },
      {
        type: 'default',
        title: null,
        body: 'Estamos no compartimento dos motores, e agora devemos verificar o funcionamento de um por vez.',
      },
      {
        type: 'default',
        title: 'E como fazer isso?',
        body: 'Cada motor possui duas turbinas e elas devem estar girando ao mesmo tempo para ele funcionar corretamente.',
      },
      {
        type: 'default',
        title: 'E... Como fazer isso?',
        body: 'Para conferir se tanto um, quanto o outro est√£o girando, voc√™ pode conferir usando um operador l√≥gico.',
      },
      {
        type: 'default',
        title: 'O que √© um operador l√≥gico?',
        body: 'Operadores l√≥gicos s√£o utilizados para comparar valores do tipo l√≥gico, diferentemente dos relacionais, que s√≥ comparam n√∫meros.',
      },
      {
        type: 'list',
        title: 'Operador (e)',
        body: 'Para testar se dois valores s√£o verdadeiros, voc√™ deve usar o operador "e", que verifica se o primeiro valor √© igual a verdadeiro E se o segundo tamb√©m √© verdadeiro.',
      },
      {
        type: 'code',
        body: `
var girandoTurbina1 = verdadeiro;
var girandoTurbina2 = falso;
escreva(girandoTurbina1 e girandoTurbina2);

//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'O resultado √© falso, pois apenas a turbina 1 est√° girando e para que resultasse em verdadeiro, ambos os valores deveriam ser igual a verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Pois bem, ao concertar a turbina 1, voc√™ deve verificar novamente, mas dessa vez voc√™ pode colocar o resultado da compara√ß√£o em uma vari√°vel √† parte.',
      },
      {
        type: 'code',
        body: `
var girandoTurbina1 = verdadeiro;
var girandoTurbina2 = verdadeiro;
var turbinasGirando = girandoTurbina1 e girandoTurbina2;
escreva(turbinasGirando);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas √© poss√≠vel isso?',
        body: 'Sim! Lembre-se que esses operadores comparam valores do tipo l√≥gico, ent√£o qualquer express√£o que resulta em um valor l√≥gico pode ser utilizado para comparar outro valor.',
      },
      {
        type: 'default',
        title: 'Explica mais',
        body: 'Por exemplo, voc√™ pode testar se o n√≠vel de combust√≠vel atual est√° acima do m√≠nimo para o funcionamento, ou seja combAtual > combMin.',
      },
      {
        type: 'code',
        body: `
var turbinasGirando = verdadeiro;
var combAtual = 90;
var combMin = 10;
escreva(turbinasGirando e combAtual > combMin);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Explica√ß√£o',
        body: 'Como turbinasGirando √© verdadeiro, assim como combAtual > combMin resulta em verdadeiro, ent√£o o resultado final √© verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Beleza! O motor 1 est√° funcionado corretamente. Agora resta verificar o motor 2',
      },
      {
        type: 'default',
        title: 'O segundo tamb√©m est√° funcionando',
        body: '√â... Parece que as turbinas do motor 2 est√£o girando. Ent√£o, pode haver um problema no tipo de combust√≠vel que est√° sendo consumido pelo motor',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'O motor pode aceitar apenas dois tipos de combust√≠vel: Etherium e Plasmatron.',
      },
      {
        type: 'default',
        title: null,
        body: 'Logo, apenas uma condi√ß√£o precisa ser verdadeira para o motor funcionar.',
      },
      {
        type: 'list',
        title: 'Operador (ou)',
        body: 'Para fazer tal fa√ßanha, √© s√≥ usar o operador "ou", que verifica se o primeiro valor √© igual a verdadeiro OU o segundo √© igual a verdadeiro.',
      },
      {
        type: 'code',
        body: `
var comb = "Quantum";
escreva(comb == "Etherium" ou comb == "Plasmatron");
    
//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Como esperado, o combust√≠vel consumido por esse motor n√£o √© aceit√°vel',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas agora se trocarmos o combust√≠vel para "Plasmatron"...',
      },
      {
        type: 'code',
        body: `
var comb = "Plasmatron";
escreva(comb == "Etherium" ou comb == "Plasmatron");
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas e o Etherium?',
        body: 'Como voc√™ percebeu, o resultado √© verdadeiro porque apenas uma das duas compara√ß√µes precisa resultar em verdadeiro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso, o combust√≠vel n√£o √© do tipo "Etherium", mas √© do tipo "Plasmatron", o que tamb√©m √© aceit√°vel.',
      },
      {
        type: 'default',
        title: 'Troca feita com sucesso!',
        body: 'Agora sim o motor 2 est√° funcionando corretamente.',
      },
      {
        type: 'default',
        title: 'Ufa!',
        body: 'Calma a√≠! √â bom verificar antes se agora os dois motores est√£o funcionando corretamente:',
      },
      {
        type: 'code',
        body: `
var motor1Funcionando = verdadeiro;
var motor2Funcionando = verdadeiro;
var tudoOk = !motor1Funcionando e motor2Funcionando
escreva(tudoOk);
    
//  Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Calma a√≠! Mas as duas vari√°veis s√£o verdadeiro!',
        body: 'Sim! Acontece que h√° um operador extra sendo utilizado.',
      },
      {
        type: 'default',
        title: 'Como assim? Onde?',
        body: 'Perceba que antes da vari√°vel motor1Funcionando h√° um ponto de exclama√ß√£o. E sua similaridade com o operador "!=" n√£o √© coincid√™ncia.',
      },
      {
        type: 'list',
        title: 'Operador de nega√ß√£o (!)',
        body: 'Esse operador serve para inverter valores do tipo l√≥gico. Ou seja, se colocado antes de um valor, ele inverte o seu valor l√≥gico.',
      },
      {
        type: 'default',
        title: 'S√©rio?',
        body: 'Sim! Por exemplo, se o valor inicial for falso, ele ser√° invertido para verdadeiro, e vice-versa.',
      },
      {
        type: 'code',
        body: `
escreva(!falso);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi!',
        body: 'Ent√£o basta tirar esse operador de nega√ß√£o.',
      },
      {
        type: 'code',
        body: `
var motor1Funcionando = verdadeiro;
var motor2Funcionando = verdadeiro;
var tudoOk = motor1Funcionando e motor2Funcionando
escreva(tudoOk);
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
    ],
  },
  {
    starId: 11,
    texts: [
      {
        type: 'default',
        title: 'S√£o e salvo',
        body: 'Muito bem!! voc√™ se salvou da chuva de asteroides gigantes üéâ!.',
      },
      {
        type: 'default',
        body: 'Agora, resta visitar o novo planeta que voc√™ descobriu, e por sorte ele √© totalmente amig√°vel!',
      },
      {
        type: 'default',
        title: 'Pera a√≠! Como voc√™ sabe disso?',
        body: 'Simples, o foguete entende estruturas condicionais sempre que a situa√ß√£o pede.',
      },
      {
        type: 'default',
        title: 'Que? Estruturas condicionais?',
        body: 'Sim! Estruturas condicionais s√£o recursos da programa√ß√£o que permitem que um trecho de c√≥digo seja executado apenas se uma determinada condi√ß√£o for verdadeira.',
      },
      {
        type: 'alert',
        body: 'H√° 3 maneiras de criar uma instru√ß√£o condicional:\n 1 - se\n 2 - sen√£o\n 3 - sen√£o se.\n Por enquanto, vamos come√ßar pelo b√°sico',
      },
      {
        type: 'list',
        title: 'Estrutura condicional simples (se)',
        body: 'A forma mais b√°sica √© escrever "se" e depois a condi√ß√£o que deve ser verificada entre par√™nteses. Em seguida voc√™ abre e fecha chaves ({}) e coloca o c√≥digo que voc√™ deseja que seja executado.',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro;

se (planetaAmigavel) {
    escreva(planetaAmigavel)
}
    
//  Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal!',
        body: 'Perceba que a condi√ß√£o (tudo escrito em par√™nteses), deve resultar em verdadeiro para que o c√≥digo entre chaves seja executado.',
      },
      {
        type: 'default',
        title: 'Mas se n√£o for?',
        body: 'Simples: o programa ignora tudo que est√° entre chaves do se e executa todo o resto do c√≥digo ap√≥s ele.',
      },
      {
        type: 'code',
        body: `
var souBonito = falso;

se (souBonito) {
    escreva(souBonito)
}
    
//  Resultado: sem resultado`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'S√≥ isso?',
        body: 'N√≥s podemos usar tudo que vimos anteriormente que conseguem resultar em valores l√≥gicos dentro da condi√ß√£o do se.',
      },
      {
        type: 'code',
        body: `
var poder = 8000 * 1000;

se (poder > 8000) {
    escreva('Seu poder √© mais de 8 mil!')
}
    
//  Resultado: Seu poder √© mais de 8 mil!`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi!',
        body: 'Bacana, mas acho que j√° √© hora de voc√™ entender o que √© escopo de vari√°vel.',
      },
      {
        type: 'default',
        title: 'Essopo?',
        body: 'N√£o, escopo. No geral, o escopo √© a regi√£o do c√≥digo em que uma vari√°vel pode ser acessada dentro do programa.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Em programa√ß√£o, normalmente existem dois tipos de escopo de vari√°vel: global e local.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'As vari√°veis globais s√£o aquelas que s√£o declaradas fora de qualquer tipo de instru√ß√£o (se, para, funcao e por a√≠ vai).',
      },
      {
        type: 'default',
        title: 'Como assim? Para? Fun√ß√£o?',
        body: 'No momento se concentre apenas a na instru√ß√£o "se" que estamos estudando agora.',
      },
      {
        type: 'default',
        title: 'Ok.',
        body: 'Por exemplo, caso tentemos acessar uma vari√°vel declarada dentro de "se", o c√≥digo resultar√° em "vari√°vel indefinida"',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro; /* vari√°vel global */

se (verdadeiro) {
    var planetaNome = "Ifthenia"; /* vari√°vel local */
    }
    
    escreva(planetaNome);
//  Resultado: ERRO: Vari√°vel n√£o definida: 'planetaNome'`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'O "/* */" √© outra forma de colar coment√°rios dentro do c√≥digo',
      },
      {
        type: 'default',
        title: 'Nossa...',
        body: 'O erro no c√≥digo acima ocorre, pois planetaNome √© uma vari√°vel local porque ela foi declarada dentro da instru√ß√£o se.',
      },
      {
        type: 'default',
        title: 'Ent√£o √© s√≥ colocar para fora do se?',
        body: 'Sim! A√≠ voc√™ tranformaria ela em uma vari√°vel de escopo global, assim como a vari√°vel planetaAmigavel.',
      },
      {
        type: 'code',
        body: `
var planetaAmigavel = verdadeiro; /* vari√°vel global */
var planetaNome = "Ifthenia"; /* vari√°vel global */

se (verdadeiro) {
}
escreva(planetaNome);
escreva(planetaAmigavel);
    
//  Resultado: Ifthenia verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Humm...',
        body: '√â como se os escopos fossem dois universos paralelos: Pode haver uma vari√°vel local com o mesmo nome de uma global, por√©m elas ainda v√£o ser comportar de maneira diferente.',
      },
      {
        type: 'code',
        body: `
var planetaNome = "Ifthenia"; /* vari√°vel global */

se (verdadeiro) {
    var planetaNome = "Elsethenia" /* vari√°vel local */
}
escreva(planetaNome);

//  Resultado: Ifthenia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Entendi tudo!',
        body: 'Legal! Ent√£o, que tal praticar um pouco?',
      },
    ],
  },
  {
    starId: 12,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'J√° que voc√™ est√° indo em dire√ß√£o ao planeta, √© bom regular a velocidade do foguete para fazer um pouso seguro.',
      },
      {
        type: 'default',
        title: 'Como fazer isso?',
        body: 'A velocidade atual do foguete √© 50, caso a for√ßa da gravidade seja maior que 10, a velocidade dever√° diminuir em 20, caso contr√°rio precisar√° aumentar em 20.',
      },
      {
        type: 'code',
        body: `
var velFoguete = 50;
var gravidade = 11;

se (gravidade > 10) {
  velFoguete -= 20;
}

se (gravidade < 10) {
  velFoguete += 20;
}
 
escreva(velFoguete);
// Resultado: 30`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Perceba que usei += e -= para alterar o valor de velFoguete. Isso √© a mesma coisa que escrever: velFoguete = velFoguete + 20 e velFoguete = velFoguete - 20, s√≥ que de um jeito mais curto.',
      },
      {
        type: 'alert',
        body: 'Esse operador especial √© chamado de operador de atribui√ß√£o aritm√©tica, ou seja, ele pode ser usado para fazer qualquer uma das quatros opera√ß√µes aritm√©ticas (+=, -=, *=, /=)',
      },
      {
        type: 'default',
        title: null,
        body: 'Voltando ao c√≥digo, voc√™ pode achar ele cumpre o seu papel perfeitamente, o que de fato √© verdade.',
      },
      {
        type: 'default',
        title: 'Mas, ent√£o?',
        body: 'Acontece que geralmente ap√≥s terminar a escrita um c√≥digo, haver√° sempre a oportunidade de melhor√°-lo, tornando-o mais eficiente e limpo.',
      },
      {
        type: 'default',
        title: null,
        body: "Neste caso, em vez de usar dois 'se', √© poss√≠vel usar outra estrutura, chamada se-sen√£o, veja s√≥:",
      },
      {
        type: 'code',
        body: `
var velFoguete = 50;
var gravidade = 11;

se (gravidade > 10) {
  velFoguete -= 20;
} senao {
  velFoguete += 20;
}

escreva(velFoguete);
// Resultado: 70
`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: null,
        body: 'Como o nome implica, caso a primeira condi√ß√£o n√£o seja verdadeira, apenas o c√≥digo contido em senao √© executado.',
      },
      {
        type: 'list',
        title: null,
        body: 'Ou seja, se for verdadeiro fa√ßa algo, sen√£o fa√ßa outra coisa.',
      },
      {
        type: 'default',
        title: 'Entendi',
        body: 'Agora que a velocidade est√° regulada, √© preciso verificar se o ar √© respir√°vel ou n√£o.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Basta checar se a atmosfera tem n√≠veis de oxig√™nio adequado e se t√™m aus√™ncia de gases t√≥xicos',
      },
      {
        type: 'code',
        body: `
var oxigenioLevel = 20; /* n√≠vel de oxig√™nio */
var nitrogenioLevel = 78; /* n√≠vel de nitrog√™nio */
var outrosGasesLevel = 2; /* n√≠veis de outros gases */

se (
    oxigenioLevel >= 19 e 
    oxigenioLevel <= 23 e 
    nitrogenioLevel >= 75 e 
    nitrogenioLevel <= 81 e 
    outrosGasesLevel <= 5
    ) {
  escreva("A atmosfera √© respir√°vel!");
} senao {
  escreva("A atmosfera n√£o √© respir√°vel!");
}

// Resultado: A atmosfera √© repir√°vel!`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Acho que voc√™ j√° deve ter percebido, mas como visto no c√≥digo acima, √© poss√≠vel usar mais de um operador l√≥gico para formar uma condi√ß√£o, como tamb√©m escrever uma condi√ß√£o debaixo da outra, que o programa ser√° executado normalmente.',
      },
      {
        type: 'default',
        title: 'Sim',
        body: 'Agora com a confirma√ß√£o de que a atmosfera √© respir√°vel, podemos aterrissar no planeta de forma segura, mas n√£o antes de praticar o que vimos.',
      },
    ],
  },
  {
    starId: 13,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Enfim, pousamos com seguran√ßa!',
      },
      {
        type: 'default',
        title: 'Ufa!',
        body: 'Parece que v√°rias pessoas desse planeta j√° come√ßaram a rodear o foguete.',
      },
      {
        type: 'default',
        title: 'O que fazer?',
        body: '√â bom dizer oi para eles, mas como eles n√£o falam a nossa l√≠ngua, ser√° preciso usar um tradutor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por padr√£o ele traduz 2 l√≠nguas estrangeiras: Xanxiriano e Krynnishiano. Por√©m, caso n√£o seja nenhuma das duas, o tradutor procurar√° outro idioma em seu banco de dados',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer um programa disso, utilizaremos a terceira varia√ß√£o da estrutura condicional: sen√£o-se.',
      },
      {
        type: 'default',
        title: 'Mas n√£o j√° vimos isso antes?',
        body: 'N√£o confunda com um simples sen√£o. Neste caso, o sen√£o-se (escrito no c√≥digo como senao se) sempre vir√° depois do primeiro se e antes de sen√£o (caso tenha):',
      },
      {
        type: 'code',
        body: `
var idioma = 'Vortaxiano'

se (idioma = 'Xanxiriano') {
  escreva("Traduzir de Xanxiriano");
} senao se (idioma = 'Krynnishiano') {
  escreva("Traduzir de Krynnishiano");
} senao {
  escreva("Traduzir de outro idioma");
}

// Resultado: Traduzir de outro idioma`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Perceba que o senao se funciona como um se normal, exigindo que passemos uma condi√ß√£o, que caso seja verdadeira, seu bloco de c√≥digo ser√° executado em vez o do senao.',
      },
      {
        type: 'default',
        title: 'Legal',
        body: 'Al√©m disso, a estrutura sen√£o-se tamb√©m √© conhecido como "se aninhado", justamente porque podemos colocar v√°rios senao se dentro de uma estrura condicional.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso ser√° convenientemente √∫til, pois para voc√™ abrir a sa√≠da do foguete, voc√™ precisar√° de uma senha correta.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'A senha √© composta por 4 n√∫meros, e dependendo da combina√ß√£o pode abrir um compartimento diferente do foguete, veja s√≥:',
      },
      {
        type: 'code',
        body: `
var senha = 9713;

se (senha = 2222) {
  escreva("Abrir cozinha");
} senao se (senha = 4567) {
  escreva("Abrir banheiro");
} senao se (senha = 7568) {
  escreva("Abrir quarto de dormir");
} senao se (senha = 5781) {
  escreva("Abrir sala de controle");
}
...
} senao
  escreva("Senha n√£o existe");
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Existe uma forma mais f√°cil de fazer isso usando outro tipo de estrutura, mas podemos falar sobre ela depois.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por enquanto quero que voc√™ perceba que agora podemos construir estruturas complexas, colando se dentro de se.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, voc√™ pode quere desconfiar se os alien√≠genas l√° fora s√£o verdadeiramente amig√°veis',
      },
      {
        type: 'default',
        title: null,
        body: 'Neste caso, podemos usar uma condi√ß√£o dentro de outra condi√ß√£o:',
      },
      {
        type: 'code',
        body: `
var povoAmigavel = verdadeiro;
var povoArmado = falso;
        
se (povoAmigavel == falso) {
    se (povoArmado == verdadeiro) {
        escreva('Fugir para longe')
    } senao {
        escreva('Cair na porrada')
    }
} senao {
    escreva('Tentar conversar') 
}

// Resultado: Tentar conversar`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Lembre-se: caso a condi√ß√£o de um se (se, sen√£o ou sen√£o se) for verdadeiro, todo o bloco de c√≥digo presente nele ser√° executado, sejam outras estruturas condicionais ou n√£o. Caso seja de fato executado, o computador sai do se e depois executa tudo que est√° fora dele.',
      },
    ],
  },
  {
    starId: 14,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Pela conversa que estamos tendo com esse povo, parece que n√£o est√£o muito felizes de termos acabado de pousar em um jardim importante para eles.',
      },
      {
        type: 'default',
        title: 'Mas e agora?',
        body: 'Eles querem nos levar para seu rei para termos uma conversa, ent√£o resta obedecer.',
      },
      {
        type: 'default',
        title: 'Vish...',
        body: 'Chegando ao pal√°cio, o rei aparece furioso, e logo encarrega-se de pedir que escolhemos uma entre 4 p√≠lulas (verde, amarelo, azul e vermelho).',
      },
      {
        type: 'default',
        title: 'Do que se trata disso?',
        body: 'Envolve escolher o tipo de morte que desejamos ter üò®.',
      },
      {
        type: 'default',
        title: 'Putz',
        body: 'Podemos fazer um programa a partir disso, colocando a cor da p√≠lula escolhida em uma vari√°vel e verificando qual tipo de morte ela corresponde.',
      },
      {
        type: 'code',
        body: `
var cor = 'verde';
var morte = '';

se (cor == 'azul') {
  morte = 'Morrer asfixiado';
} senao se (cor == 'amarelo') {
  morte = 'Morrer de dor de cabe√ßa';
} senao se (cor == 'verde') {
  morte = 'Morrer de diarreia';
} senao se (cor == 'vermelho') {
  morte = 'morrer de ataque card√≠aco';
} senao {
  morte = 'N√£o morrer';
}

escreva(morte);
// Resultado: Morrer de diarreia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que √© bem parecido com o programa de verificar a senha correta para abrir a sa√≠da do foguete.',
      },
      {
        type: 'default',
        title: 'Verdade',
        body: 'Tanto nesse caso quanto no outro √© melhor usar outro tipo de estrutura condicional, que √© chamado de "Escolha caso"',
      },
      {
        type: 'default',
        title: 'Queee?',
        body: 'Essa √© uma estrutura condicional bastante diferenciada. Nela, em vez de usar instru√ß√µes que j√° vimos ("se", "senao se" e "se"), devemos utilizar apenas 3, que s√£o completamente diferentes: "escolha", "caso", "padrao"',
      },
      {
        type: 'default',
        title: 'N√£o entendi',
        body: 'Preste aten√ß√£o, a estrutura escolha caso permite que voc√™ execute diferentes blocos de c√≥digo com base no valor de algo.',
      },
      {
        type: 'default',
        title: 'Ok',
        body: 'Esse valor de algo √© avaliado uma vez e, em seguida, √© comparado com cada um dos casos no bloco escolha, veja:',
      },
      {
        type: 'code',
        body: `
var cor = 'verde';
var morte = '';

escolha (cor) {
  caso 'azul': 
    morte = 'Morrer asfixiado';
  caso 'amarelo': 
    morte = 'Morrer de dor de cabe√ßa';
  caso 'verde': 
    morte = 'Morrer de diarreia';
  caso 'vermelho': 
    morte = 'Morrer de ataque card√≠aco';
  padrao:
    morte = 'N√£o morrer';
}

escreva(morte);
// Resultado: Morrer de diarreia`,
        isRunnable: true,
      },
      {
        type: 'list',
        body: 'O resultado √© o mesmo que antes. O valor de cor entre par√™ntese √© comparado com os valores de cada caso dentro do bloco escolha.',
      },
      {
        type: 'list',
        body: 'Se corresponder com um, ent√£o ser√° executado tudo que estiver dentro do bloco deste caso, n√£o precisando mais comparar com os casos restantes, ou seja, o programa para de executar o "escolha caso" a partir do momento em que √© encontrado um caso conrrespondente.',
      },
      {
        type: 'list',
        body: 'Agora se o valor de cor n√£o corresponder a nenhum caso, ent√£o ser√° executado o que estiver no bloco "padrao", ou seja, se o valor de cor n√£o for igual a nenhum caso espec√≠fico, execute o que for padr√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, √© claro que n√£o queremos morrer de diarreia, ent√£o sa√≠mos correndo em dire√ß√£o ao foguete para fujirmos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Os guardas est√£o na nossa cola, resta entrar em uma caverna para despist√°-los.',
      },
      {
        type: 'default',
        title: null,
        body: 'Dentro da caverna √© poss√≠vel ver portais abrindo e fechando.',
      },
      {
        type: 'default',
        title: null,
        body: 'Eu ouvi falar que se voc√™ entrar em um portal roxo voc√™ pode parar em um lugar fant√°stico, mas caso seja vermelho ou azul, ele te pode levar a um limbo sem fim, e se for de qualquer outra cor ele n√£o leva para lugar nenhum.',
      },
      {
        type: 'default',
        title: 'S√©rio?',
        body: 'Sim, ent√£o essa √© mais uma situa√ß√£o para usarmos a estrutura de escolha caso',
      },
      {
        type: 'code',
        body: `
var cor = 'roxo';
var destino = '';

escolha (cor) {
  caso 'azul': 
  caso 'vermelho': 
    destino = 'Limbo';
  caso 'roxo': 
    destino = 'Lugar fant√°stico';
  padrao:
    destino = 'nenhum';
}

escreva(destino);
// Resultado: Lugar fant√°stico`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'N√£o expliquei antes, por√©m dois ou mais casos podem ter o mesmo bloco, isto √©, podem excutar um mesmo bloco de c√≥digo.',
      },
      {
        type: 'alert',
        body: 'Ou seja, nesta situa√ß√£o se um portal for tanto azul ou vermelho, o destino ser√° o limbo',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas como encontramos um portal roxo, resta entrar nele e ver o que nos aguarda.',
      },
    ],
  },
  {
    starId: 15,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ufa, parace que aqueles aliens estranhos foram para outra dire√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Contudo, agora estamos em um planeta completamente desconhecido.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para come√ßar tentar descobrir, podemos fazer uma varredura do local em que estamos, coletando amostras do solo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Toda vez que o fogute coleta uma amostra, podemos fazer um programa que incremente 1 a uma variavel do tipo n√∫mero com o nome "totalAmostras".',
      },
      {
        type: 'code',
        body: `
var totalAmostras = 0;
totalAmostras++;

escreva(totalAmostras)

// Resultado: 1`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Eu n√£o te contei, mas esse √© outro operador especial, chamado "operador de incremento" (++), que se colocado ap√≥s uma vari√°vel do tipo n√∫mero ele acrescenta 1 ao seu valor atual.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, o foguete possui 10 lotes dispon√≠veis para armazenar amostras. Ent√£o, devemos incrementar a vari√°vel totalAmostras 10 vezes.',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;
totalAmostras++;

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Pronto',
        body: '√â claro que existe uma maneira muuuuuuito mais f√°cil de fazer isso.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Usando estrutura de repeti√ß√£o, ou para os mais √≠ntimos, la√ßo de repeti√ß√£o ou apenas la√ßo.',
      },
      {
        type: 'default',
        title: 'La√ßo?',
        body: 'Sim!! Os la√ßos s√£o usados para executar um conjunto de instru√ß√µes v√°rias vezes. Isso ajuda a reduzir o c√≥digo e evitar repeti√ß√µes desnecess√°rias.',
      },
      {
        type: 'default',
        title: 'Interessante',
        body: 'Existem 3 maneiras de usar la√ßos, mas considerando esse nosso caso, iremos utilizar a instru√ß√£o "para"',
      },
      {
        type: 'list',
        title: 'Para',
        body: 'A instru√ß√£o "para" √© o tipo de la√ßo mais comum, e √© usado para executar um bloco de c√≥digo por um n√∫mero espec√≠fico de vezes. Para escrev√™-la, a sintaxe √© a seguinte:',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'N√£o entendi nada',
        body: 'Vamos por partes: todo la√ßo "para" tem que ter 3 par√¢metros, que s√£o as express√µes separadas por ponto e v√≠rgula e que est√£o entre par√™nteses ap√≥s a palavra para.',
      },
      {
        type: 'list',
        title: 'Inicializa√ß√£o',
        body: 'A primeira √© a inicializa√ß√£o, que √© a primeira coisa a ser executada antes do "para" fazer o seu trabalho de fato.',
      },
      {
        type: 'alert',
        body: 'A inicializa√ß√£o serve para iniciar a vari√°vel de controle do la√ßo, que explicarei mais sobre depois.',
      },
      {
        type: 'list',
        title: 'Condi√ß√£o',
        body: 'A segunda √© a condi√ß√£o, que √© a express√£o l√≥gica avaliada no in√≠cio de cada itera√ß√£o do la√ßo. Se a condi√ß√£o for verdadeira, o bloco de c√≥digo dentro do la√ßo √© executado; caso contr√°rio, o la√ßo √© encerrado.',
      },
      {
        type: 'alert',
        body: 'Itera√ß√£o do la√ßo refere-se quantas vezes o bloco de c√≥digo ser√° executado, ou seja, 10 itera√ß√µes significam 10 repeti√ß√µes.',
      },
      {
        type: 'list',
        title: 'Express√£o final',
        body: 'A √∫ltima √© a Express√£o final, que √© a instru√ß√£o executada no final de cada itera√ß√£o do la√ßo. Geralmente √© usada para atualizar a vari√°vel de controle citada anteriormente.',
      },
      {
        type: 'alert',
        body: 'A vari√°vel de controle √© uma vari√°vel que √© utilizada para determinar quando a execu√ß√£o do la√ßo ir√° parar. Geralmente, o valor dela √© atualizada a cada itera√ß√£o e esse novo valor √© usada na condi√ß√£o do la√ßo antes que uma nova execu√ß√£o seja feita.',
      },
      {
        type: 'default',
        title: 'Express√£o final',
        body: 'Agora voltando ao c√≥digo que acabamos de fazer:',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Nesse caso espec√≠fico, na inicializa√ß√£o do "para" declaramos uma vari√°vel contador iniciando com 0 e ela far√° o papel de controlar o la√ßo.',
      },
      {
        type: 'default',
        title: null,
        body: 'A condi√ß√£o ser√° verificar se o valor de contador √© menor que o valor de totalLotes, que √© 10.',
      },
      {
        type: 'default',
        title: null,
        body: 'Na express√£o final o contador ser√° incrementado em 1 a cada itera√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: ' No bloco de c√≥digo, definimos que a vari√°vel totalAmostras tamb√©m dever ser incrementada em 1 a cada itera√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Dessa forma, se a vari√°vel totalAmostras for igual ou maior que totalLotes, o para √© encerrado, totalizando 10 itera√ß√µes, ou seja, o valor de totalAmostras foi icrementada em 1 por 10 vezes seguidas.',
      },
      {
        type: 'default',
        title: 'Acho que comecei a entender',
        body: '√â claro que podemos colocar qualquer c√≥digo v√°lido dentro do bloco do "para", inclusive outras estruturas.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Por exemplo, se quisermos que ao coletar 5 amostras seja escrito "J√° coletei 5 amostras", podemos colocar uma estrutura condicional dentro do para.',
      },
      {
        type: 'code',
        body: `
var totalLotes = 10;
var totalAmostras = 0;

para (var contador = 0; contador < totalLotes; contador++) {
    se (contador == 5) {
        escreva("J√° coletei 5 amostras")
    }
    totalAmostras++
}

escreva(totalAmostras)

// Resultado: J√° coletei 5 amostras 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal!',
        body: 'Tamb√©m podemos colocar la√ßo dentro de outro la√ßo, mas podemos falar sobre isso em outra hora.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que j√° temos amostras coletadas, podemos ver o que nesse novo planeta pode nos surpreender.',
      },
    ],
  },
  {
    starId: 16,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Com as amostras coletadas, resta analis√°-las.',
      },
      {
        type: 'default',
        title: 'Ok',
        body: 'Contudo, para o foguete fazer √† an√°lise ele precisa abrir conex√£o com o analisador. Al√©m disso, a conex√£o em si precisa estar ativa enquanto ocorre a an√°lise.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer o programa a partir disso podemos usar outro tipo de la√ßo, conhecido como "enquanto"',
      },
      {
        type: 'default',
        title: null,
        body: 'Para escrever esse la√ßo ser√° mais facil que o "para".',
      },
      {
        type: 'list',
        title: 'enquanto',
        body: 'O "enquanto" apenas precisa da condi√ß√£o, que enquanto for verdadeira ser√° executado o seu bloco de c√≥digo repetidas vezes.',
      },
      {
        type: 'default',
        title: 'Por que?',
        body: 'No nosso caso, como temos no total 10 amostras, sempre que uma for analisada, ser√° subtra√≠do 1 do total.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva){
    totalAmostras--;
}

escreva(totalAmostras)`,
        isRunnable: false,
      },
      {
        type: 'alert',
        body: 'Perceba que foi utilizado outro operador especial, no caso o operador de decremento, ou seja, ao contrario do de incremento, ele subtrai 1 do valor atual de uma variavel. ',
      },
      {
        type: 'default',
        title: null,
        body: 'Como dito a instru√ß√£o enquanto executar√° tudo que estiver no seu bloco enquanto sua condi√ß√£o for verdadeira.',
      },
      {
        type: 'default',
        title: 'Eu vi',
        body: 'Por√©m, neste caso a execu√ß√£o nunca terminar√°, pois a vari√°vel conexaoAtiva sempre sera verdadeira at√© o fim do programa.',
      },
      {
        type: 'default',
        title: null,
        body: 'Chamamos isso de la√ßo infinito, o que sempre deve ser evitado em qualquer programa. Para evitar isso podemos modificar a condi√ß√£o, de modo que haja uma vari√°vel de controle.',
      },
      {
        type: 'default',
        title: null,
        body: 'Neste caso, podemos colocar a variavel totalAmosras na condi√ß√£o, dizendo que enquanto ela for maior que zero continua executando o bloco.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva e totalAmostras > 0) {
    totalAmostras--;
}                        
 
escreva(totalAmostras)
// Resultado: 0`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Assim, a partir do momento em que totalAmostras for igual a zero, o enquanto √© encerrado. ',
      },
      {
        type: 'default',
        title: null,
        body: '√â possivel tambem for√ßar o enquanto parar de executar. Para isso, √© preciso usar uma instru√ß√£o especial chamada pausa.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso queiramos que apenas cinco amostras sejam analisadas, podemos colocar o pausa quando a vari√°vel totalAmostras for igual a esse valor:',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

enquanto(conexaoAtiva e totalAmostras > 0) {
    se (totalAmostras == 5) {
      pausa;
    }
    totalAmostras--;
}                        
 
escreva(totalAmostras)
// Resultado: 5`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Legal',
        body: '√â claro que isso tamb√©m funciona para outros tipos de la√ßo, como o para.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, √© totalmente poss√≠vel realizar o que acabamos de fazer, usando um simples para.',
      },
      {
        type: 'code',
        body: `var conexaoAtiva = verdadeiro; 
var totalAmostras = 10;

para (; totalAmostras > 0 e conexaoAtiva; totalAmostras--) {
    se (totalAmostras == 5) {
        pausa;
    }
}                        

escreva(totalAmostras)
// Resultado: 5`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Veja que n√£o h√° inicializa√ß√£o nesse para, pois a vari√°vel de controle, no caso totalAmostras, foi declarada fora dele, e ao inv√©s de incremet√°-la na express√£o final, estamos decrementando-a.',
      },
      {
        type: 'default',
        title: 'Mas quando usar para ou enquanto',
        body: 'Muito bem, usamos o enquanto apenas em situa√ß√µes que n√£o sabemos quantas repeti√ß√µes o la√ßo ir√° ter, e o para quando j√° sabemos disso.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso n√£o soub√©ssemos se a conex√£o est√° ativa ou n√£o, ter√≠amos que usar apenas o la√ßo enquanto, pois como a vari√°vel conexaoAtiva tem valor l√≥gico, n√£o teria como mudar o valor dela a cada itera√ß√£o na express√£o final do la√ßo para.',
      },
      {
        type: 'default',
        title: 'Entendi',
        body: 'Agora com as amostras devidamente analisadas, j√° temos a reposta de qual planeta estamos.',
      },
    ],
  },
  {
    starId: 17,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Tenho m√°s not√≠cias. De acordo com a an√°lise das amostras, estamos em um planeta com o n√∫cleo bastante inst√°vel.',
      },
      {
        type: 'default',
        title: 'E?',
        body: 'Acontece que esse planeta n√£o tem mais vida longa, o que quer dizer que √© bom sairmos desse lugar imediatamente!',
      },
      {
        type: 'default',
        title: null,
        body: 'Para come√ßar, podemos aumentar a pot√™ncia dos motores at√© chegarem ao m√°ximo da sua capacidade limite.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso, podemos criar um programa que, enquanto os motores n√£o chegarem ao seu limte (100), continuaremos a aumentar sua pot√™ncia em 10.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, ao come√ßar aumentar a pot√™ncia, √© ligado a vetoinha para evitar superaquecimento, mas apenas depois que a pot√™ncia √© aumentada por pelo menos uma vez.',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que s√≥ podemos parar de aumentar a pot√™ncia apenas depois que a ventoinha for desligada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o temos uma situa√ß√£o complicada.',
      },
      {
        type: 'code',
        body: `var potencia = 20; 
var limite = 100;
var ventoinhaLigada = falso;

enquanto (ventoinhaLigada) {
    potencia += 10;
    se (potencia == limite) {
        ventoinhaLigada = falso;
    } senao {
        ventoinhaLigada = verdadeiro;
    }
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Percebeu que a conta n√£o fecha? O processo de aumentar a pot√™ncia s√≥ para quando ventoinhaLigada for verdadeiro, mas o valor dela, que come√ßa em falso, s√≥ muda a partir do momento em que eu come√ßo aumentar a pot√™ncia ü§®.',
      },
      {
        type: 'default',
        title: 'Putz...',
        body: 'Para resolver esse problema podemos usar o terceiro tipo de la√ßo: o "faca enquanto"',
      },
      {
        type: 'list',
        title: 'Fa√ßa enquanto',
        body: 'O "faca enquanto" √© um la√ßo que permite executar um bloco de c√≥digo pelo menos uma vez e depois repetir a execu√ß√£o do bloco enquanto uma condi√ß√£o especificada for verdadeira.',
      },
      {
        type: 'default',
        title: 'Hmm...',
        body: 'No nosso caso vai cair com uma luva, pois a condi√ß√£o do la√ßo √© verificada apenas ap√≥s seu bloco de c√≥digo ser executado pelo menos uma vez, permitindo que a condi√ß√£o (ventoinhaLigada) seja falsa em um primeiro momento, veja:',
      },
      {
        type: 'code',
        body: `var potencia = 20; 
var limite = 100;
var ventoinhaLigada = falso;

faca {
    potencia += 10;
    se (potencia == 100) {
        ventoinhaLigada = falso;
    } senao {
        ventoinhaLigada = verdadeiro;
    }
} enquanto (ventoinhaLigada)

escreva(potencia);
// Resultado: 100`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Ent√£o essa √© a diferen√ßa entre "enquanto" e "faca enquanto": o "faca enquanto" garante que o bloco de c√≥digo seja executado pelo menos uma vez, mesmo se a condi√ß√£o do la√ßo inicialmente for falsa, o que pode ser bastante √∫ltil em algumas situa√ß√µes como essa agora.',
      },
      {
        type: 'alert',
        body: 'Em contrapartida, o "enquanto" n√£o executa o bloco de c√≥digo se a condi√ß√£o especificada for falsa desde o in√≠cio.',
      },
      {
        type: 'default',
        title: '√â cada uma meu',
        body: 'Est√° tudo muito bonito, mas ainda temos que cair fora desse planeta.',
      },
      {
        type: 'default',
        title: null,
        body: 'A medida que subimos, estamos aumentando de velocidade e diminuindo a dist√¢ncia at√© o espa√ßo.',
      },
      {
        type: 'code',
        body: `var velocidade = 0; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;

enquanto (distanciaAteEspaco > 0) {
    velocidade++;
    distanciaAteEspaco--;
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m no momento que conseguirmos sairmos da atmosfera, temos que estabilizar a velocidade em um valor fixo para entrar em √≥rbita do planeta e ent√£o acelerar denovo para pegar mais impulso para ir ainda mais longe.',
      },
      {
        type: 'default',
        title: null,
        body: 'Sabe como resolver isso?',
      },
      {
        type: 'default',
        title: 'Usando se senao?',
        body: 'Pode ser uma boa, mas tem um jeito mais elegante de fazer isso em um la√ßo.',
      },
      {
        type: 'default',
        title: 'De que jeito?',
        body: 'Usando outra instru√ß√£o especial: o "continua"',
      },
      {
        type: 'list',
        title: 'Continua',
        body: 'O "continua" √© uma instru√ß√£o usada dentro de la√ßos, como o "pause", s√≥ que ele permite pular a intera√ß√£o atual e ir para a pr√≥xima imediatamente.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Quando o "continua" √© executado dentro de um la√ßo, o c√≥digo abaixo da instru√ß√£o n√£o √© executado e a pr√≥xima itera√ß√£o do la√ßo √© iniciada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso pode ser √∫til em situa√ß√µes em que voc√™ deseja que parte de um bloco de c√≥digo seja ignorada em uma determinada situa√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, no nosso caso queremos que a vari√°vel velocidade pare de ser incrementada enquanto estivermos em √≥rbita do planeta, o que ocorre enquanto distanciaAteEspaco for menor ou igual 1000 e comprimentoDaOrbita for maior que 0',
      },
      {
        type: 'code',
        body: `var velocidade = 50; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;

enquanto (distanciaAteEspaco > 0) {
  se (distanciaAteEspaco <= 1000 e comprimentoDaOrbita > 0) {
      comprimentoDaOrbita--
      continua;
  }
  velocidade++;
  distanciaAteEspaco--;
}

escreva("distanciaAteAtmosfera: " + distanciaAteAtmosfera);
escreva("comprimentoDaOrbita: " + comprimentoDaOrbita);
escreva("velocidade: " + velocidade);
/* Resultado: 
distanciaAteAtmosfera: 0
comprimentoDaOrbita: 0
velocidade: 1500
*/
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Dessa forma, sempre que distanciaAteEspaco e comprimentoDaOrbita for maior que 500, tudo o que estiver ap√≥s isso, no caso velocidade++; e distanciaAteEspaco--; n√£o √© executado.',
      },
      {
        type: 'default',
        title: null,
        body: 'E a partir do momento em que a condi√ß√£o do se n√£o for mais verdadeira, a segunda parte mencionada do bloco (velocidade++; e distanciaAteEspaco--;) volta a ser executada.',
      },
      {
        type: 'default',
        title: 'Complicado isso',
        body: 'Vou colocar uma vari√°vel "vezes" para ajudar voc√™ a entender melhor o que est√° acontecendo.',
      },
      {
        type: 'code',
        body: `var velocidade = 50; 
var distanciaAteEspaco = 1500;
var comprimentoDaOrbita = 500;
var vezes = 0;

enquanto (distanciaAteEspaco > 0) {
  vezes++;
  se (distanciaAteEspaco <= 1000 e comprimentoDaOrbita > 0) {
      comprimentoDaOrbita--
      continua;
  }
  velocidade++;
  distanciaAteEspaco--;
}

escreva("distanciaAteAtmosfera: " + distanciaAteAtmosfera);
escreva("comprimentoDaOrbita: " + comprimentoDaOrbita);
escreva("velocidade: " + velocidade);
escreva("vezes: " + vezes);
/* Resultado: 
distanciaAteAtmosfera: 0
comprimentoDaOrbita: 0
velocidade: 1500
vezes: 2000
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que a vari√°vel vezes indica que o enquanto foi executada 2000 vezes, por√©m a velocidade s√≥ foi aumentada em 1500 vezes.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ou seja, nas vezes em que "continua" foi executado, velocidade++ n√£o foi, justamente porque essa instru√ß√£o fez com que o la√ßo come√ßasse outra itera√ß√£o antes que ela fosse incrementada.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, resumidamente, o "continua" serve para pular uma repeti√ß√£o do la√ßo em um dado ponto do seu bloco de c√≥digo.',
      },
      {
        type: 'default',
        title: 'Acho que entendi, talvez...',
        body: 'Com o tempo voc√™ pega o jeito, agora √© hora de se concentra na fuga.',
      },
    ],
  },
  {
    starId: 18,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Agora que j√° encontramos v√°rios planetas para explorar, podemos configurar para a rota o mais pr√≥ximo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas ainda mais importante que isso √© verificar se os suprimentos do foguete est√£o tudo ok.',
      },
      {
        type: 'default',
        title: 'Como fazer isso',
        body: 'Primeiro, vejamos o que temos de comida no momento.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas o que √© isso na vari√°vel alimentos?',
        body: 'Isso nada mais √© do que um vetor.',
      },
      {
        type: 'list',
        title: 'Vetores',
        body: 'Vetores s√£o uma cole√ß√£o ordenada de valores, onde cada valor √© identificado por um √≠ndice. Em outras palavras, um vetor √© um conjunto de elementos que podem ser acessados ‚Äã‚Äãpor sua posi√ß√£o num√©rica dentro do vetor.',
      },
      {
        type: 'default',
        title: 'Acesso por posi√ß√£o num√©rica?',
        body: 'Sim! Por exemplo, caso queiramos pegar a ma√ß√£ da vari√°vel "alimentos" devemos fazer da seguinte forma:',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[0])
  
// Resultado: ma√ß√£`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Como dito, para acessar qualquer elemento dentro de uma vari√°vel que √© um vetor, temos que colocar entre colchetes ([]) ao lado da vri√°vel o n√∫mero do seu √≠ndice, isto √©, sua posi√ß√£o na lista de elementos conforme a ordem normal com dire√ß√£o de esquerda para direita.',
      },
      {
        type: 'alert',
        body: 'Veja que foi escrito apenas ma√ß√£, em vez de todos os alimentos, visto que estamos acessando apenas o primeiro elemento, o que poss√≠vel por meio do n√∫mero que corresponde a sua posi√ß√£o no vetor, no caso, o zero.',
      },
      {
        type: 'default',
        title: 'Mas por que zero',
        body: 'Isso porque a posicao dos elementos sempre come√ßa pelo zero, ou seja, se voc√™ quisesse pegar o segundo elemento de qualquer vetor, ter√≠amos que colocar 1 entre colchetes.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[1])
  
// Resultado: batata`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Dica: √â poss√≠vel acessar o √∫ltimo elemento de qualquer vetor, independentemente quantos elementos ele tenha. Para isso, basta colocar 1 negativo (-1)',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[-1])
  
// Resultado: geleia`,
        isRunnable: true,
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4, 5, 6, 7]
 
escreva(alimentos[-1])
  
// Resultado: 7`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas por que um negativo?',
        body: 'Isso porque se voc√™ colocar n√∫meros negativos como √≠ndice, voc√™ estar√° invertendo a ordem de dire√ß√£o normal de acesso (esquerda para direita) para direita a esquerda.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, caso coloc√°ssemos -2 como √≠ndice, estar√≠amos pegando o pen√∫ltimo elemento de um vetor.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
escreva(alimentos[-2])
  
// Resultado: bife`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar, como eu fa√ßo para adicionar um novo elemento ao vetor.',
      },
      {
        type: 'default',
        title: 'o que eu posso fazer para adicionar um novo elemento ao vetor?',
        body: 'Para fazer isso, basta colocar o elemento na posi√ß√£o que queremos que ele tenha dentro do vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Como no momento temos 4 alimentos, podemos colocar uma goiabada na quinta posi√ß√£o desse vetor, ent√£o colocar√≠amos qual √≠ndice?',
      },
      {
        type: 'default',
        title: '5?',
        body: 'N√£o! Lembre-se os √≠ndices/posi√ß√µes de um vetor sempre come√ßam do 0, logo o quinto √≠ndice corresponde a 4',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
alimentos[4] = 'goiabada'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia, goiabada`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Cuidado, dependendo da posi√ß√£o em que voc√™ colocar o novo elemento, poder√° haver espa√ßos vazios no vetor.',
      },
      {
        type: 'alert',
        body: 'Por exemplo, se tiv√©ssemos colocado a goiabada no √≠ndice 7, as posi√ß√µes 4, 5 e 6 ficariam vagas.',
      },
      {
        type: 'code',
        body: `var alimentos = ['ma√ß√£', 'batata', 'bife', 'geleia']
 
alimentos[7] = 'goiabada'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, bife, geleia, , , , goiabada`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Caso isso aconte√ßa, podemos substituir essas pos√≠√ß√µes por alimentos de verdade.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar denovo, como eu fa√ßo para substituir um elemento de um vetor?',
      },
      {
        type: 'default',
        title: 'como eu fa√ßo para substituir um elemento de um vetor?',
        body: 'Da mesma forma que colocamos novos elementos em um vetor. Caso j√° exista algum elemento na posi√ß√£o que especificarmos, esse elemento ser√° substitu√≠do pelo novo.',
      },
      {
        type: 'code',
        body: `var alimentos = [
    'ma√ß√£',
    'batata',
    'bife',
    'geleia'
]
 
alimentos[2] = 'iogurte'
      
escreva(alimentos)
  
// Resultado: ma√ß√£, batata, iogurte, geleia`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Perceba que escrevi o vetor de um jeito diferenciado: Em vez de colocar os elementos um do lado do outro, coloquei um em baixo do outro separados por v√≠rgulas, o que tamb√©m √© totalmente poss√≠vel',
      },
      {
        type: 'default',
        title: null,
        body: 'Existem outras formas de acrescentar novos elementos a um vetor, mas por agora j√° estamos bem em conhecimento novo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora voc√™ pode pergutar denovo, como eu fa√ßo para remover um elemento de um vetor?',
      },
      {
        type: 'default',
        title: 'Como eu fa√ßo para remover um elemento de um vetor?',
        body: 'Como disse, j√° estamos bem em conhecimento novo, at√© a pr√≥xima.',
      },
    ],
  },
  {
    starId: 19,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Agora que n√≥s conseguimos vizualizar o que temos de alimentos na nave, percebemos que temos poucos alimentos para uma viagem longa.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para a nossa sorte, estamos perto de um mercad√£o espacial, que √© uma esta√ß√£o gigante onde √© poss√≠vel comprar qualquer tipo de coisa que voc√™ pode imaginar.',
      },
      {
        type: 'default',
        title: '#PatiuMercadao',
        body: 'Agora que estamos no mercad√£o, podemos colocar os itens no carrinho.',
      },
      {
        type: 'default',
        title: '#PatiuMercadao',
        body: 'E √© claro que nosso carrinho se trata de um vetor, ent√£o vejamos o que temos por enquanto:',
      },
      {
        type: 'code',
        title: null,
        body: `var carrinho = [];
    
escreva(carrinho);
// Resultado: Nada`,
      },
      {
        type: 'default',
        title: null,
        body: 'Absolutamente nada, ou seja, temos um vetor completamente vazio.',
      },
      {
        type: 'default',
        title: null,
        body: 'Anteriormente voc√™ aprendeu como adicionar um item em um vetor usando os n√∫meros de √≠ndice.',
      },
      {
        type: 'default',
        title: 'Sim',
        body: 'Como prometido vou explicar outro m√©todo para adicionar itens, que √© bem mais f√°cil na minha opini√£o.',
      },
      {
        type: 'default',
        title: 'Qual???',
        body: 'Para isso usaremos o m√©todo "adicionar"',
      },
      {
        type: 'default',
        title: 'M√©todo?',
        body: 'Sim! M√©todos s√£o fun√ß√µes para manipular vetores, o que inclui adicionar ou remover elementos, classificar os itens em ordem crescente ou decrescente, pesquisar um elemento espec√≠fico e muito mais!',
      },
      {
        type: 'default',
        title: 'N√£o sei se entendi direito',
        body: 'M√©todos, em programa√ß√£o, s√£o a√ß√µes que um objeto pode executar. Pense em um objeto do mundo real, como um carro. Um carro tem m√©todos, como "ligar", "acelerar" e "frear". Esses m√©todos permitem que o carro execute a√ß√µes espec√≠ficas.',
      },
      {
        type: 'default',
        title: null,
        body: 'Da mesma forma, em programa√ß√£o, um objeto (no nosso caso um vetor) tamb√©m tem m√©todos que podem ser executados para realizar tarefas espec√≠ficas.',
      },
      {
        type: 'default',
        title: 'Adicionar()',
        body: 'Um desses m√©todos √© o "adicionar()", que permite, obviamente, adicionar um novo elemento a um vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para us√°-lo, basta colocar o novo item entre os par√¢metese do m√©todo, e para execut√°-lo, basta coloc√°-lo ao lado do vetor separado por um ponto (.).',
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')

escreva(carrinho)
// Resultado: castanhas do planeta Par√°vion`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: '√â atrav√©s do ponto (.) que voc√™ poder√° usar os m√©todos, e alguns podem exigir que voc√™ passe alguns valores entre os seus par√™nteses.',
      },
      {
        type: 'alert',
        body: 'Como tinha dito, m√©todos s√£o fun√ß√µes, e veremos mais sobre eles futuramente, n√£o se preocupe :).',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, √© claro que algumas castanhas n√£o ser√£o sufuciente para uma viagem longa, ent√£o vamos adicionar mais alguns itens.',
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereais')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('casacos')
carrinho.adicionar('cobertores')
carrinho.adicionar('luvas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

escreva(carrinho);`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Tudo isso meu?',
        body: 'Sim, tudo isso. O que acontece √© que o pr√≥ximo planeta √© puramente glacial, ent√£o √© bom voc√™ estar bem preparado.',
      },
      {
        type: 'default',
        title: null,
        body: 'Podemos ver quantos itens j√° temos no carrinho, utilizando outro m√©todo de vetor: "tamanho()"',
      },
      {
        type: 'list',
        title: 'Tamanho()',
        body: 'O m√©todo "tamanho()" literalmente retorna o tamanho de um vetor, isto √©, o n√∫mero de itens que h√° atualmente nele.',
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereais')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('casaco')
carrinho.adicionar('radar')
carrinho.adicionar('luvas')
carrinho.adicionar('botas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

escreva(carrinho.tamanho());
// Resultado: 12`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Como esperado, o carrinho atualmente tem 12 itens. Ao passar no caixa teremos que remover cada um.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas agora √© claro que utilizaremos um m√©todo para facilitar esse trabalho, no caso utilizaremos o m√©todo remover().',
      },
      //   {
      //     type: 'list',
      //     title: 'remover()',
      //     body: 'Voc√™ j√° deve ter percebido que os m√©todos possuem nomes √≥bvios, e √© assim como deve ser. Lembre-se disso quando criar suas pr√≥prias fun√ß√µes (sim, √© poss√≠vel criar novos m√©todos).',
      //   },
      {
        type: 'list',
        title: 'remover()',
        body: 'Para remover um determinado item de um vetor, voc√™ ter√° que colocar o valor desse item entre os par√™nteses, veja o exemplo.',
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereais')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('casaco')
carrinho.adicionar('radar')
carrinho.adicionar('luvas')
carrinho.adicionar('botas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

carrinho.remover('lanterna')
carrinho.remover('casaco')
carrinho.remover('radar')
carrinho.remover('luvas')

escreva(carrinho.tamanho());
// Resultado: 8`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Dica: existem outros m√©todos para remover um iten de um vetor, como o removerPrimeiro(), que como o nome implica, ele remove sempre o primeiro elemento de um vetor.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4];
    

carrinho.removerPrimeiro()

escreva(numeros);
// Resultado: 2, 3, 4`,
        isRunnable: true,
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereais')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('radar')
carrinho.adicionar('cobertores')
carrinho.adicionar('luvas')
carrinho.adicionar('botas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

carrinho.remover('lanterna')
carrinho.remover('radar')
carrinho.remover('cobertores')
carrinho.remover('luvas')

carrinho.removerPrimeiro()

escreva(carrinho.tamanho());
// Resultado: 7`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Voc√™ pode me perguntar: se existe removerPrimeiro(), ent√£o existe removerUltimo(). De fato, voc√™ est√° certo, e esse m√©todo sempre remove o √∫ltimo item de qualquer vetor.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4];
    

carrinho.removerUltimo()

escreva(numeros);
// Resultado: 1, 2, 3`,
        isRunnable: true,
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereais')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('casacos')
carrinho.adicionar('cobertores')
carrinho.adicionar('luvas')
carrinho.adicionar('botas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

carrinho.remover('lanterna')
carrinho.remover('casacos')
carrinho.remover('cobertores')
carrinho.remover('luvas')

carrinho.removerPrimeiro()
carrinho.removerUltimo()

escreva(carrinho.tamanho());
// Resultado: 6`,
        isRunnable: true,
      },
      {
        type: 'default',
        title:
          'Ser√° que n√£o d√° para usar la√ßo para agilizar no trabalho de remover todos esses itens?',
        body: 'De fato temos um g√™nio. Sim, na maioria das vezes usamos la√ßos para trabalhar com vetores.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, para remover todos os itens de uma vez podemos usar o removerUltimo() e o tamanho do vetor dentro de um la√ßo enquanto, veja:',
      },
      {
        type: 'code',
        body: `var carrinho = [];
    
carrinho.adicionar('castanhas do planeta Par√°vion')
carrinho.adicionar('carregador solar')
carrinho.adicionar('kit de primeiros socorros')
carrinho.adicionar('barras de cereal')
carrinho.adicionar('baterias')
carrinho.adicionar('lanterna')
carrinho.adicionar('casaco')
carrinho.adicionar('radar')
carrinho.adicionar('luvas')
carrinho.adicionar('botas')
carrinho.adicionar('cordas')
carrinho.adicionar('aquecedor')

enquanto (carrinho.tamanho() > 0) {
    carrinho.removerUltimo()
}

escreva(carrinho.tamanho());
// Resultado: 0`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Neste exemplo, enquanto o tamanho do vetor for maior que 0, continuaremos removendo o √∫ltimo item dele.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que j√° terminamos as compras, boa sorte tentando levar tudo isso ao foguete.',
      },
    ],
  },
  {
    starId: 20,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Finalmente, j√° pousamos na superficie do planeta.',
      },
      {
        type: 'default',
        title: null,
        body: 'Antes de sairmos do fogute √© bom verificar se estamos levando um aquecedor entre nossos equipamentos, que, √© claro, se trata de um vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso, devemos usar outro m√©todo, no caso, o "inclui".',
      },
      {
        type: 'code',
        body: `var equipamentos = ["mochila", 
        "lanterna", 
        "aquecedor", 
        "sinalizador"
];
    
escreva(equipamentos.inclui("aquecedor"));
// Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'inclui()',
        body: 'O m√©todo "inclui" verifica se um elemento espec√≠fico passado entre par√™nteses esta presente no vetor ou nao. Esse m√©todo retorna um valor logico, ou seja, caso um item esteja incluido ele ir√° retornar verdadeiro, caso contr√°rio retornar√° falso.',
      },
      {
        type: 'default',
        title: null,
        body: '√â por esse motivo que nesse caso o resultado deu verdadeiro, pois de fato temos um aquecedor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Depois de verificar nosso aquecedor, vamos olhar novamente em nossos equipamentos para ver se possuimos alguma arma, uma blaster, por exemplo, que servirar√° para a nossa defesa pois apesar de estar congelado, esse novo planeta pode possuir criaturas selvagens.',
      },
      {
        type: 'code',
        body: `var equipamentos = ["mochila", 
        "lanterna", 
        "aquecedor", 
        "sinalizador"
];
    
escreva(equipamentos.inclui("blaster"));
// Resultado: falso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Obiviamente deu falso, pois j√° te contei que n√£o temos armas h√° 4 planetas atr√°s.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, voc√™ n√£o acha que ainda est√° faltando equipamentos importantes, tipo um kit de primeiro socorros ou um radar?.',
      },
      {
        type: 'default',
        title: 'Talvez',
        body: 'De fato esquecemos coisas que ainda n√£o tiramos do nosso vetor compras.',
      },
      {
        type: 'code',
        body: `var compras = ["kit de primeiro socorros", "radar", "baterias"]`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Para adicionar esses itens no vetor equipamentos, podemos fazer de v√°rias formas.',
      },
      {
        type: 'default',
        title: null,
        body: 'A mais simples √© usando um m√©todo que junte esses vetores em um √∫nico vetor, ou seja, que concatene eles.',
      },
      {
        type: 'default',
        title: 'Ent√£o existe o m√©todo concatenar()?',
        body: 'Isso, voc√™ j√° deve ter percebido que temos m√©todos para quase tudo.',
      },
      {
        type: 'list',
        title: 'concatenar()',
        body: 'O m√©todo "concatenar()" uni vetores em um, s√≥ que ele n√£o altera nenhum dos vetores originais. Ent√£o o resultado dessa uni√£o tem que ser colocada em um novo vetor.',
      },
      {
        type: 'code',
        body: `var equipamentos = [
        "mochila", 
        "lanterna", 
        "aquecedor", 
        "sinalizador"
];
var compras = [
    "kit de primeiro socorros", 
    "radar", 
    "bateria"
];

var meusItens = equipamentos.concatenar(compras)

escreva(meusItens);
// Resultado: mochila, lanterna, aquecedor, sinalizador, kit de primeiro socorros, radar, bateria`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Veja que os vetores "equipamentos" e "compras" ainda existem, mas n√£o precisamos mais deles, todos os elementos presentes nos dois est√£o tamb√©m no vetor todosEquipamentos.',
      },
      {
        type: 'alert',
        body: 'Essa √© uma boa t√©cnica para adicionar v√°rios elementos de uma vez em um vetor, s√≥ que a √∫nica desvatagem seria ter que criar uma nova caso quis√©ssemos manipular esse novo vetor.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3];

var novosNumeros = numeros.concatenar([4, 5, 6])

escreva(novosNumeros);
// Resultado: 1, 2, 3, 4, 5, 6`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Muito bem, mas acho que voc√™ deve estar se perguntando: "A gente n√£o vai levar alimento nenhum?"',
      },
      {
        type: 'default',
        title: null,
        body: 'N√£o passeremos fome. Eu colequei os alimentos para explora√ß√£o em um vetor separado.',
      },
      {
        type: 'code',
        body: `var alimentos = [
            "garrafa d'√°gua", 
            "barra de cereal", 
            "carne enlatada", 
            "fruta"
];

var qtdAlimentos = [2, 7, 3, 4]

escreva(alimentos);
escreva(qtdAlimentos);
/* Resultado: garrafa d'√°gua, barra de cereal, carne enlatada, fruta
              2, 7, 3, 4
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'O que s√£o qtdAlimentos?',
        body: 'S√£o as quantidades para cada item do vetor alimentos, assim n√£o teremos valores repetidos em um vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para deixar tudo mais organizado, podemos ordernar os alimentos em ordem alfab√©tica.',
      },
      {
        type: 'default',
        title: null,
        body: 'E como fazer isso? Claro, usando um m√©todo chamado "ordernar()"',
      },
      {
        type: 'list',
        title: 'ordenar()',
        body: 'O m√©todo ordenar() √© usado para colocar os elementos de um vetor em ordem alfab√©tica caso ele tenha textos, ou num√©rica, caso tenha n√∫meros. Esse m√©todo j√° n√£o cria um novo vetor, mas sim modifica o vetor original.',
      },
      {
        type: 'code',
        body: `var alimentos = [
                "garrafa d'√°gua", 
                "barra de cereal", 
                "carne enlatada", 
                "fruta"
    ];

    var qtdAlimentos = [2, 7, 3, 4]

    alimentos.ordenar()
    qtdAlimentos.ordernar()

    escreva(alimentos);
    escreva(qtdAlimentos);
    /* Resultado: barra de cereal, carne enlatada, fruta, garrafa d'√°gua
                2, 3, 4, 7
    */`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: '√â poss√≠vel definir a forma de ordena√ß√£o do ordernar(). Por exemplo, e se quis√©ssemos colocar quantidades em ordem descrecente? Mas isso podemos deixar para depois.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que temos tudo organizado, podemos partir para a explora√ß√£o.',
      },
    ],
  },
  {
    starId: 21,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Muito bem, j√° faz algum tempo que estamos andando nesse planeta e j√° adquirimos alguns itens:',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua"
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];

var qtdItens = [9, 4, 20, 37, 12, 1, 2, 1];
`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Assim como fizemos com os alimentos, separamos os nomes dos itens das quantidades de cada um.',
      },
      {
        type: 'default',
        title: null,
        body: 'E se quis√©ssemos saber a quantidade total dos itens?',
      },
      {
        type: 'default',
        title: 'Usando o m√©todo tamanho()?',
        body: 'Na verdade o m√©todo "tamanho()" retornaria quantos itens h√° no vetor, que no nosso caso √© 8.',
      },
      {
        type: 'default',
        title: 'Ent√£o somar()?',
        body: 'Isso!',
      },
      {
        type: 'code',
        body: ` 
var qtdItens = [9, 4, 20, 37, 12, 1, 2, 1];

var soma = qtdItens.somar();

escreva(soma);
// Resultado: 86`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'Somar()',
        body: 'O m√©todo "somar()" gera um n√∫mero sendo a soma de todos os n√∫meros presente no vetor.',
      },
      {
        type: 'alert',
        body: 'Voc√™ percebeu que eu coloquei o resultado de "somar()" em uma vari√°vel, o que tamb√©m seria poss√≠vel usando o m√©todo "inclui()".',
      },
      {
        type: 'code',
        body: ` 
var numeros = [1, 2, 3];

var temNumero2 = numeros.inclui(2);

escreva(temNumero2);
// Resultado: verdadeiro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas e se o vetor tivesso texto?',
        body: 'Boa pergunta! Nesse caso os primeiros itens que s√£o n√∫meros seriam somados, mas ao encontrar um texto ele juntaria os restantes para formar um texto.',
      },
      {
        type: 'code',
        body: ` 
var qtdItens = [9, 4, 20, 'texto', 37, 12, 1, 2, 1];

var soma = qtdItens.somar();

escreva(soma);
// Resultado: 33texto3712121`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Mas isso n√£o o que a gente quer usando o m√©todo "somar()" n√£o √©?',
      },
      {
        type: 'default',
        title: null,
        body: 'Ok, contudo, esse vetor itens est√° muito bagun√ßado! Podemos organiz√°-lo melhor separando os itens por categoria.',
      },
      {
        type: 'default',
        title: 'Como assim?',
        body: 'Por exemplo, podemos pegar os itens que s√£o alimentos e coloc√°-los em um vetor separado.',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que a√≠ ter√≠amos que criar um novo vetor contendo parte dos itens de um vetor principal.',
      },
      {
        type: 'default',
        title: null,
        body: 'E como fazer isso? Claro, usando um m√©todo.',
      },
      {
        type: 'list',
        title: 'Fatiar()',
        body: 'Com o m√©todo "fatiar()" literalmente pegaremos uma fatia de um vetor. Para us√°-lo √© preciso passar dois valores entres os seus par√™nteses: √≠ndice inicial e √≠nidice final.',
      },
      {
        type: 'default',
        title: 'Como assim √≠ndice inicial e final?',
        body: 'O √≠ndice quer dizer o √≠ndice de vetor mesmo, ou seja, sua posi√ß√£o. Primeiramente definimos a partir de qual √≠ndice/posi√ß√£o do vetor, come√ßaremos a fati√°-lo. Ap√≥s isso, definimos em qual posi√ß√£o a fatia deve parar.',
      },
      {
        type: 'default',
        title: null,
        body: 'Dessa forma, os itens desse novo vetor, ser√£o aqueles cujo os √≠ndices est√£o presentes nessa fatia.',
      },
      {
        type: 'default',
        title: 'N√£o entendi',
        body: 'Por exemplo, os alimentos do vetor itens s√£o os tr√™s primeiros, ou seja, √≠ndices 0, 1, e 2. Logo para pegar uma fatia contendo esses itens, definimos o √≠ndice inicial como 0 e o √≠ndice final como 3.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];

var alimentos = itens.fatiar(0, 3);

escreva(alimentos);
// Resultado: fruta, ovo de Icelope, am√™ndua`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas por que 3?',
        body: 'Isso porque o item que tenha o seu √≠ndice igual ao √≠ndice final nunca n√£o estar√° presente nessa fatia. Ele serve apenas como ponto de parada.',
      },
      {
        type: 'alert',
        body: 'Como deve ter percebido, o m√©todo "fatiar()" gera um novo vetor, mas n√£o altera o vetor original, apenas avisando.',
      },
      {
        type: 'default',
        title: 'Hmm...',
        body: 'Esse m√©todo √© um pouco mais complicado de entender, ent√£o continuaremos usando-o para organizar os demais itens.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];

var alimentos = itens.fatiar(0, 3);
var minerais = itens.fatiar(3, 5);
var ferramentas = itens.fatiar(5, 6);
var exoticos = itens.fatiar(6);

escreva(alimentos);
escreva(minerais);
escreva(ferramentas);
escreva(exoticos);

// Excecute para ver o resultado`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Assim, temos:\n(0, 3) - Primeiro item at√© o terceiro item\n(3, 5) - Quarto item at√© o quinto item\n(5, 6) - Sexto item at√© ele mesmo\n(6) - S√©timo item at√© o √∫ltimo item',
      },
      {
        type: 'default',
        title: 'Mas espera a√≠! no √∫timo, o fatiar s√≥ tem um valor nos par√™nteses!',
        body: 'Bem observado! N√£o te contei, mas √© poss√≠vel omitir o √≠ndice final. Caso voc√™ fa√ßa isso, o √≠ndice final ser√° sempre o √∫timo √≠ndice do vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'O que quer dizer que se apenas o √≠ndice inicial for passado, o fatiar() retornar√° o item com esse √≠ndice e todos os demais itens do vetor ap√≥s ele.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4, 5]

var fatia = numeros.fatiar(2);

escreva(fatia)
// Resultado: 3, 4, 5
// fatiar(2) = Terceiro item at√© o √∫ltimo item do vetor`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'T√° mas, o que fazemos com vetor itens?',
        body: 'Sim, agora temos itens duplicados em vetores diferentes, justo porque o "fatiar()" n√£o modifica o vetor originial.',
      },
      {
        type: 'default',
        title: null,
        body: 'Entretanto, h√° um m√©todo que faz exatamente o que "fatiar()" faz, por√©m ele consegue alterar o original.',
      },
      {
        type: 'default',
        title: 'Qual?',
        body: 'Contarei na pr√≥xima.',
      },
      {
        type: 'default',
        title: ':(',
        body: 'Mas, como b√¥nus por voc√™ ter chegado at√© aqui, vou te ensinar um m√©todo extra.',
      },
      {
        type: 'default',
        title: 'Qual?',
        body: 'O m√©todo "inverter()".',
      },
      {
        type: 'list',
        title: 'inverter()',
        body: 'O m√©todo "inverter()" √© usado para inverter a ordem dos elementos de um vetor. Ele n√£o cria um novo vetor, mas sim modifica o vetor original.',
      },
      {
        type: 'list',
        body: 'E estou falando de inverter mesmo, ou seja, ao aplicar o m√©todo "inverter()" em um vetor, o √∫ltimo elemento passa a ser o primeiro, o pen√∫ltimo passa a ser o segundo, e assim por diante.',
      },
      {
        type: 'code',
        body: `var alimentos = [
          "fruta",
          "ovo de Icelope", 
          "am√™ndua"
        
]

alimentos.inverter();

escreva(alimentos)
// Resultado: am√™ndua, ovo de Icelope, fruta`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'Ah...',
        body: 'Pode n√£o parecer muito √∫til, mas vai que n√©.',
      },
    ],
  },
  {
    starId: 22,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Ok, mas ainda temos um problema.',
      },
      {
        type: 'default',
        title: null,
        body: 'Eu disse que o m√©todo "fatiar()" n√£o altera o vetor original, mas sim gera um novo.',
      },
      {
        type: 'default',
        title: 'E agora?',
        body: 'A nossa sorte que √© existe um m√©todo que pode fazer a mesma coisa que o "fatiar()" faz, mas alterando o vetor original.',
      },
      {
        type: 'default',
        title: 'Fala logo qual!',
        body: 'O m√©todo "encaixar()".',
      },
      {
        type: 'list',
        title: 'Encaixar()',
        body: 'O m√©todo "encaixar()" pode ser utilizado de v√°rias maneiras, mas a principal √© remover elementos de um vetor.',
      },
      {
        type: 'list',
        body: 'Nos par√™nteses do "encaixar()" √© necess√°rio colocar 2 n√∫meros obrigat√≥rios.\nO primeiro indica a partir de qual √≠ndice/posi√ß√£o do vetor devem ser removidos os elementos.\n O segundo indica quantos elementos devem ser removidos.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];
  
// encaixar(0, 3) = Come√ßar a remo√ß√£o a partir da posi√ß√£o 0 e remover 3 elementos
itens.encaixar(0, 3);
    
escreva(itens);
escreva('Temos agora ' + itens.tamanho());
// Execute e veja o resultado
    `,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Percebeu? O vetor itens foi modificado, restando apenas 5 itens.',
      },
      {
        type: 'default',
        title: 'Mas e quanto aos alimentos?',
        body: '√â m√©todo "encaixar()" retorna os elementos removidos por ele. Ent√£o, para pegar os alimentos removidos pelo "encaixar()" ser√° preciso criar uma nova var√≠avel.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];
    
// encaixar(0, 3) = Come√ßar a remo√ß√£o a partir da posi√ß√£o 0 e remover 3 elementos
var alimentos = itens.encaixar(0, 3);
escreva(alimentos);
// Resultado: fruta, ovo de Icelope, am√™ndua`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora sim! Conseguimos remover os alimentos do vetor principal e colocamos em um vetor separado.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora vamos fazer com os demais itens.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];

var alimentos = itens.encaixar(0, 3);
var minerais = itens.encaixar(3, 5);
var ferramentas = itens.encaixar(5, 6);
var exoticos = itens.encaixar(6);

escreva(alimentos);
escreva(minerais);
escreva(ferramentas);
escreva(exoticos);

// Aperte em executar para ver o resultado catastr√≥fico`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Pera a√≠, mas agora deu tudo errado!',
        body: 'Sim. Acontece que toda vez que o "encaixar()" √© executado, os itens s√£o removidos do vetor original, correto? Ent√£o na pr√≥xima execu√ß√£o, o vetor itens ter√° menos elementos do que o esperado.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso √© para mostrar que o "encaixar()" n√£o fuciona da mesma maneira que o "fatiar()".',
      },
      {
        type: 'alert',
        body: 'Lembre-se: A diferen√ßa entre os dois √© que o segundo n√∫mero do "encaixar()" indica a QUANTIDADE de elementos que ser√£o removidos, enquanto o do "fatiar()" indica o ponto de parada da fatia. E apenas o "encaixar()" consegue alterar o vetor original.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora vamos fazer do jeito certo. Nesse caso, basta come√ßarmos sempre da posi√ß√£o zero, j√° que estamos sempre removendo os primeiros itens do vetor itens.',
      },
      {
        type: 'code',
        body: `var itens = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado"
];

var alimentos = itens.encaixar(0, 3);
var minerais = itens.encaixar(0, 2);
var ferramentas = itens.encaixar(0, 1);
var exoticos = itens.encaixar(0);

escreva(alimentos);
escreva(minerais);
escreva(ferramentas);
escreva(exoticos);

escreva(itens)

// Aperte em executar para ver o resultado m√°gico`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora sim!',
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que no √∫ltimo foi colocado apenas um n√∫mero. Isso quer dizer que se voc√™ passar apenas um n√∫mero no "encaixar()" ele vai remover todo os itens do vetor a partir desse √≠ndice.',
      },
      {
        type: 'default',
        title: null,
        body: 'Veja tamb√©m que agora o vetor itens est√° vazio, ent√£o nos livramos completamente dele. Agora sim podemos continuar nossa explora√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: '...',
      },
      {
        type: 'default',
        title: null,
        body: 'J√° andamos faz algum tempo, mas ainda n√£o encontramos mais nada interessante.',
      },
      {
        type: 'default',
        title: null,
        body: 'Pera a√≠! Acabamos de receber uma mensagem no nosso radar:',
      },
      {
        type: 'code',
        body: `var mensagem = ["Saia", 1, "planeta", 0, 2];
var textos = ["√©", "da√≠", "perigoso"];`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Parece que compramos um radar bem vagabundo. A messagem veio toda em peda√ßos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para nossa sorte acabamos de conhecer o m√©todo "encaixar()".',
      },
      {
        type: 'default',
        title: 'E da√≠?',
        body: 'Lembra que eu disse que o "encaixar()" pode ser usado de v√°rias maneiras?',
      },
      {
        type: 'default',
        title: null,
        body: 'Voc√™ deve ter se perguntado, por que "encaixar" tem esse nome? √â porque com ele podemos remontar qualquer vetor, removendo ou adicionando itens.',
      },
      {
        type: 'list',
        body: 'Sim, podemos adicionar itens usando "encaixar()". Para isso, deve-se passar um terceiro valor, mas n√£o necessariamente um n√∫mero, pode ser um texto, um l√≥gico ou ainda outro vetor.',
      },
      {
        type: 'default',
        title: null,
        body: '√â poss√≠vel ver que no vetor mensagem, h√° n√∫meros indicando onde os itens do vetor textos devem ser colocados para completar a mensagem.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o faremos isso: primeiro encaixaremos a palavra "da√≠" onde est√° o √≠ndice 1',
      },
      {
        type: 'code',
        body: `var mensagem = ["Saia", 1, "planeta", 3];

var textos = ["perigoso", "da√≠"];

// encaixar(1, 1, "da√≠") = A partir do √≠ndice 1 do vetor mensagem remover um elemento e adicionar o texto "da√≠"
mensagem.encaixar(1, 1, "da√≠");

escreva(mensagem);
// Resultado: Saia, da√≠, planeta, 3`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Se o n√∫mero do meio fosse zero, nenhum elemento seria removido, ou seja, o resultado seria:\nSaia, 1, da√≠, planeta, 3.',
      },
      {
        type: 'alert',
        body: 'Mas ao colocar 1, o m√©todo "encaixar()" torna-se uma boa maneira tamb√©m de substituir um valor de um vetor por outro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora colocaremos a outra palavra.',
      },
      {
        type: 'code',
        body: `var mensagem = ["Saia", "da√≠", "planeta", 3];

var textos = ["perigoso", "da√≠"];

// encaixar(3, 1, "perigoso") = A partir do √≠ndice 3 remover um elemento e colocar o texto "perigoso"
mensagem.encaixar(3, 1, "perigoso");

escreva(mensagem);
// Resultado: Saia, da√≠, planeta, perigoso`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora temos uma resultado:\nSaia, da√≠, planeta, perigoso',
      },
      {
        type: 'default',
        title: null,
        body: 'Ok... Ent√£o esse planeta deve ser mais perigoso do que eu pensava. Mas agora eu pergunto: quem ser√° que mandou essa mensagem?',
      },
    ],
  },
  {
    starId: 23,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Acabamos de receber mais de uma mensagem no nosso radar:',
      },
      {
        type: 'code',
        body: `var mensagem = ["Preciso", "de", "ajuda"];`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'J√° que todas as mensagens est√£o sendo recebidas como vetor, podemos juntar os itens para formar um texto.',
      },
      {
        type: 'list',
        title: 'juntar()',
        body: 'O m√©todo juntar() permite unir os elementos de um vetor, transformando em um √∫nico texto.',
      },
      {
        type: 'list',
        title: null,
        body: 'S√≥ que para usar o "juntar()", √© preciso passar um elemento de texto nos par√™nteses para que ele use esse texto como separador para cada elemento.',
      },
      {
        type: 'list',
        title: null,
        body: 'Al√©m disso, o m√©todo juntar() n√£o altera o vetor original, ent√£o ser√° preciso colocar o texto gerado em uma nova vari√°vel.',
      },
      {
        type: 'code',
        body: `var mensagem = ["Preciso", "de", "ajuda"];
                
var mensagemCerta = mensagem.juntar("");

escreva(mensagemCerta);
// Resultado: Precisodeajuda
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'N√£o √© exatamente isso que queremos. Isso aconteceu porque colocamos o separador como um texto vazio.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas queremos que as palavras estejam separadas por um espa√ßo, correto?',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, por exemplo, se colocarmos um tra√ßo (-) no "juntar()":',
      },
      {
        type: 'code',
        body: `var mensagem = ["Preciso", "de", "ajuda"];
                
var mensagemCerta = mensagem.juntar("-");

escreva(mensagemCerta);
// Resultado: Preciso-de-ajuda
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Cada palavra ser√° inserido um tra√ßo separando elas.',
      },
      {
        type: 'default',
        title: null,
        body: 'Logo, para separar cada palavra adequadamente, usando espa√ßo, basta colocar um texto que seja um espa√ßo no "juntar()".',
      },
      {
        type: 'code',
        body: `var mensagem = ["Preciso", "de", "ajuda"];
                
var mensagemCerta = mensagem.juntar(" ");

escreva(mensagemCerta);
// Resultado: Preciso de ajuda
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Assim fica bem melhor para ler as mensagens.',
      },
      {
        type: 'default',
        title: null,
        body: 'Algum desconhecido est√° querendo que saiamos desse planeta para ajud√°-lo. Ent√£o, mande uma mensagem para o foguete vir nos pegar.',
      },
      {
        type: 'default',
        title: 'Ok',
        body: 'S√≥ que, como radar est√° tranformando as mensagens recebidas em vetores, ent√£o √© de se presumir que ele tamb√©m transformar√° as que ser√£o enviadas quando chegar ao foguete.',
      },
      {
        type: 'default',
        title: 'Vish...',
        body: 'Ent√£o podemos tentar engenharia reversa. Talvez se mandarmos a mensagem j√° como vetor, ele se transformar√° em texto quando chegar ao foguete.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para nossa sorte (de novo), existe um m√©todo que faz literalmente isso: o m√©todo "dividir()".',
      },
      {
        type: 'list',
        title: 'Dividir()',
        body: 'O m√©todo "dividir()" divide um texto em subtextos, transformando-o em um vetor.',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha j√° aqui";

var mensagemCerta = mensagem.dividir();       

escreva(mensagemCerta);
// Resultado: Venha j√° aqui
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas n√£o aconteceu nada!',
        body: 'Isso porque √© tamb√©m √© preciso passar nos par√™nteses do "juntar()" um texto que servir√° como separador da divis√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, se passarmos a letra "a" como separador:',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha j√° aqui";

var mensagemCerta = mensagem.dividir("a");       

escreva(mensagemCerta);
// Resultado: [ Venh, j√°, qui ]
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Veja que toda letra "a" foi removida do texto, e os textos que estavam envolta de cada letra "a" se tranformaram em um elemento de um vetor.',
      },
      {
        type: 'alert',
        body: 'O caractere "√†" n√£o foi removido por causa do acento, ou seja, "√†" √© diferente de "a", ent√£o cuidado com isso.',
      },
      {
        type: 'default',
        title: 'Mas como separar as palavras da forma correta?',
        body: 'Para isso, definiremos o separador como um espa√ßo vazio (" ");',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha j√° aqui";

var mensagemCerta = mensagem.dividir(" ");       

escreva(mensagemCerta);
// Resultado: [ Venha, j√°, aqui ]
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora temos um vetor decente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas, para chamar o foguete, podemos encurtar a mensagem, mandando apenas "Venha".',
      },
      {
        type: 'default',
        title: null,
        body: 'Para facilitar podemos dizer para o "dividir()" que apenas gere um vetor com apenas 1 elemento.',
      },
      {
        type: 'default',
        title: 'Mas, como fazer isso?',
        body: 'Atrav√©s do segundo valor passado nos par√™nteses do "dividir()", que difine quantos itens o vetor gerado deve conter.',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha j√° aqui";

// Nesse caso, vetor gerado por dividir() ter√° apenas 1 palavra
var mensagemCerta = mensagem.dividir(" ", 1);       

escreva(mensagemCerta);
// Resultado: Venha
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora sim! S√≥ resta esperar que o foguete venha, caso ele tenha recebido a mensagem, √© claro.',
      },
    ],
  },
  {
    starId: 24,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Estamos esperando a um temp√£o, e nada do foguete.',
      },
      {
        type: 'default',
        title: null,
        body: 'Talvez ter usado engenharia reversa n√£o tenha dado certo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Acho que o radar s√≥ transforma mensagens recebidas em vetores.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, podemos tranquilamente enviar mensagens em texto mesmo.',
      },
      {
        type: 'code',
        body: `var mensagem = "   Venha aqui, por f4vor   ";

escreva(mensagem)        `,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Espera a√≠, o texto da mensagem tem espa√ßos em branco.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mais um caso onde podemos solucionar usando um m√©todo de vetor.',
      },
      {
        type: 'default',
        title: 'Vetor? Mas estamos usando texto',
        body: 'Isso pode explodir sua cabe√ßa, mas textos tamb√©m podem ser vetores.',
      },
      {
        type: 'default',
        title: 'Que??',
        body: 'Textos em vari√°veis podem ser tratados como vetores, veja s√≥:',
      },
      {
        type: 'code',
        body: `var texto = "abc";

escreva(texto[0]);
// Resultado: a
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title:
          'Ent√£o, quer dizer que podemos usar os m√©todos de vetor que vimos anteriormente em textos?',
        body: 'A resposta √© sim! Obviamente nem todos, como o "remover()", "adicionar()", "ordenar()", nem mesmo o "inverter()"',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas podemos usar alguns como "tamanho()", "inclui()" e "concatenar()"',
      },
      {
        type: 'code',
        body: `var texto = "abc";

escreva(texto.tamanho());
escreva(texto.inclui("b"));
escreva(texto.concatenar("d"));
/* Resultado: 3
              verdadeiro
              abcd
*/
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, existem m√©todos pr√≥pios para textos.',
      },
      {
        type: 'default',
        title: 'S√©rio?',
        body: 'Por exemplo, nesse caso para retirar os espa√ßos em branco da mensagem, podemos utilizar o m√©todo "aparar()".',
      },
      {
        type: 'list',
        title: 'aparar()',
        body: 'O m√©todo "aparar()" √© usado para remover os espa√ßos em branco do in√≠cio e do final de um texto, ou seja aparar as pontas do texto.',
      },
      {
        type: 'code',
        body: `var mensagem = "   Venha aqui, por f4vor   ";
        
var novaMensagem = mensagem.aparar();

escreva(novaMensagem);
// Resultado: Venha aqui, por f4vor`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora sim!',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas espera a√≠ de novo, h√° um n√∫mero quatro na palavra "favor".',
      },
      {
        type: 'default',
        title: null,
        body: '√â melhor substituir o 4 pela letra "a".',
      },
      {
        type: 'list',
        title: 'substituir()',
        body: 'O m√©todo de texto "substituir()" procura um subtexto dentro de um texto e o substitui por outro. Assim, um novo texto √© gerado.',
      },
      {
        type: 'list',
        title: 'substituir()',
        body: 'Para us√°-lo √© simples: √© preciso passar dois valores, o primeiro indica qual subtexto deve ser procurado e substituido, enquanto o segundo √© o subtexto que deve ser colocado como substituto.',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha aqui, por f4vor";
        
var novaMensagem = mensagem.substituir("4", "a");

escreva(novaMensagem);
// Resultado: Venha aqui, por f4vor`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Aviso: o m√©todo "substituir()" s√≥ substitui o primeiro subtexto que ele encontrar. Isso quer dizer que se a mensagem tivesse mais n√∫meros quatro, apenas o primeiro 4 seria substituido.',
      },
      {
        type: 'code',
        body: `var mensagem = "Venh4 4qui, por f4vor";
        
var novaMensagem = mensagem.substituir("4", "a");

escreva(novaMensagem);
// Resultado: Venha 4qui, por f4vor`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora est√° bem melhor, mas podemos melhorar ainda mais.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Tirando esse texto "aqui, por favor". Eu disse antes que apenas a palavra "Venha" basta, assim poupamos mem√≥ria desse radar mequetrefe.',
      },
      {
        type: 'default',
        title: null,
        body: 'Se cada caractere da mensagem fosse um item de um vetor, poder√≠amos usar o m√©todo "fatiar()".',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas j√° que estamos usando texto, podemos usar o m√©todo subtexto() que literalmente consegue fazer o que o "fatiar()" faz, s√≥ que para textos.',
      },
      {
        type: 'list',
        title: 'subtexto()',
        body: 'O m√©todo "subtexto()" permite extrair uma parte de um texto a partir de um √≠ndice inicial at√© um √≠ndice final.',
      },
      {
        type: 'default',
        title: null,
        body: 'Cada √≠ndice de um texto corresponde a um caractere. Ent√£o se quisermos pegar s√≥ a palavra "Venha" da mensagem:',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha aqui, por favor";
         
// subtexto(0, 5) = extrair do primeiro caractere at√© o quinto caractere
var novaMensagem = mensagem.subtexto(0, 5);

escreva(novaMensagem);
// Resultado: Venha`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Essa parte dos √≠ndices do "subtexto()" √© bem igual ao "fatiar()" mesmo, ou seja, ser√° extraido todos os caracteres nas posi√ß√µes que est√£o entre o primeiro e segundo ind√≠ces definidos entre par√™nteses, mas n√£o contando o caractere que corresponde ao √≠ndice final.',
      },
      {
        type: 'default',
        title: null,
        body: 'Veja eu extraindo a palavra "aqui"',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha aqui, por favor";
         
// subtexto(6, 10) = come√ßar a extrair do quinto caractere at√© o d√©cimo caractere
var aqui = mensagem.subtexto(6, 10);

escreva(aqui);
// Resultado: aqui`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Se o √≠ndice final n√£o for passado, o subtexto come√ßar√° do ind√≠ce inicial e terminar√° at√© o √∫ltimo √≠ndice do vetor, assim como acontece no "fatiar()"',
      },
      {
        type: 'code',
        body: `var mensagem = "Venha aqui, por favor";
         
// subtexto(12) = come√ßar a extrair do d√©cimo segundo caractere at√© o √∫ltimo caractere
var subtexto = mensagem.subtexto(12);

escreva(subtexto);
// Resultado: por favor`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'E sim, o "subtexto()" n√£o altera o texto original.',
      },
      {
        type: 'default',
        title: null,
        body: 'Opa! Acabamos de receber uma mensagem do foguete.',
      },
      {
        type: 'code',
        body: `var mensagem = ["N√£o", "quero"];
escreva(mensagem.juntar(" "));
// Resultado: N√£o quero`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'O foguete disse que n√£o quer vir aqui?',
        body: 'Pode n√£o parecer, mas o foguete √© bem espertinho.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o √© melhor mandar uma mensagem mais educada mesmo.',
      },
      {
        type: 'code',
        body: `var mensagem = "Por favor, venha at√© aqui"`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Recebemos outra mensagem dele.',
      },
      {
        type: 'code',
        body: `var mensagem = ["J√°", "falei", "que", "n√£o", "quero"];
escreva(mensagem.juntar(" "));
// Resultado: J√° falei que n√£o quero`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: '√â, parece que esse foguete est√° bem afoito.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mande assim: Se n√£o vier agora, irei te mandar para o ferro-velho!',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas antes, tranforme o texto em caixa alta, isto √©, coloque tudo em letra MAI√öSCULA para ele entender bem.',
      },
      {
        type: 'list',
        title: 'maiusculo()',
        body: 'o m√©todo maiusculo() √© bem simples: gera um texto com carecteres em mai√∫sculo a partir do texto original.',
      },
      {
        type: 'code',
        body: `var mensagem = "Se n√£o vier agora, irei te mandar para o ferro-velho!";

var novaMensagem = mensagem.maiusculo()

escreva(novaMensagem);
// Resultado: SE N√ÉO VIER AGORA, IREI TE MANDAR PARA O FERRO-VELHO!`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Antes que pergunte, tamb√©m existe o m√©todo "minusculo()".',
      },
      {
        type: 'code',
        body: `var texto = "TUDO EM MAI√öSCULO";

escreva(texto.minusculo());
// Resultado: tudo em mai√∫sculo`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Acabamos de receber mais uma mensagem do foguete.',
      },
      {
        type: 'code',
        body: `var mensagem = [
            "n√£o", 
            "vou", 
            "porque", 
            "n√£o", 
            "fa√ßo", 
            "ideia", 
            "onde",
            "voc√™",
            "est√°"
];

escreva(mensagem.juntar(" "));
// Resultado: n√£o vou porque n√£o fa√ßo ideia onde voc√™ est√°`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: '√â, agora o foguete tem um ponto.',
      },
    ],
  },
  {
    starId: 25,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Temos um vetor com v√°rias coordenadas diferentes:',
      },
      {
        type: 'code',
        body: `var coordenadas = [
            "x:12;y:6", 
            "x:70;y:32", 
            "x:25;y:18", 
            "x:8;y:40", 
];

escreva(coordenadas);`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'O nosso trabalho √© achar a coordenada correta dentro desse vetor, que no caso √© "x:25;y:18", e coloc√°-lo em uma mensagem para enviar ao foguete.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para isso, podemos usar o poder dos la√ßos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Eu disse antes que a forma mais comum para trabalhar com vetores √© usando la√ßos, ent√£o vamos aprender mais sobre isso.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer a primeira tarefa, vamos come√ßar por partes.',
      },
      {
        type: 'default',
        title: null,
        body: 'Primeiramente montamos um "para", com a vari√°vel de controle (i) iniciando com 0, j√° que os √≠ndices de vetor come√ßam do zero e n√£o do um.',
      },
      {
        type: 'code',
        body: `
para (var i = 0;) {

}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Depois colocamos a condi√ß√£o do la√ßo como i menor que o tamanho do vetor coordenadas, ou seja, indicamos que o "para" execute algo at√© que a vari√°vel i seja igual ou maior que a quantidade de coordenadas.',
      },
      {
        type: 'code',
        body: `
para (var i = 0; i < coordenadas.tamanho();) {

}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Por fim, incrementamos a vari√°vel i a cada nova itera√ß√£o.',
      },
      {
        type: 'code',
        body: `
para (var i = 0; i < coordenadas.tamanho(); i++) {

}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora no bloco do "para" colocamos a vari√°vel i como √≠ndice do vetor coordenadas.',
      },
      {
        type: 'code',
        body: `var coordenadas = [
            "x:12;y:6", 
            "x:70;y:32", 
            "x:25;y:18", 
            "x:8;y:40", 
];

para (var i = 0; i < coordenadas.tamanho(); i++) {
    coordenadas[i];
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Se escrevermos "coordenadas[i]" em cada itera√ß√£o:',
      },
      {
        type: 'code',
        body: `var coordenadas = [
            "x:12;y:6", 
            "x:70;y:32", 
            "x:25;y:18", 
            "x:8;y:40", 
];

para (var i = 0; i < coordenadas.tamanho(); i++) {
    escreva(coordenadas[i]);
}

/* Resultado:  x:12;y:6, 
               x:70;y:32, 
               x:25;y:18, 
               x:8;y:40,
*/ `,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Percebeu a m√°gica? A cada itera√ß√£o o i √© um n√∫mero diferente. Dessa forma podemos pegar cada valor do vetor usando essa vari√°vel como √≠ndice.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora podemos verificar se o valor atual do vetor √© igual ao que buscamos.',
      },
      {
        type: 'code',
        body: `var coordenadas = [
            "x:12;y:6", 
            "x:70;y:32", 
            "x:25;y:18", 
            "x:8;y:40", 
];

para (var i = 0; i < coordenadas.tamanho(); i++) {
    se (coordenadas[i] == "x:25;y:18") {
        escreva("Achei a coordenada certa: "+coordenadas[i]);
    }
}

// Resultado: Achei a coordenada certa: x:25;y:18`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'A√≠ sim! Agora, s√≥ colocar a coordenada certa em uma vari√°vel a parte e concatenar com a mensagem:',
      },
      {
        type: 'code',
        body: `var coordenadas = [
            "x:12;y:6", 
            "x:70;y:32", 
            "x:25;y:18", 
            "x:8;y:40", 
];

var coordenadaCerta = "";
para (var i = 0; i < coordenadas.tamanho(); i++) {
    se (coordenadas[i] == "x:25;y:18") {
        coordenadaCerta = coordenadas[i];
    }
}

var mensagem = "Essas s√£o minhas coordenadas: \${coordenadaCerta}";
escreva(mensagem);
// Resultado: Essas s√£o minhas coordenadas: x:25;y:18`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'A vari√°vel coordenadaCerta foi colocada para fora do la√ßo porque sen√£o ela seria reiniciada toda vez a cada itera√ß√£o do la√ßo. E tamb√©m porque ela n√£o poderia ser acessada de fora do escopo do "para" ou do "se", lembra?',
      },
      {
        type: 'default',
        title: null,
        body: 'Ok, mas podemos treinar mais essa quest√£o de usar la√ßos com vetores.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, e se quis√©ssemos adicionar todos os alimentos que adiquirimos na explora√ß√£o na nossa mochila?',
      },
      {
        type: 'code',
        body: `var alimentos = ["fruta", "ovo de Icelope", "am√™ndua"];

var mochila = [];`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Ser√° um trabalho bem mais f√°cil usando la√ßo.',
      },
      {
        type: 'code',
        body: `var alimentos = ["fruta", "ovo de Icelope", "am√™ndua"];

var mochila = [];
para (var i = 0; i < alimentos.tamanho(); i++) {
    var alimentoAtual = alimentos[i];
    mochila.adicionar(alimentoAtual);
}

escreva(mochila);
// Resultado: fruta, ovo de Icelope, am√™ndua`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Mas podemos n√£o usar apenas o "para", mas qualquer outro tipo de la√ßo que j√° vimos, como o "enquanto".',
      },
      {
        type: 'code',
        body: `var minerais = ["cristal", "pirita"];

var i = 0;
var mochila = [];

enquanto (i < minerais.tamanho()) {
    var mineralAtual = minerais[i];
    mochila.adicionar(mineralAtual);

    i++;
}

escreva(mochila);
// Resultado: cristal, pirita`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'E o "fazer-enquanto".',
      },
      {
        type: 'code',
        body: `var exoticos = ["f√≥ssil de urso an√£o", "meteorito congelado"];
var mochila = [];
var i = 0;

fazer {
    var exoticoAtual = exoticos[i];
    mochila.adicionar(exoticoAtual);

    i++;
} enquanto (i < exoticos.tamanho())

escreva(mochila);
// Resultado: f√≥ssil de urso an√£o, meteorito congelado`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora s√≥ resta colocar o vetor que tem as quantidades de cada item.',
      },
      {
        type: 'code',
        body: `var mochila = [
            "fruta",
            "ovo de Icelope", 
            "am√™ndua",
            "cristal", 
            "pirita", 
            "bast√£o laser quebrado", 
            "f√≥ssil de urso an√£o",
            "meteorito congelado"
];

var qtdItens = [9, 4, 20, 37, 12, 1, 2, 1];

mochila.adicionar(qtdItens);
escreva(mochila);`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas a√≠ n√£o estar√≠amos colocando um vetor dentro de outro?',
        body: 'Sim! √© poss√≠vel colocar vetores dentro de um vetor sem problema algum. Na verdade √© poss√≠vel colocar qualquer tipo de dado dentro um vetor, seja texto, n√∫mero ou l√≥gico.',
      },
      {
        type: 'default',
        title: null,
        body: 'Espera, tem algo vindo em nossa dire√ß√£o!',
      },
      {
        type: 'default',
        title: '√â um p√°ssaro gigante?',
        body: 'Aquilo √© um p√°ssaro Icelope!!',
      },
      {
        type: 'default',
        title: null,
        body: 'N√≥s t√≠nhamos pegado 4 quatro ovos de Icelope durante a explora√ß√£o, lembra?',
      },
      {
        type: 'default',
        title: null,
        body: 'Provavelmente essa seja a m√£e deles.',
      },
      {
        type: 'default',
        title: null,
        body: 'R√°pido, pegue aqueles ovos de volta da mochila.',
      },
      {
        type: 'code',
        body: `var mochila = [
            "fruta",
            "ovo de Icelope", 
            "am√™ndua",
            "cristal", 
            "pirita", 
            "bast√£o laser quebrado", 
            "f√≥ssil de urso an√£o",
            "meteorito congelado",
            [9, 4, 20, 37, 12, 1, 2, 1]
];

para cada item em mochila {
    se (item == "ovo de Icelope") {
        escreva(item);
    }
}

// Resultado: ovo de Icelope`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas que esp√©cie de para √© esse?',
        body: 'Apresento-lhe o "para-cada"',
      },
      {
        type: 'list',
        title: 'Para cada',
        body: 'O la√ßo "para-cada" faz a mesma coisa que um simples "para" s√≥ que com um c√≥digo mais bonito.',
      },
      {
        type: 'list',
        body: 'Ele √© especialmente √∫til para fazer la√ßo com vetores.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4]
            
para cada numero em numeros {
    escreva(numero);
}

/* Resultado: 1
              2
              3
              4
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Neste exemplo, numeros √© o vetor que est√° sendo usado no la√ßo, e numero √© a vari√°vel que assume um valor de numeros a cada itera√ß√£o do la√ßo.',
      },
      {
        type: 'alert',
        body: 'E detalhe, a vari√°vel que vai ao lado de "para cada" n√£o precisa ser declarada antes e voc√™ pode dar o nome que voc√™ quiser.',
      },
      {
        type: 'default',
        title: null,
        body: 'Veja mais alguns exemplos de "para-cada" para entender bem.',
      },
      {
        type: 'code',
        body: `var valores = [falso, verdadeiro, falso];
          
para cada valor em valores {
  escreva(valor);
}

/* Resultado: falso
              verdadeiro
              falso
*/`,
        isRunnable: true,
      },
      {
        type: 'code',
        body: `var palavras = ['Petros', 'Kaue', '0Thigs'];
          
para cada palavra em palavras {
  escreva(palavra);
}

/* Resultado: Petros
              Kaue
              0Thigs
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Mas voltando para o urgente: temos que devolver os ovos para a m√£e deles.',
      },
      {
        type: 'default',
        title: null,
        body: 'J√° temos o item ovo, s√≥ precisamos multiplicar pelo quantidade que pegamos.',
      },
      {
        type: 'code',
        body: `var mochila = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado",
        [9, 4, 20, 37, 12, 1, 2, 1]
];

var ovos = [];
para cada item em mochila {
    se (item == "ovo de Icelope") {
        var qtdOvos = mochila[-1][1];
        escreva('Quantidade de ovos: '+qtdOvos)
    }
}

// Resultado: 'Quantidade de ovos: 4`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Um vetor com dois √≠ndices?',
        body: 'Lembra que agora o √∫ltimo item da mochila √© um vetor? Ent√£o, podemos pegar um elemento de um vetor dentro de outro atrav√©s de √≠ndice tamb√©m.',
      },
      {
        type: 'default',
        title: null,
        body: 'escrever mochila[-1][1] quer dizer:\n[-1] = Pegar o √∫ltimo item de mochila, que no caso √© um vetor.\n[1] = Pegar o segundo valor desse vetor interno, que no caso √© quatro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que temos o n√∫mero 4, multiplicamos com o item "ovo de Icelope"',
      },
      {
        type: 'code',
        body: `var mochila = [
        "fruta",
        "ovo de Icelope", 
        "am√™ndua",
        "cristal", 
        "pirita", 
        "bast√£o laser quebrado", 
        "f√≥ssil de urso an√£o",
        "meteorito congelado",
        [9, 4, 20, 37, 12, 1, 2, 1]
];

var ovos = [];
para cada item em mochila {
    se (item == "ovo de Icelope") {
        var qtdOvos = mochila[-1][1];
        para (var i = 0; i < qtdOvos; i++) {
            ovos.adicionar(item);
        }
    }
}

escreva(ovos);
// Resultado: ovo de Icelope, ovo de Icelope, ovo de Icelope, ovo de Icelope`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'N√£o disse que √© poss√≠vel usar la√ßo dentro de la√ßo? Agora sim estamos come√ßando a escrever c√≥digos mais complexos.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora que a m√£e p√°ssaro est√° com seus ovos, resta apenas esperar o foguete chegar.',
      },
    ],
  },
  {
    starId: 26,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Aqui estamos mais uma vez no espa√ßo.',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que agora temos que procurar quem mandou aquela mensagem de ajuda.',
      },
      {
        type: 'default',
        title: null,
        body: 'E agora com o radar do pr√≥prio foguete n√£o precimos mais daquele que compramos.',
      },
      {
        type: 'default',
        title: null,
        body: 'E por falar em mensagem, acabamos de receber mais uma.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para visualizar a mensagem √© necess√°rio fazer alguns passos.',
      },
      {
        type: 'default',
        title: null,
        body: '1. ligar todos sensores do radar;\n2. Aumentar a resolu√ß√£o em 20;\nVerificar se a mensagem cont√©m script malicioso;\n3. Verificar se a tela est√° acesa;\n4. Escrever a mensagem.',
      },
      {
        type: 'code',
        body: `var mensagem = 'Por favor, me ajundem!'
        
var sensores = [falso, falso, falso];
var resolucao = 10;
var telaAcesa = verdadeiro;

para (var i = 0; i < sensores.tamanho(); i++) {
    sensores[i] = verdadeiro;
}

resolucao += 20;

se (!mensagem.inclui('script') e telaAcesa) {
    escreva(mensagem);
}
// Resultado: Por favor, me ajundem!`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Ok, j√° entendemos que essa pessoa precisa da nossa ajuda, mas porque ela n√£o fala onde ela est√°?',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ resta perguntar isso, mande uma mensagem escrito: "Quais s√£o suas coordenadas?"',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que para mandar uma mensagem com o radar √© preciso seguir os mesmos passos de receber uma mensagem, por motivos de seguran√ßa, √© claro.',
      },
      {
        type: 'code',
        body: `var mensagem = 'Quais s√£o suas coordenadas?'
        
var sensores = [falso, falso, falso];
var resolucao = 10;
var telaAcesa = verdadeiro;

para (var i = 0; i < sensores.tamanho(); i++) {
    sensores[i] = verdadeiro;
}

resolucao += 20;

se (!mensagem.inclui('script') e telaAcesa) {
    escreva(mensagem);
}
// Resultado: Quais s√£o suas coordenadas?`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Isso, acabamos de receber uma resposta.',
      },
      {
        type: 'code',
        body: `var mensagem = 'Mas por que voc√™ quer saber?'
        
var sensores = [falso, falso, falso];
var resolucao = 10;
var telaAcesa = verdadeiro;

para (var i = 0; i < sensores.tamanho(); i++) {
    sensores[i] = verdadeiro;
}

resolucao += 20;

se (!mensagem.inclui('script') e telaAcesa) {
    escreva(mensagem);
}
// Resultado: Mas por que voc√™ quer saber?`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'T√°, responda que √© para saber onde ela est√°.',
      },
      {
        type: 'code',
        body: `var mensagem = '√â para saber onde voc√™ est√°';
        
var sensores = [falso, falso, falso];
var resolucao = 10;
var telaAcesa = verdadeiro;

para (var i = 0;i < sensores.tamanho(); i++) {
    sensores[i] = verdadeiro;
}

resolucao += 20;

se (!mensagem.inclui('script') e telaAcesa) {
    escreva(mensagem);
}
// Resultado: √â para saber onde voc√™ est√°

var mensagem = 'Tem certeza?'
        
var sensores = [falso, falso, falso];
var resolucao = 10;
var telaAcesa = verdadeiro;

para (var i = 0;i < sensores.tamanho(); i++) {
    sensores[i] = verdadeiro;
}

resolucao += 20;

se (!mensagem.inclui('script') e telaAcesa) {
    escreva(mensagem);
}
// Resultado: Tem certeza?`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Ok, isso j√° est√° ficando chato.',
      },
      {
        type: 'default',
        title: null,
        body: 'Percebeu que estamos repetindo um monte de c√≥digo?',
      },
      {
        type: 'default',
        title: 'Sim...',
        body: 'Ent√£o, essa √© uma boa ocasi√ß√£o para explicar um conceito important√≠ssemo na programa√ß√£o.',
      },
      {
        type: 'default',
        title: 'Fun√ß√µes?',
        body: 'Isso... √â, o nome desse m√≥dulo j√° entregou tudo.',
      },
      {
        type: 'default',
        title: 'Fun√ß√µes?',
        body: 'Mas como prometido vou explicar o que s√£o fun√ß√µes üéâ.',
      },
      {
        type: 'list',
        title: 'Fun√ß√µes',
        body: 'Fun√ß√µes nada mais s√£o do que blocos de c√≥digo que executam uma determinada tarefa e que podem ser reutilizados em diferentes partes de um programa.',
      },
      {
        type: 'list',
        body: 'As fun√ß√µes s√£o escrita utilizando a palavra-chave "funcao" (sem ~)',
      },
      {
        type: 'code',
        body: `funcao`,
        isRunnable: false,
      },
      {
        type: 'list',
        body: 'seguida pelo nome da fun√ß√£o e um conjunto de par√™nteses.',
      },
      {
        type: 'code',
        body: `funcao usarRadar()`,
        isRunnable: false,
      },
      {
        type: 'alert',
        body: 'O nome da fun√ß√£o pode ser qualquer coisa, mas √© ideal que seja algo relacionado ao o que ela faz, n√©?',
      },
      {
        type: 'list',
        body: 'Por fim, √© s√≥ colocar todo o bloco de c√≥digo que a func√£o executar√° entre chaves.',
      },
      {
        type: 'code',
        body: `funcao usarRadar() {
    var mensagem = 'Mande suas coordenadas, por favor';

    var sensores = [falso, falso, falso];
    var resolucao = 10;
    var telaAcesa = verdadeiro;
    
    para (var i = 0;i < sensores.tamanho(); i++) {
        sensores[i] = verdadeiro;
    }
    
    resolucao += 20;
    
    se (!mensagem.inclui('script') e telaAcesa) {
        escreva(mensagem);
    }
}`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas n√£o aconteceu absolutamente nada!',
        body: 'Isso porque n√£o falamos para a fun√ß√£o "usarRadar()" executar o seu bloco de c√≥digo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para fazer isso, devemos fazer o que chamamos de "chamar uma fun√ß√£o", que √© escrever o nome dela depois que a criamos.',
      },
      {
        type: 'code',
        body: `funcao usarRadar() {
    var mensagem = 'Mande suas coordenadas, por favor';

    var sensores = [falso, falso, falso];
    var resolucao = 10;
    var telaAcesa = verdadeiro;
    
    para (var i = 0;i < sensores.tamanho(); i++) {
        sensores[i] = verdadeiro;
    }
    
    resolucao += 20;
    
    se (!mensagem.inclui('script') e telaAcesa) {
        escreva(mensagem);
    }
}

usarRadar();
// Resultado: Mande suas coordenadas, por favor`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'A√≠ sim! Temos nossa primeira fun√ß√£o criada.',
      },
      {
        type: 'alert',
        body: 'Cuidado: fun√ß√µes tamb√©m tem o seu pr√≥prio escopo, o que quer dizer que vari√°veis criadas dentro de uma fun√ß√£o n√£o pode ser acessadas de fora dela.',
      },
      {
        type: 'code',
        body: `funcao minhaFuncao() {
    var minhaVariavel = ['Petros']
}

escreva(minhaVariavel[0])
// Resultado: Erro`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Tudo bem, mas podemos melhor nossa fun√ß√£o.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Sabe para que servem os par√™nteses de uma fun√ß√£o? Servem para passar valores para c√≥digo dentro dela.',
      },
      {
        type: 'default',
        title: 'Oi?',
        body: '√â isso mesmo! Ao chamar uma fun√ß√£o, podemos passar qualquer valor entre seus par√™nteses.',
      },
      {
        type: 'code',
        body: `funcao mostrarMensagem() {

}

mostrarMensagem("Ol√°, mundo!");`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Para usar esse "Ol√°, mundo!" dentro da fun√ß√£o "mostrarMensagem()", devemos criar vari√°veis entre os par√™nteses da fun√ß√£o',
      },
      {
        type: 'code',
        body: `funcao mostrarMensagem(mensagem) {
            escreva(mensagem);
}

mostrarMensagem("Ol√°, mundo!");
// Resultado: Ol√°, mundo!
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Essas vari√°veis entre par√™nteses se chamam par√¢metros de fun√ß√£o e elas podem ter qualquer nome, e caso voc√™ queira passar mais valores para a fun√ß√£o, voc√™ ter√° que criar mais par√¢metros.',
      },
      {
        type: 'code',
        body: `funcao somar(numero1, numero2, numero3) {
        var soma = numero1 + numero2 + numero3;
        escreva(soma);
}

mostrarMensagem(1, 2, 3);
// Resultado: 6
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Por meio dos par√¢metros √© que podemos criar resultados din√¢micos com uma mesma fun√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'No nosso caso, podemos passar a mensagem que queremos como par√¢metro da fun√ß√£o "usarRadar()"',
      },
      {
        type: 'default',
        title: null,
        body: 'Assim, a fun√ß√£o ira fazer todo o trabalho de configurar o radar usando qualquer tipo de mensagem, seja de resposta ou de envio, veja:',
      },
      {
        type: 'code',
        body: `funcao usarRadar(mensagem) {
    var sensores = [falso, falso, falso];
    var resolucao = 10;
    var telaAcesa = verdadeiro;

    para (var i = 0;i < sensores.tamanho(); i++) {
        sensores[i] = verdadeiro;
    }

    resolucao += 20;

    se (!mensagem.inclui('script') e telaAcesa) {
        escreva(mensagem);
    }
}

usarRadar("Ok, vou procurar");
usarRadar("Tudo bem, vou estar te esperando");
usarRadar("Minhas coordenadas s√£o: x:42;y:84");
usarRadar("Muito obrigado!");
/* Resultado: Ok, vou procurar
            Tudo bem, vou estar te esperando
            Minhas coordenadas s√£o: x:42;y:84
            Muito obrigado!
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Viu s√≥, enviamos e recebemos v√°rias mensagens diferentes, e precisamos escrever o c√≥digo de configura√ß√£o do radar apenas uma vez.',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso n√£o √© incr√≠vel? Agora temos um c√≥digo bem mais limpo e organizado.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas voltando... Agora vamos em dire√ß√£o a essa pessoa desconhecida.',
      },
    ],
  },
  {
    starId: 27,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Agora que temos as coordenadas certas, podemos saber para qual planeta temos que ir.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, antes, precisamos reabastecer nosso foguete n√©?',
      },
      {
        type: 'default',
        title: null,
        body: 'Por sorte temos um posto espacial aqui perto.',
      },
      {
        type: 'default',
        title: null,
        body: 'No posto, ele disponibilizam uma fun√ß√£o para calcular o pre√ßo do combust√≠vel com base em quantos litros queremos.',
      },
      {
        type: 'code',
        body: `funcao calcularPreco(litros) {
    var preco = 2;
    var precoTotal = litros * preco;
    retorna precoTotal
}
`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: 'O que √© esse retorna?',
        body: 'Voc√™ se lembra que eu falava que ao executar um m√©todo de vetor era retornado determinado valor?',
      },
      {
        type: 'default',
        title: 'Sim',
        body: 'Isso porque m√©todos tamb√©m s√£o fun√ß√µes. E agora que voc√™ aprendeu a criar suas pr√≥prias fun√ß√µes, precisa saber a usar a palavra-chave "retorna".',
      },
      {
        type: 'list',
        title: 'Retorna',
        body: 'O retorna √© uma instru√ß√£o usada em fun√ß√µes para retornar um determinado valor.',
      },
      {
        type: 'default',
        title: null,
        body: 'E esse valor retornado pode ser usado para fora da fun√ß√£o.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Colocando esse valor retornado em uma vari√°vel. Olhe:',
      },
      {
        type: 'code',
        body: `funcao calcularPreco(litros) {
    var preco = 2;
    var precoTotal = preco * litros;
    retorna precoTotal
}

var preco = calcularPreco(24);
escreva(preco);
// Resultado: 48
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Viu s√≥? O valor de precoTotal vou retornado pela fun√ß√£o, e esse valor retornado foi colocado na vari√°vel preco.',
      },
      {
        type: 'alert',
        body: 'ATEN√á√ÉO: No c√≥digo, h√° duas vari√°veis preco, por√©m elas n√£o s√£o iguais, porque possuem escopo diferente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Contudo, podemos melhorar a escrita dessa fun√ß√£o. Est√° vendo que a vari√°vel precoTotal √© igual a multiplica√ß√£o de preco e litros?',
      },
      {
        type: 'default',
        title: 'Sim',
        body: 'Podemos retornar diretamente essa multiplica√ß√£o sem a necessidade de colocar o resultado final em uma vari√°vel.',
      },
      {
        type: 'code',
        body: `funcao calcularPreco(litros) {
    var preco = 2;
    retorna preco * litros
}

var preco = calcularPreco(24);
escreva(preco);
// Resultado: 48
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Parece m√°gica, mas n√£o √©. Al√©m disso, √© poss√≠vel retornar qualquer valor que √© resultado de uma express√£o, seja um c√°lculo ou compara√ß√£o, como no c√≥digo abaixo.',
      },
      {
        type: 'code',
        body: `funcao conferirMaior(numero1, numero2) {
    retorna numero1 > numero2;
}

var resultado = conferirMaior(2, 8);
escreva(resultado);
// Resultado: falso
`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Por√©m, voltando, o pre√ßo desse combust√≠vel t√° bem salgado, mas √© o que temos para hoje, n√©?',
      },
      {
        type: 'default',
        title: null,
        body: 'Com o combust√≠vel comprado, temos que coloc√°-lo no tanque.',
      },
      {
        type: 'default',
        title: null,
        body: 'Na verdade eu criei uma fun√ß√£o que faz isso para gente. Basta colocar o novo combust√≠vel e ele retorna quantos litros tem agora.',
      },
      {
        type: 'code',
        body: `var reabastecer = funcao (litros) {
    // Reabastecendo
    var totalLitros = 4 + litros;
    escreva("Agora h√° \${totalLitros} litros.");
}

reabastecer(48);
// Resultado: Agora h√° 52 litros`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Mas que esp√©cie de fun√ß√£o √© essa?',
        body: 'Isso se trata de uma fun√ß√£o an√¥nima.',
      },
      {
        type: 'list',
        title: 'Fun√ß√£o an√¥nima',
        body: 'fun√ß√µes an√¥nimas s√£o o que o nome diz, fun√ß√µes que n√£o tem um nome, simplesmente isso.',
      },
      {
        type: 'list',
        body: 'Geralmente elas s√£o usadas para serem colocadas em var√≠aveis. Elas n√£o tem diferen√ßa com fun√ß√µes com nomes, e podem ser usadas como uma fun√ß√£o qualquer, ou seja, elas tamb√©m podem usar par√¢metros e retornar valores.',
      },
      {
        type: 'code',
        body: `var reabastecer = funcao (litros) {
    // Reabastecendo
    var totalLitros = litros;
    escreva("Agora h√° \${litros} litros.");
    retorna litros;
}

escreva(reabastecer(48));
/* Resultado: Agora h√° 52 litros
              48
*/`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Caso a fun√ß√£o an√¥nima seja associada a uma vari√°vel, para chamar essa fun√ß√£o, dever√° ser usado o nome dessa vari√°vel.',
      },
      {
        type: 'code',
        body: `var calcularArea = funcao(base, altura) {
    retorna base * altura;
};

escreva(calcularArea(2, 5));
// Resultado: 10`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Ent√£o, porque usar fun√ß√µes an√¥nimas, j√° que n√£o h√° diferen√ßa?',
        body: 'Embora tamb√©m seja poss√≠vel com func√ß√µes nomeadas, as fun√ß√µes an√¥nimas permitem serem usadas como par√¢metros para outras fun√ß√µes mais facilmente.',
      },
      {
        type: 'default',
        title: null,
        body: 'Sim, usar fun√ß√£o dentro de outra fun√ß√£o. Mas, isso √© assunto para outra hora.',
      },
      {
        type: 'default',
        title: null,
        body: 'Agora com o tanque cheio, falta localizar o planeta pelas coordenadas.',
      },
      {
        type: 'default',
        title: null,
        body: 'Nas redondezas, h√° apenas 3 planetas diferentes, podemos achar o correto por meio de uma fun√ß√£o.',
      },
      {
        type: 'code',
        body: `funcao acharPlaneta(coordenadas) {
    se (coordenadas == "x:20;y:10") {
        retorna "Planeta Xalax";
    } senao se (coordenadas == "x:72;y:36") {
        retorna "Planeta Valtor";
    } senao {
        retorna "Planeta Kyron";
    }
}

escreva("O \${acharPlaneta('x:42;y:84')} √© para onde temos que ir!");
// Resultado "O Planeta Kyron √© para onde temos que ir!"`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Nessa fun√ß√£o, colocamos tr√™s "retorna" diferentes, o que tamb√©m √© totalmente poss√≠vel.',
      },
      {
        type: 'alert',
        body: 'Quando um retorna √© executado, a fun√ß√£o para de executar o resto do c√≥digo dentro dela.',
      },
      {
        type: 'code',
        body: `funcao mostrarAlgo() {
    retorna
    escreva("Escrevendo algo.")
}

mostrarAlgo()
// Resultado: Nada`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'Tamb√©m √© poss√≠vel uma fun√ß√£o n√£o retornar nada. Isso pode ser √∫til em uma estrutura condicional, por exemplo.',
      },
      {
        type: 'code',
        body: `funcao verificarIdade(idade) {
    se (idade > 18) {
        escreva("Pode pilotar um foguete");
        retorna;
    } 
    escreva("N√£o pode pilotar um foguete");
}

verificarIdade(999);
// Resultado Pode pilotar um foguete`,
        isRunnable: true,
      },
      {
        type: 'alert',
        body: 'No exemplo acima, o escreva de baixo n√£o foi executado, por que o retorna encerrou a execu√ß√£o da fun√ß√£o, impedindo que o escreva de baixo fosse executado.',
      },
      {
        type: 'code',
        body: `funcao acharPlaneta(coordenadas) {
    se (coordenadas == "x:20;y:10") {
        retorna "Planeta Xalax";
    } senao se (coordenadas == "x:72;y:36") {
        retorna "Planeta Valtor";
    } senao {
        retorna "Planeta Kyron";
    }
}

escreva("O \${acharPlaneta('x:42;y:84')} √© para onde temos que ir!")
// Resultado "O Planeta Kyron √© para onde temos que ir!"`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Viu que no exemplo acima eu usei a fun√ß√£o como se fosse uma vari√°vel? Esse √© o poder do "retorna".',
      },
      {
        type: 'default',
        title: null,
        body: 'j√° que a fun√ß√£o est√° tendo um valor, voc√™ n√£o precisa necessariamente colocar esse valor em uma vari√°vel para us√°-lo.',
      },
      {
        type: 'default',
        title: null,
        body: 'A mesma coisa que faz√≠amos com os m√©todos de vetor, lembra? √Äs vezes coloc√°vamos o valor retornado do m√©todo em uma vari√°vel ou us√°vamos diretamente.',
      },
      {
        type: 'code',
        body: `var letras = ['a', 'b', 'c'];
var numeros = [1, 2, 3]
        
var qtdLetras = letras.tamanho();

escreva(qtdLetras);
escreva(numeros.tamanho());

/* Resultado: 3
              3
*/`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora tudo est√° se encaixando!',
      },
      {
        type: 'default',
        title: null,
        body: 'Com as coordenadas definidas, chegaremos ao planeta rapidinho!',
      },
    ],
  },
  {
    starId: 28,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'Pousamos no planeta s√£o e salvos!',
      },
      {
        type: 'default',
        title: null,
        body: 'O que falta agora? Achar a pessoa, √© claro.',
      },
      {
        type: 'default',
        title: null,
        body: 'E j√° que esse planeta n√£o √© pequeno, isso pode levar dias ou at√© meses.',
      },
      {
        type: 'default',
        title: null,
        body: 'Espera, h√° algu√©m vindo em nossa dire√ß√£o, e ele parece ser bem grande!',
      },
      {
        type: 'default',
        title: null,
        body: 'Ele disse que sabe quem estamos procurando e que pode nos levar at√© ela.',
      },
      {
        type: 'default',
        title: 'E confiamos nesse cara?',
        body: 'Bom, parece ser melhor do que nada. Al√©m disso, o que algu√©m desse tamanho far√° com a gente se recusarmos?',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que, ao longo do caminho ele passar√° alguns desafios, e o primeiro come√ßa agora.',
      },
      {
        type: 'default',
        title: 'Desafios?',
        body: 'O primeiro deles √© f√°cil: adivinhar um n√∫mero.',
      },
      {
        type: 'default',
        title: null,
        body: 'O grand√£o, vamos chamar ele assim, vai gerar um n√∫mero aleat√≥rio por meio de uma fun√ß√£o nativa.',
      },
      {
        type: 'default',
        title: 'Fun√ß√£o nativa?',
        body: 'Sim, tamb√©m conhecida como fun√ß√µes internas.',
      },
      {
        type: 'list',
        title: 'Fun√ß√£o nativa',
        body: 'S√£o fun√ß√µes pr√©-criadas, que j√° vem prontas para serem usadas em qualquer programa sem a necessidade de voc√™ mesmo cri√°-las.',
      },
      {
        type: 'default',
        title: null,
        body: 'S√£o como o "escreva()", "leia()" e os m√©todos de vetor, sabe? Em nenhum momento criamos essas fun√ß√µes. (n√£o sei se tinha percebido, mas "escreva()" e "leia()" tamb√©m s√£o fun√ß√µes).',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que, h√° outras fun√ß√µes nativas, como o "aleatorio()".',
      },
      {
        type: 'list',
        title: 'aleatorio()',
        body: 'A fun√ß√£o "aleatorio()" apenas retorna um n√∫mero aleat√≥rio. Mas n√£o qualquer n√∫mero aleat√≥rio, mas um entre 0 e 0.99999999999...',
      },
      {
        type: 'code',
        body: `var numeroAleatorio = aleatorio();
        
escreva(numeroAleatorio);
// Resultado: Um n√∫mero aleat√≥rio entre 0 e 0.99999...`,
        isRunnable: true,
      },
      {
        type: 'default',
        body: 'N√£o importa quantas vezes voc√™ execute sempre ser√° retornado um n√∫mero aleat√≥rio entre esses dois n√∫meros.',
      },
      {
        type: 'default',
        body: 'Pode n√£o parecer √∫til, de fato com certeza n√£o √©, mas existe um que pode ser.',
      },
      {
        type: 'list',
        title: 'aleatorioEntre()',
        body: 'a fun√ß√£o "aleatorioEntre()" tamb√©m gera um n√∫mero aleat√≥rio. Por√©m, o n√∫mero gerado estar√° sempre entre os valores passado para a fun√ß√£o.',
      },
      {
        type: 'list',
        body: 'O primeiro par√¢metro √© o n√∫mero "m√≠nimo" e o segundo √© o "m√°ximo", o n√∫mero aleat√≥rio dever√° estar entre esses dois n√∫meros.',
      },
      {
        type: 'code',
        body: `var numeroAleatorio = aleatorioEntre(1, 9)
        
escreva(numeroAleatorio)
// Resultado: Um n√∫mero aleat√≥rio entre 1 e 8`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'N√£o era para ser um n√∫mero aleat√≥rio entre 1 e 9?',
        body: 'a fun√ß√£o aleatorioEntre(0, 9) tem um por√©m: o valor gerado aleatoriamente nunca ser√° igual ao n√∫mero m√°ximo passado para a fun√ß√£o, mas pode ser igual ao m√≠nimo.',
      },
      {
        type: 'code',
        body: `var numero = aleatorioEntre(1, 2);
        
escreva(numero);
// Resultado: Sempre vai ser 1, porque o m√°ximo (2) nunca √© inclu√≠do`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Agora vamos resolver o desafio do grand√£o.',
      },
      {
        type: 'code',
        body: `var maximo = 10;
var minimo = 4 * 2 + 1;

var numero = aleatorioEntre(minimo, maximo);
        
// Qual ser√° o valor de numero?
escreva(numero);`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Se o m√°ximo √© 10 e o m√≠nimo √© 9, ent√£o o resultado s√≥ pode ser 9.',
      },
      {
        type: 'code',
        body: `var maximo = 10;
var minimo = 4 * 2 + 1;

var numero = aleatorioEntre(minimo, maximo);
        
escreva(numero);
// Resultado: 9`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Essa foi muito f√°cil.',
      },
      {
        type: 'default',
        title: null,
        body: 'J√° andamos um tanto, e o grand√£o vai passar outro desafio.',
      },
      {
        type: 'default',
        title: null,
        body: 'E o desafio √©: criar uma fun√ß√£o que transforma um n√∫mero em um texto!',
      },
      {
        type: 'code',
        body: `funcao transformarNumero(numero) {
    
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'E ele j√° armou a fun√ß√£o para gente escrever o retorno nela',
      },
      {
        type: 'default',
        title: 'Mas como transformar um n√∫mero em texto?',
        body: 'Essa vai ser f√°cil tamb√©m, pois existem fun√ß√µes nativas que convertem um tipo de dado para outro.',
      },
      {
        type: 'default',
        title: null,
        body: 'Essas fun√ß√µes nativas s√£o 3:',
      },
      {
        type: 'list',
        title: 'texto()',
        body: 'a fun√ß√£o "texto()" converte um n√∫mero, real ou inteiro, para texto, retornando esse novo texto.',
      },
      {
        type: 'code',
        body: `var numero = 42;

var texto = texto(numero);

escreva(texto)
// Resultado: 42;`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Tamb√©m h√° conversores para inteiro e real.',
      },
      {
        type: 'list',
        title: 'inteiro()',
        body: 'Converte um n√∫mero real ou texto, que n√£o apresente letras, em um n√∫mero inteiro.',
      },
      {
        type: 'code',
        body: `var numTexto = "111";

escreva(111 + inteiro(numTexto));
// Resultado: 222`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: 'real()',
        body: 'Converte um n√∫mero inteiro ou texto, que n√£o apresente letras, em um n√∫mero real.',
      },
      {
        type: 'code',
        body: `var numTexto = "504.69";

escreva(0.01 + real(numTexto));

// Resultado: 504.7`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Viu? Os n√∫meros foram somados! Caso fosse texto, aconteceria uma concatena√ß√£o.',
      },
      {
        type: 'alert',
        body: 'S√≥ que, como eu disse, para converter para n√∫mero (inteiro ou real), o texto precisa necessariamente conter apenas n√∫meros. Caso contr√°rio vai dar erro.',
      },
      {
        type: 'code',
        body: `var texto = "Ol√°";

escreva(real(texto));

// Resultado: Erro`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, para resolver o desafio do grand√£o:',
      },
      {
        type: 'code',
        body: `funcao transformarNumero(numero) {
    retorna texto(numero);
}

escreva(transformarNumero(999));
// Resultado: 999`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Sim, estamos retornando o retorno de outra fun√ß√£o. Ent√£o, acabamos de criar uma fun√ß√£o de alta ordem üòÄ!',
      },
      {
        type: 'default',
        title: 'Alta o que?',
        body: 'Por√©m, o grand√£o acabou de dizer que isso foi s√≥ um aperitivo, e que os verdadeiros desafios come√ßam agora.',
      },
      {
        type: 'default',
        title: 'Vish...',
        body: ':)',
      },
    ],
  },
  {
    starId: 29,
    texts: [
      {
        type: 'default',
        title: null,
        body: 'O pr√≥ximo desafio √© dobrar cada n√∫mero de um vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, um vetor sendo [1, 2, 3, 4], deve gerar um vetor com [2, 4, 6, 8].',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4];
var novoVetor = [];

para (var i = 0; i < numeros.tamanho(); i++) {
    var novoNumero = numeros[i] * 2;
    novoVetor.adicionar(novoNumero);
}

escreva(novoVetor);
// Resultado: 2, 4, 6, 8`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: 'Pronto',
        body: 'Muito bem!!',
      },
      {
        type: 'default',
        title: null,
        body: 'S√≥ que, h√° uma maneira de fazer exatamente isso em bem menos linhas.',
      },
      {
        type: 'default',
        title: 'Como?',
        body: 'Usando fun√ß√µes de alta ordem!',
      },
      {
        type: 'list',
        title: 'Fun√ß√µes de alta ordem',
        body: 'Fun√ß√µes de alta ordem ou fun√ß√µes de ordem superior (vamos chamar de apenas fun√ß√µes avan√ßadas), s√£o fun√ß√µes que recebem outras fun√ß√µes como par√¢metro.',
      },
      {
        type: 'code',
        body: `funcao cumprimentar() {
    escreva("Ol√°!");
};

funcao souOutraFuncao(funcaoCumprimentar) {
    funcaoCumprimentar();
};

souOutraFuncao(cumprimentar);
// Resultado: Ol√°!`,
        isRunnable: true,
      },
      {
        type: 'list',
        title: null,
        body: 'Nesse exemplo, a fun√ß√£o "cumprimentar()" foi passado como par√¢metro para a funcao "souOutraFuncao()". Assim, a fun√ß√£o "cumprimentar()" foi executada dentro de "souOutraFuncao()".',
      },
      {
        type: 'list',
        title: null,
        body: 'Uma fun√ß√£o avan√ßada tamb√©m √© aquela que retorna uma fun√ß√£o passada que foi passada como par√¢metro.',
      },
      {
        type: 'code',
        body: `funcao somar(num1, num2) {
    retorna num1 + num2;
};

funcao executarSomar(num1, num2, somar) {
   retorna somar(num1, num2);
};

escreva(executarSomar(1, 2, somar))
// Resultado: 3`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Neste exemplo, a funcao "executarSomar()" recebe 3 par√¢metros. Os dois primeiros s√£o n√∫meros e o terceiro √© uma fun√ß√£o que soma dois n√∫meros.',
      },
      {
        type: 'default',
        title: null,
        body: 'A fun√ß√£o "soma()" √© executada dentro da funcao "executarSomar()" usando os par√¢metros que foram originalmente passados para a funcao "executarSomar()".',
      },
      {
        type: 'default',
        title: null,
        body: 'E o retorno de "somar()" √© retornado pela funcao "executarSomar()".',
      },
      {
        type: 'default',
        title: null,
        body: 'Parece complicado? Tealvez seja.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas voc√™ percebeu que a forma de escrever uma fun√ß√£o desse tipo n√£o √© diferente de escrever uma fun√ß√£o normal.',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o no final das contas, "fun√ß√£o de ordem superior" acaba sendo um nome chique de fun√ß√µes que recebem ou que retornam outras fun√ß√µes.',
      },
      {
        type: 'default',
        title: null,
        body: 'Mas porque eu estou explicando isso? Porque a fun√ß√£o nativa que iremos usar agora √© uma fun√ß√£o desse tipo.',
      },
      {
        type: 'default',
        title: null,
        body: 'Existem algumas fun√ß√µes avan√ßadas de s√£o usadas especificamente para vetores, e uma delas √© o "mapear()".',
      },
      {
        type: 'list',
        title: 'mapear()',
        body: 'A fun√ß√£o "mapear()" transforma cada elemento de um vetor atrav√©s de um la√ßo, retornando um novo vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Para escrev√™-la √© simples:',
      },
      {
        type: 'code',
        body: `var novoVetor = mapear(vetorOriginal, funcaoTranformadora);`,
        isRunnable: false,
      },
      {
        type: 'list',
        body: 'O "mapear()" recebe dois par√¢metros, o primeiro √© o vetor original e o segundo √© a fun√ß√£o transformadora, ou seja, a que transformar√° cada elemento do vetor original.',
      },
      {
        type: 'default',
        title: null,
        body: 'Quando o "mapear()" for executado essa fun√ß√£o transformadora ser√° aplicada a cada elemento do vetor original.',
      },
      {
        type: 'default',
        title: null,
        body: 'No nosso caso, a fun√ß√£o transformadora ser√° fun√ß√£o que dobra um n√∫mero. Ent√£o vamos cri√°-la.',
      },
      {
        type: 'code',
        body: ` var numeros = [1, 2, 3, 4];

funcao dobrar(numero) {
    retorna numero * 2;
};
        
var novosNumeros = mapear(numeros, dobrar);

escreva(novosNumeros);
// Resultado: 2, 4, 6, 8`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'A fun√ß√£o transformadora, no caso "somar()", est√° recebendo um par√¢metro. Mas de onde ele est√° vindo?',
      },
      {
        type: 'default',
        title: null,
        body: 'Lembra que eu disse que a mapear faz uma la√ßo no vetor passado como primeiro par√¢metro?',
      },
      {
        type: 'default',
        title: null,
        body: 'A cada itera√ß√£o desse la√ßo a fun√ß√£o "dobrar()" √© executada recebendo como par√¢metro o n√∫mero atual do vetor n√∫meros.',
      },
      {
        type: 'default',
        title: 'Que?',
        body: 'Bugou agora? Aqui temos uma fun√ß√£o que mostra o funcionamento do "mapear()" por baixo dos panos.',
      },
      {
        type: 'code',
        body: `funcao meuMapear(vetor, funcaoTrasnformadora) {
    var novoVetor = [];
          
    para (var i = 0; i < vetor.tamanho(); i++) {
        var elementoTransformado = funcaoTrasnformadora(vetor[i]);
        novoVetor.adicionar(elementoTransformado);
    }
          
    retorna novoVetor;
}`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: 'Hmm...',
        body: '√â bem parecido com o la√ßo que criamos logo no come√ßo, n√£o √©? S√≥ que o "mapear()" faz isso automaticamente, veja de novo.',
      },
      {
        type: 'code',
        body: `var numeros = [1, 2, 3, 4];

funcao dobrar(numero) {
    retorna numero * 2;
};
        
var novosNumeros = mapear(numeros, dobrar);

escreva(novosNumeros);
// Resultado: 2, 4, 6, 8`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Muito bem, pronto para mais um desafio? O pr√≥ximo √© criar um vetor com os n√∫meros de outro vetor que s√£o maiores que 10.',
      },
      {
        type: 'default',
        title: null,
        body: 'Por exemplo, um vetor [1, 4, 9, 12, 45, 60] deve gerar um vetor [12, 45, 60].',
      },
      {
        type: 'default',
        title: null,
        body: 'N√£o ser√° poss√≠vel fazer com o "mapear()", porque esse m√©todo retorna obrigatoriamente um vetor com a mesma quantidade de itens do vetor original. O vetor gerado nesse desafio pode ter bem menos, n√£o √©?',
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o teremos que usar outra fun√ß√£o avan√ßada, no caso que filtre os elementos de um vetor.',
      },
      {
        type: 'default',
        title: null,
        body: 'Esse √© um trabalho para a fun√ß√£o "filtrarPor()".',
      },
      {
        type: 'list',
        title: 'filtrarPor()',
        body: 'Esse m√©todo cria outro vetor contendo apenas os elementos do vetor original que passem em uma condi√ß√£o fornecida.',
      },
      {
        type: 'list',
        body: 'E j√° que ele √© uma fun√ß√£o avan√ßada, assim como o mapear, ele cria um la√ßo no vetor, onde cada elemento na itera√ß√£o √© passado como par√¢metro para fun√ß√£o filtradora.',
      },
      {
        type: 'code',
        body: `var novoVetor = filtrarPor(vetorOriginal, funcaoFiltradora);`,
        isRunnable: false,
      },
      {
        type: 'default',
        title: null,
        body: 'Ent√£o, no nosso caso:',
      },
      {
        type: 'code',
        body: `var numeros = [5, 10, 15, 20];

funcao verificarSeMaiorQue10(numero) {
    retorna numero > 10;
};
                
var numerosFiltrados = filtrarPor(numeros, verificarSeMaiorQue10);
        
escreva(numerosFiltrados);
// Resultado: 15, 20`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Est√° vendo que a fun√ß√£o "verificarSeMaiorQue10()" retorna um l√≥gico?',
      },
      {
        type: 'default',
        title: null,
        body: 'Isso porque a fun√ß√£o filtradora deve obrigatoriamente retornar um l√≥gico, que:\nse for verdadeiro, o elemento atual √© colocado no novo vetor, caso falso ele √© exclu√≠do.',
      },
      {
        type: 'default',
        title: null,
        body: 'Talvez voc√™ ache que o nome da fun√ß√£o filtradora grande demais (o que n√£o √© problema nenhum), voc√™ pode usar uma fun√ß√£o an√¥nima no lugar.',
      },
      {
        type: 'default',
        title: null,
        body: 'Assim √≥:',
      },
      {
        type: 'code',
        body: `var numeros = [5, 10, 15, 20];

var numerosFiltrados = filtrarPor(numeros, funcao(numero) {
        retorna numero > 10;
});
        
escreva(numerosFiltrados);
// Resultado: 15, 20`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Essa √© uma das vantagens da fun√ß√£o an√¥nima que eu disse antes, de criar a fun√ß√£o diretamente como par√¢metro de outra fun√ß√£o.',
      },
      {
        type: 'default',
        title: null,
        body: 'E antes que pergunte, sim, tamb√©m d√° para usar fun√ß√£o an√¥nima no "mapear()".',
      },
      {
        type: 'code',
        body: `
var numeros = [1, 2, 3, 4];

var novosNumeros = mapear(numeros, funcao(num) {
    retorna num * 2;
});

escreva(novosNumeros);
// Resultado: 2, 4, 6, 8`,
        isRunnable: true,
      },
      {
        type: 'default',
        title: null,
        body: 'Acabamos todos os desafios do grand√£o, e ele disse que j√° estamos aptos a encontrar com a pessoa desconhecida.',
      },
      {
        type: 'default',
        title: null,
        body: 'Quem ser√° que √© essa pessoa?',
      },

      //   {
      //     type: 'default',
      //     title: null,
      //     body: 'Com mais um desafio conclu√≠do, s√≥ resta o √∫ltimo: Ordenar um vetor de n√∫meros em ordem crescente.',
      //   },
      //   {
      //     type: 'default',
      //     title: null,
      //     body: 'Por exemplo, um vetor [8, 2, 6, 12, 1] gerar√° um vetor [1, 2, 6, 8, 12]',
      //   },
    ],
  },
];
